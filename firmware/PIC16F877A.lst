

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu May 12 19:40:11 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0008                     	;# 
   183  0009                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  000E                     	;# 
   190  000F                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0013                     	;# 
   195  0014                     	;# 
   196  0015                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0017                     	;# 
   200  0018                     	;# 
   201  0019                     	;# 
   202  001A                     	;# 
   203  001B                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001D                     	;# 
   207  001E                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  0087                     	;# 
   213  0088                     	;# 
   214  0089                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  0000                     	;# 
   235  0001                     	;# 
   236  0002                     	;# 
   237  0003                     	;# 
   238  0004                     	;# 
   239  0005                     	;# 
   240  0006                     	;# 
   241  0007                     	;# 
   242  0008                     	;# 
   243  0009                     	;# 
   244  000A                     	;# 
   245  000B                     	;# 
   246  000C                     	;# 
   247  000D                     	;# 
   248  000E                     	;# 
   249  000E                     	;# 
   250  000F                     	;# 
   251  0010                     	;# 
   252  0011                     	;# 
   253  0012                     	;# 
   254  0013                     	;# 
   255  0014                     	;# 
   256  0015                     	;# 
   257  0015                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  0018                     	;# 
   261  0019                     	;# 
   262  001A                     	;# 
   263  001B                     	;# 
   264  001B                     	;# 
   265  001C                     	;# 
   266  001D                     	;# 
   267  001E                     	;# 
   268  001F                     	;# 
   269  0081                     	;# 
   270  0085                     	;# 
   271  0086                     	;# 
   272  0087                     	;# 
   273  0088                     	;# 
   274  0089                     	;# 
   275  008C                     	;# 
   276  008D                     	;# 
   277  008E                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0094                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294  0000                     	;# 
   295  0001                     	;# 
   296  0002                     	;# 
   297  0003                     	;# 
   298  0004                     	;# 
   299  0005                     	;# 
   300  0006                     	;# 
   301  0007                     	;# 
   302  0008                     	;# 
   303  0009                     	;# 
   304  000A                     	;# 
   305  000B                     	;# 
   306  000C                     	;# 
   307  000D                     	;# 
   308  000E                     	;# 
   309  000E                     	;# 
   310  000F                     	;# 
   311  0010                     	;# 
   312  0011                     	;# 
   313  0012                     	;# 
   314  0013                     	;# 
   315  0014                     	;# 
   316  0015                     	;# 
   317  0015                     	;# 
   318  0016                     	;# 
   319  0017                     	;# 
   320  0018                     	;# 
   321  0019                     	;# 
   322  001A                     	;# 
   323  001B                     	;# 
   324  001B                     	;# 
   325  001C                     	;# 
   326  001D                     	;# 
   327  001E                     	;# 
   328  001F                     	;# 
   329  0081                     	;# 
   330  0085                     	;# 
   331  0086                     	;# 
   332  0087                     	;# 
   333  0088                     	;# 
   334  0089                     	;# 
   335  008C                     	;# 
   336  008D                     	;# 
   337  008E                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009C                     	;# 
   345  009D                     	;# 
   346  009E                     	;# 
   347  009F                     	;# 
   348  010C                     	;# 
   349  010D                     	;# 
   350  010E                     	;# 
   351  010F                     	;# 
   352  018C                     	;# 
   353  018D                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0008                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  000E                     	;# 
   370  000F                     	;# 
   371  0010                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0014                     	;# 
   376  0015                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  001D                     	;# 
   387  001E                     	;# 
   388  001F                     	;# 
   389  0081                     	;# 
   390  0085                     	;# 
   391  0086                     	;# 
   392  0087                     	;# 
   393  0088                     	;# 
   394  0089                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0094                     	;# 
   402  0098                     	;# 
   403  0099                     	;# 
   404  009C                     	;# 
   405  009D                     	;# 
   406  009E                     	;# 
   407  009F                     	;# 
   408  010C                     	;# 
   409  010D                     	;# 
   410  010E                     	;# 
   411  010F                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0008                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000D                     	;# 
   428  000E                     	;# 
   429  000E                     	;# 
   430  000F                     	;# 
   431  0010                     	;# 
   432  0011                     	;# 
   433  0012                     	;# 
   434  0013                     	;# 
   435  0014                     	;# 
   436  0015                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  001D                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  0081                     	;# 
   450  0085                     	;# 
   451  0086                     	;# 
   452  0087                     	;# 
   453  0088                     	;# 
   454  0089                     	;# 
   455  008C                     	;# 
   456  008D                     	;# 
   457  008E                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0093                     	;# 
   461  0094                     	;# 
   462  0098                     	;# 
   463  0099                     	;# 
   464  009C                     	;# 
   465  009D                     	;# 
   466  009E                     	;# 
   467  009F                     	;# 
   468  010C                     	;# 
   469  010D                     	;# 
   470  010E                     	;# 
   471  010F                     	;# 
   472  018C                     	;# 
   473  018D                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000D                     	;# 
   488  000E                     	;# 
   489  000E                     	;# 
   490  000F                     	;# 
   491  0010                     	;# 
   492  0011                     	;# 
   493  0012                     	;# 
   494  0013                     	;# 
   495  0014                     	;# 
   496  0015                     	;# 
   497  0015                     	;# 
   498  0016                     	;# 
   499  0017                     	;# 
   500  0018                     	;# 
   501  0019                     	;# 
   502  001A                     	;# 
   503  001B                     	;# 
   504  001B                     	;# 
   505  001C                     	;# 
   506  001D                     	;# 
   507  001E                     	;# 
   508  001F                     	;# 
   509  0081                     	;# 
   510  0085                     	;# 
   511  0086                     	;# 
   512  0087                     	;# 
   513  0088                     	;# 
   514  0089                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0093                     	;# 
   521  0094                     	;# 
   522  0098                     	;# 
   523  0099                     	;# 
   524  009C                     	;# 
   525  009D                     	;# 
   526  009E                     	;# 
   527  009F                     	;# 
   528  010C                     	;# 
   529  010D                     	;# 
   530  010E                     	;# 
   531  010F                     	;# 
   532  018C                     	;# 
   533  018D                     	;# 
   534  0000                     	;# 
   535  0001                     	;# 
   536  0002                     	;# 
   537  0003                     	;# 
   538  0004                     	;# 
   539  0005                     	;# 
   540  0006                     	;# 
   541  0007                     	;# 
   542  0008                     	;# 
   543  0009                     	;# 
   544  000A                     	;# 
   545  000B                     	;# 
   546  000C                     	;# 
   547  000D                     	;# 
   548  000E                     	;# 
   549  000E                     	;# 
   550  000F                     	;# 
   551  0010                     	;# 
   552  0011                     	;# 
   553  0012                     	;# 
   554  0013                     	;# 
   555  0014                     	;# 
   556  0015                     	;# 
   557  0015                     	;# 
   558  0016                     	;# 
   559  0017                     	;# 
   560  0018                     	;# 
   561  0019                     	;# 
   562  001A                     	;# 
   563  001B                     	;# 
   564  001B                     	;# 
   565  001C                     	;# 
   566  001D                     	;# 
   567  001E                     	;# 
   568  001F                     	;# 
   569  0081                     	;# 
   570  0085                     	;# 
   571  0086                     	;# 
   572  0087                     	;# 
   573  0088                     	;# 
   574  0089                     	;# 
   575  008C                     	;# 
   576  008D                     	;# 
   577  008E                     	;# 
   578  0091                     	;# 
   579  0092                     	;# 
   580  0093                     	;# 
   581  0094                     	;# 
   582  0098                     	;# 
   583  0099                     	;# 
   584  009C                     	;# 
   585  009D                     	;# 
   586  009E                     	;# 
   587  009F                     	;# 
   588  010C                     	;# 
   589  010D                     	;# 
   590  010E                     	;# 
   591  010F                     	;# 
   592  018C                     	;# 
   593  018D                     	;# 
   594                           
   595                           	psect	idataBANK1
   596  07FC                     __pidataBANK1:	
   597                           
   598                           ;initializer for _ligado
   599  07FC  3401               	retlw	1
   600  07FD  3400               	retlw	0
   601                           
   602                           	psect	strings
   603  0800                     __pstrings:	
   604  0800                     stringtab:	
   605  0800                     __stringtab:	
   606                           
   607                           ;	String table - string pointers are 1 byte each
   608  0800  1BFF               	btfsc	btemp+1,7
   609  0801  280A               	ljmp	stringcode
   610  0802  1383               	bcf	3,7
   611  0803  187F               	btfsc	btemp+1,0
   612  0804  1783               	bsf	3,7
   613  0805  0800               	movf	0,w
   614  0806  0A84               	incf	4,f
   615  0807  1903               	skipnz
   616  0808  0AFF               	incf	btemp+1,f
   617  0809  0008               	return
   618  080A                     stringcode:	
   619  080A                     stringdir:	
   620  080A  3008               	movlw	high stringdir
   621  080B  008A               	movwf	10
   622  080C  0804               	movf	4,w
   623  080D  0A84               	incf	4,f
   624  080E  0782               	addwf	2,f
   625  080F                     __stringbase:	
   626  080F  3400               	retlw	0
   627  0810                     __end_of__stringtab:	
   628  0810                     _dpowers:	
   629  0810  3401               	retlw	1
   630  0811  3400               	retlw	0
   631  0812  340A               	retlw	10
   632  0813  3400               	retlw	0
   633  0814  3464               	retlw	100
   634  0815  3400               	retlw	0
   635  0816  34E8               	retlw	232
   636  0817  3403               	retlw	3
   637  0818  3410               	retlw	16
   638  0819  3427               	retlw	39
   639  081A                     __end_of_dpowers:	
   640  000E                     _TMR1	set	14
   641  001F                     _ADCON0bits	set	31
   642  001E                     _ADRESH	set	30
   643  0017                     _CCP1CON	set	23
   644  0017                     _CCP1CONbits	set	23
   645  001D                     _CCP2CON	set	29
   646  001D                     _CCP2CONbits	set	29
   647  0015                     _CCPR1L	set	21
   648  001B                     _CCPR2L	set	27
   649  000B                     _INTCONbits	set	11
   650  000C                     _PIR1bits	set	12
   651  000D                     _PIR2bits	set	13
   652  0005                     _PORTA	set	5
   653  0006                     _PORTB	set	6
   654  0006                     _PORTBbits	set	6
   655  0007                     _PORTC	set	7
   656  0008                     _PORTD	set	8
   657  0009                     _PORTE	set	9
   658  0009                     _PORTEbits	set	9
   659  001A                     _RCREG	set	26
   660  0018                     _RCSTAbits	set	24
   661  0013                     _SSPBUF	set	19
   662  0014                     _SSPCONbits	set	20
   663  0010                     _T1CON	set	16
   664  0010                     _T1CONbits	set	16
   665  0012                     _T2CONbits	set	18
   666  0001                     _TMR0	set	1
   667  000F                     _TMR1H	set	15
   668  000E                     _TMR1L	set	14
   669  0019                     _TXREG	set	25
   670  00C1                     _OERR	set	193
   671  009F                     _ADCON1bits	set	159
   672  009E                     _ADRESL	set	158
   673  0081                     _OPTION_REGbits	set	129
   674  008C                     _PIE1bits	set	140
   675  008D                     _PIE2bits	set	141
   676  0092                     _PR2	set	146
   677  0099                     _SPBRG	set	153
   678  0093                     _SSPADD	set	147
   679  0091                     _SSPCON2	set	145
   680  0091                     _SSPCON2bits	set	145
   681  0094                     _SSPSTATbits	set	148
   682  0085                     _TRISA	set	133
   683  0086                     _TRISB	set	134
   684  0087                     _TRISC	set	135
   685  0088                     _TRISD	set	136
   686  0089                     _TRISE	set	137
   687  0098                     _TXSTAbits	set	152
   688  010D                     _EEADR	set	269
   689  010C                     _EEDATA	set	268
   690  018C                     _EECON1bits	set	396
   691  018D                     _EECON2	set	397
   692  081A                     __stringdata:	
   693  081A                     STR_4:	
   694  081A  340A               	retlw	10
   695  081B  340D               	retlw	13
   696  081C  3420               	retlw	32	;' '
   697  081D  342D               	retlw	45	;'-'
   698  081E  342D               	retlw	45	;'-'
   699  081F  342D               	retlw	45	;'-'
   700  0820  342D               	retlw	45	;'-'
   701  0821  342D               	retlw	45	;'-'
   702  0822  342D               	retlw	45	;'-'
   703  0823  342D               	retlw	45	;'-'
   704  0824  3420               	retlw	32	;' '
   705  0825  3445               	retlw	69	;'E'
   706  0826  3453               	retlw	83	;'S'
   707  0827  3454               	retlw	84	;'T'
   708  0828  344F               	retlw	79	;'O'
   709  0829  3455               	retlw	85	;'U'
   710  082A  3452               	retlw	82	;'R'
   711  082B  344F               	retlw	79	;'O'
   712  082C  3420               	retlw	32	;' '
   713  082D  3444               	retlw	68	;'D'
   714  082E  3445               	retlw	69	;'E'
   715  082F  3420               	retlw	32	;' '
   716  0830  3450               	retlw	80	;'P'
   717  0831  3449               	retlw	73	;'I'
   718  0832  344C               	retlw	76	;'L'
   719  0833  3448               	retlw	72	;'H'
   720  0834  3441               	retlw	65	;'A'
   721  0835  3420               	retlw	32	;' '
   722  0836  342D               	retlw	45	;'-'
   723  0837  342D               	retlw	45	;'-'
   724  0838  342D               	retlw	45	;'-'
   725  0839  342D               	retlw	45	;'-'
   726  083A  342D               	retlw	45	;'-'
   727  083B  342D               	retlw	45	;'-'
   728  083C  342D               	retlw	45	;'-'
   729  083D  3420               	retlw	32	;' '
   730  083E  340A               	retlw	10
   731  083F  340D               	retlw	13
   732  0840  3420               	retlw	32	;' '
   733  0841  3400               	retlw	0
   734  0842                     STR_1:	
   735  0842  3449               	retlw	73	;'I'
   736  0843  346E               	retlw	110	;'n'
   737  0844  3469               	retlw	105	;'i'
   738  0845  3463               	retlw	99	;'c'
   739  0846  3469               	retlw	105	;'i'
   740  0847  3461               	retlw	97	;'a'
   741  0848  346C               	retlw	108	;'l'
   742  0849  3469               	retlw	105	;'i'
   743  084A  347A               	retlw	122	;'z'
   744  084B  3461               	retlw	97	;'a'
   745  084C  346E               	retlw	110	;'n'
   746  084D  3464               	retlw	100	;'d'
   747  084E  346F               	retlw	111	;'o'
   748  084F  342E               	retlw	46	;'.'
   749  0850  342E               	retlw	46	;'.'
   750  0851  342E               	retlw	46	;'.'
   751  0852  3400               	retlw	0
   752  0853                     STR_3:	
   753  0853  3452               	retlw	82	;'R'
   754  0854  3450               	retlw	80	;'P'
   755  0855  344D               	retlw	77	;'M'
   756  0856  343A               	retlw	58	;':'
   757  0857  3420               	retlw	32	;' '
   758  0858  3400               	retlw	0
   759  0859                     STR_2:	
   760  0859  3425               	retlw	37	;'%'
   761  085A  3430               	retlw	48	;'0'
   762  085B  3434               	retlw	52	;'4'
   763  085C  3464               	retlw	100	;'d'
   764  085D  3400               	retlw	0
   765  085E                     __end_of__stringdata:	
   766                           
   767                           ; #config settings
   768  0000                     
   769                           	psect	cinit
   770  0015                     start_initialization:	
   771  0015                     __initialization:	
   772                           
   773                           ; Clear objects allocated to BANK1
   774  0015  1383               	bcf	3,7	;select IRP bank0
   775  0016  30A0               	movlw	low __pbssBANK1
   776  0017  0084               	movwf	4
   777  0018  30C9               	movlw	low (__pbssBANK1+41)
   778  0019  120A  158A  2070  120A  118A  	fcall	clear_ram0
   779                           
   780                           ; Clear objects allocated to BANK3
   781  001E  1783               	bsf	3,7	;select IRP bank2
   782  001F  3090               	movlw	low __pbssBANK3
   783  0020  0084               	movwf	4
   784  0021  30A8               	movlw	low (__pbssBANK3+24)
   785  0022  120A  158A  2070  120A  118A  	fcall	clear_ram0
   786                           
   787                           ; Initialize objects allocated to BANK1
   788  0027  1683               	bsf	3,5	;RP0=1, select bank1
   789  0028  1303               	bcf	3,6	;RP1=0, select bank1
   790  0029  120A  118A  27FC  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   791  002E  00EB               	movwf	__pdataBANK1& (0+127)
   792  002F  120A  118A  27FD   	fcall	__pidataBANK1+1	;fetch initializer
   793  0032  00EC               	movwf	(__pdataBANK1+1)& (0+127)
   794  0033                     end_of_initialization:	
   795                           ;End of C runtime variable initialization code
   796                           
   797  0033                     __end_of__initialization:	
   798  0033  0183               	clrf	3
   799  0034  120A  158A  2F20   	ljmp	_main	;jump to C main() function
   800                           
   801                           	psect	bssBANK1
   802  00A0                     __pbssBANK1:	
   803  00A0                     _fuzzy_delta:	
   804  00A0                     	ds	3
   805  00A3                     _fuzzy_erro:	
   806  00A3                     	ds	3
   807  00A6                     _temp_lida:	
   808  00A6                     	ds	3
   809  00A9                     _variacao_fuzzy:	
   810  00A9                     	ds	3
   811  00AC                     _ADCResult:	
   812  00AC                     	ds	2
   813  00AE                     _contador_rb6:	
   814  00AE                     	ds	2
   815  00B0                     _contagens_tm0:	
   816  00B0                     	ds	2
   817  00B2                     _delta:	
   818  00B2                     	ds	2
   819  00B4                     _erro_anterior:	
   820  00B4                     	ds	2
   821  00B6                     _erro_atual:	
   822  00B6                     	ds	2
   823  00B8                     _pulsos:	
   824  00B8                     	ds	2
   825  00BA                     _pwm:	
   826  00BA                     	ds	2
   827  00BC                     _receiveIndex:	
   828  00BC                     	ds	2
   829  00BE                     _rpm:	
   830  00BE                     	ds	2
   831  00C0                     _setpoint:	
   832  00C0                     	ds	2
   833  00C2                     _status:	
   834  00C2                     	ds	2
   835  00C4                     _tempo_rb6:	
   836  00C4                     	ds	2
   837  00C6                     _fuzzy:	
   838  00C6                     	ds	3
   839                           
   840                           	psect	dataBANK1
   841  00EB                     __pdataBANK1:	
   842  00EB                     _ligado:	
   843  00EB                     	ds	2
   844                           
   845                           	psect	bssBANK3
   846  0190                     __pbssBANK3:	
   847  0190                     _buffer:	
   848  0190                     	ds	7
   849  0197                     _receivedBuffer:	
   850  0197                     	ds	7
   851  019E                     _display:	
   852  019E                     	ds	10
   853                           
   854                           	psect	clrtext
   855  0870                     clear_ram0:	
   856                           ;	Called with FSR containing the base address, and
   857                           ;	W with the last address+1
   858                           
   859  0870  0064               	clrwdt	;clear the watchdog before getting into this loop
   860  0871                     clrloop0:	
   861  0871  0180               	clrf	0	;clear RAM location pointed to by FSR
   862  0872  0A84               	incf	4,f	;increment pointer
   863  0873  0604               	xorwf	4,w	;XOR with final address
   864  0874  1903               	btfsc	3,2	;have we reached the end yet?
   865  0875  3400               	retlw	0	;all done for this memory range, return
   866  0876  0604               	xorwf	4,w	;XOR again to restore value
   867  0877  2871               	goto	clrloop0	;do the next byte
   868                           
   869                           	psect	cstackBANK1
   870  00C9                     __pcstackBANK1:	
   871  00C9                     ??_TIMER0_Set:	
   872  00C9                     ?_PWM_DutyCycle2:	
   873                           ; 0 bytes @ 0x0
   874                           
   875  00C9                     ??_TIMER0_Init:	
   876                           ; 0 bytes @ 0x0
   877                           
   878  00C9                     ??_ADC_Init:	
   879                           ; 0 bytes @ 0x0
   880                           
   881  00C9                     ??_PWM_Init:	
   882                           ; 0 bytes @ 0x0
   883                           
   884  00C9                     ?_LCD_Cursor:	
   885                           ; 0 bytes @ 0x0
   886                           
   887  00C9                     ?_PWM_DutyCycle1:	
   888                           ; 0 bytes @ 0x0
   889                           
   890  00C9                     ??_isdigit:	
   891                           ; 0 bytes @ 0x0
   892                           
   893  00C9                     ??_LCD_WriteCmd:	
   894                           ; 0 bytes @ 0x0
   895                           
   896  00C9                     ??_LCD_WriteData:	
   897                           ; 0 bytes @ 0x0
   898                           
   899  00C9                     ?___wmul:	
   900                           ; 0 bytes @ 0x0
   901                           
   902  00C9                     ?___lwdiv:	
   903                           ; 2 bytes @ 0x0
   904                           
   905  00C9                     ?___aldiv:	
   906                           ; 2 bytes @ 0x0
   907                           
   908  00C9                     TIMER0_Set@contagens:	
   909                           ; 4 bytes @ 0x0
   910                           
   911  00C9                     LCD_Cursor@Col:	
   912                           ; 1 bytes @ 0x0
   913                           
   914  00C9                     _isdigit$1414:	
   915                           ; 1 bytes @ 0x0
   916                           
   917  00C9                     PWM_DutyCycle1@valor:	
   918                           ; 1 bytes @ 0x0
   919                           
   920  00C9                     PWM_DutyCycle2@valor:	
   921                           ; 2 bytes @ 0x0
   922                           
   923  00C9                     ___wmul@multiplier:	
   924                           ; 2 bytes @ 0x0
   925                           
   926  00C9                     ___lwdiv@divisor:	
   927                           ; 2 bytes @ 0x0
   928                           
   929  00C9                     ___aldiv@divisor:	
   930                           ; 2 bytes @ 0x0
   931                           
   932                           
   933                           ; 4 bytes @ 0x0
   934  00C9                     	ds	1
   935  00CA                     ??_LCD_Cursor:	
   936  00CA                     LCD_WriteCmd@Byte:	
   937                           ; 0 bytes @ 0x1
   938                           
   939  00CA                     LCD_WriteData@Byte:	
   940                           ; 1 bytes @ 0x1
   941                           
   942  00CA                     isdigit@c:	
   943                           ; 1 bytes @ 0x1
   944                           
   945                           
   946                           ; 1 bytes @ 0x1
   947  00CA                     	ds	1
   948  00CB                     ??_PWM_DutyCycle2:	
   949  00CB                     ??_LCD_Init:	
   950                           ; 0 bytes @ 0x2
   951                           
   952  00CB                     ?_LCD_WriteString:	
   953                           ; 0 bytes @ 0x2
   954                           
   955  00CB                     ??_PWM_DutyCycle1:	
   956                           ; 0 bytes @ 0x2
   957                           
   958  00CB                     ??_LCD_Clear:	
   959                           ; 0 bytes @ 0x2
   960                           
   961  00CB                     LCD_Cursor@Row:	
   962                           ; 0 bytes @ 0x2
   963                           
   964  00CB                     LCD_WriteString@Str:	
   965                           ; 1 bytes @ 0x2
   966                           
   967  00CB                     ___wmul@multiplicand:	
   968                           ; 2 bytes @ 0x2
   969                           
   970  00CB                     ___lwdiv@dividend:	
   971                           ; 2 bytes @ 0x2
   972                           
   973                           
   974                           ; 2 bytes @ 0x2
   975  00CB                     	ds	2
   976  00CD                     ??_LCD_WriteString:	
   977  00CD                     ??___wmul:	
   978                           ; 0 bytes @ 0x4
   979                           
   980  00CD                     ??___lwdiv:	
   981                           ; 0 bytes @ 0x4
   982                           
   983  00CD                     ___wmul@product:	
   984                           ; 0 bytes @ 0x4
   985                           
   986  00CD                     ___aldiv@dividend:	
   987                           ; 2 bytes @ 0x4
   988                           
   989                           
   990                           ; 4 bytes @ 0x4
   991  00CD                     	ds	1
   992  00CE                     ___lwdiv@quotient:	
   993                           
   994                           ; 2 bytes @ 0x5
   995  00CE                     	ds	2
   996  00D0                     ___lwdiv@counter:	
   997                           
   998                           ; 1 bytes @ 0x7
   999  00D0                     	ds	1
  1000  00D1                     ??___aldiv:	
  1001  00D1                     ?___lwmod:	
  1002                           ; 0 bytes @ 0x8
  1003                           
  1004  00D1                     ___lwmod@divisor:	
  1005                           ; 2 bytes @ 0x8
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0x8
  1009  00D1                     	ds	1
  1010  00D2                     ___aldiv@counter:	
  1011                           
  1012                           ; 1 bytes @ 0x9
  1013  00D2                     	ds	1
  1014  00D3                     ___aldiv@sign:	
  1015  00D3                     ___lwmod@dividend:	
  1016                           ; 1 bytes @ 0xA
  1017                           
  1018                           
  1019                           ; 2 bytes @ 0xA
  1020  00D3                     	ds	1
  1021  00D4                     ___aldiv@quotient:	
  1022                           
  1023                           ; 4 bytes @ 0xB
  1024  00D4                     	ds	1
  1025  00D5                     ??___lwmod:	
  1026                           
  1027                           ; 0 bytes @ 0xC
  1028  00D5                     	ds	1
  1029  00D6                     ___lwmod@counter:	
  1030                           
  1031                           ; 1 bytes @ 0xD
  1032  00D6                     	ds	1
  1033  00D7                     ?_sprintf:	
  1034  00D7                     sprintf@f:	
  1035                           ; 2 bytes @ 0xE
  1036                           
  1037                           
  1038                           ; 1 bytes @ 0xE
  1039  00D7                     	ds	1
  1040  00D8                     ?_USART_Init:	
  1041  00D8                     USART_Init@BaudRate:	
  1042                           ; 0 bytes @ 0xF
  1043                           
  1044                           
  1045                           ; 4 bytes @ 0xF
  1046  00D8                     	ds	2
  1047  00DA                     ??_sprintf:	
  1048                           
  1049                           ; 0 bytes @ 0x11
  1050  00DA                     	ds	2
  1051  00DC                     ??_USART_Init:	
  1052                           
  1053                           ; 0 bytes @ 0x13
  1054  00DC                     	ds	1
  1055  00DD                     sprintf@ap:	
  1056                           
  1057                           ; 1 bytes @ 0x14
  1058  00DD                     	ds	1
  1059  00DE                     sprintf@prec:	
  1060                           
  1061                           ; 1 bytes @ 0x15
  1062  00DE                     	ds	1
  1063  00DF                     sprintf@_val:	
  1064                           
  1065                           ; 4 bytes @ 0x16
  1066  00DF                     	ds	4
  1067  00E3                     sprintf@flag:	
  1068                           
  1069                           ; 1 bytes @ 0x1A
  1070  00E3                     	ds	1
  1071  00E4                     sprintf@width:	
  1072                           
  1073                           ; 2 bytes @ 0x1B
  1074  00E4                     	ds	2
  1075  00E6                     sprintf@sp:	
  1076                           
  1077                           ; 1 bytes @ 0x1D
  1078  00E6                     	ds	1
  1079  00E7                     sprintf@c:	
  1080                           
  1081                           ; 1 bytes @ 0x1E
  1082  00E7                     	ds	1
  1083  00E8                     ??_main:	
  1084                           
  1085                           ; 0 bytes @ 0x1F
  1086  00E8                     	ds	3
  1087                           
  1088                           	psect	cstackCOMMON
  1089  0070                     __pcstackCOMMON:	
  1090  0070                     ?_USART_WriteChar:	
  1091  0070                     ??_USART_WriteChar:	
  1092                           ; 0 bytes @ 0x0
  1093                           
  1094  0070                     ?_TIMER0_Set:	
  1095                           ; 0 bytes @ 0x0
  1096                           
  1097  0070                     ?_TIMER0_Init:	
  1098                           ; 0 bytes @ 0x0
  1099                           
  1100  0070                     ?_ADC_Init:	
  1101                           ; 0 bytes @ 0x0
  1102                           
  1103  0070                     ?_PWM_Init:	
  1104                           ; 0 bytes @ 0x0
  1105                           
  1106  0070                     ?_LCD_Init:	
  1107                           ; 0 bytes @ 0x0
  1108                           
  1109  0070                     ?_LCD_Clear:	
  1110                           ; 0 bytes @ 0x0
  1111                           
  1112  0070                     ?_isdigit:	
  1113                           ; 0 bytes @ 0x0
  1114                           
  1115  0070                     ?_send:	
  1116                           ; 1 bit 
  1117                           
  1118  0070                     ?_ISR:	
  1119                           ; 0 bytes @ 0x0
  1120                           
  1121  0070                     ?_main:	
  1122                           ; 0 bytes @ 0x0
  1123                           
  1124  0070                     ?_USART_WriteString:	
  1125                           ; 0 bytes @ 0x0
  1126                           
  1127  0070                     ?_LCD_WriteCmd:	
  1128                           ; 0 bytes @ 0x0
  1129                           
  1130  0070                     ?_LCD_WriteData:	
  1131                           ; 0 bytes @ 0x0
  1132                           
  1133  0070                     ?___ftge:	
  1134                           ; 0 bytes @ 0x0
  1135                           
  1136  0070                     ?i1_TIMER0_Set:	
  1137                           ; 1 bit 
  1138                           
  1139  0070                     ??i1_TIMER0_Set:	
  1140                           ; 0 bytes @ 0x0
  1141                           
  1142  0070                     ?i1_PWM_DutyCycle2:	
  1143                           ; 0 bytes @ 0x0
  1144                           
  1145  0070                     ?_USART_ReceiveChar:	
  1146                           ; 0 bytes @ 0x0
  1147                           
  1148  0070                     ?i1___wmul:	
  1149                           ; 1 bytes @ 0x0
  1150                           
  1151  0070                     ?___ftpack:	
  1152                           ; 2 bytes @ 0x0
  1153                           
  1154  0070                     USART_WriteChar@byte:	
  1155                           ; 3 bytes @ 0x0
  1156                           
  1157  0070                     i1TIMER0_Set@contagens:	
  1158                           ; 1 bytes @ 0x0
  1159                           
  1160  0070                     i1PWM_DutyCycle2@valor:	
  1161                           ; 1 bytes @ 0x0
  1162                           
  1163  0070                     i1___wmul@multiplier:	
  1164                           ; 2 bytes @ 0x0
  1165                           
  1166  0070                     ___ftpack@arg:	
  1167                           ; 2 bytes @ 0x0
  1168                           
  1169  0070                     ___ftge@ff1:	
  1170                           ; 3 bytes @ 0x0
  1171                           
  1172                           
  1173                           ; 3 bytes @ 0x0
  1174  0070                     	ds	1
  1175  0071                     ??_send:	
  1176  0071                     ??_USART_WriteString:	
  1177                           ; 0 bytes @ 0x1
  1178                           
  1179                           
  1180                           ; 0 bytes @ 0x1
  1181  0071                     	ds	1
  1182  0072                     ??i1_PWM_DutyCycle2:	
  1183  0072                     send@checksum:	
  1184                           ; 0 bytes @ 0x2
  1185                           
  1186  0072                     USART_WriteString@str:	
  1187                           ; 1 bytes @ 0x2
  1188                           
  1189  0072                     i1___wmul@multiplicand:	
  1190                           ; 1 bytes @ 0x2
  1191                           
  1192                           
  1193                           ; 2 bytes @ 0x2
  1194  0072                     	ds	1
  1195  0073                     ??_USART_ReceiveChar:	
  1196  0073                     send@index:	
  1197                           ; 0 bytes @ 0x3
  1198                           
  1199  0073                     ___ftpack@exp:	
  1200                           ; 1 bytes @ 0x3
  1201                           
  1202  0073                     ___ftge@ff2:	
  1203                           ; 1 bytes @ 0x3
  1204                           
  1205                           
  1206                           ; 3 bytes @ 0x3
  1207  0073                     	ds	1
  1208  0074                     ??i1___wmul:	
  1209  0074                     USART_ReceiveChar@byte:	
  1210                           ; 0 bytes @ 0x4
  1211                           
  1212  0074                     ___ftpack@sign:	
  1213                           ; 1 bytes @ 0x4
  1214                           
  1215  0074                     i1___wmul@product:	
  1216                           ; 1 bytes @ 0x4
  1217                           
  1218                           
  1219                           ; 2 bytes @ 0x4
  1220  0074                     	ds	1
  1221  0075                     ??___ftpack:	
  1222                           
  1223                           ; 0 bytes @ 0x5
  1224  0075                     	ds	1
  1225  0076                     ??___ftge:	
  1226                           
  1227                           ; 0 bytes @ 0x6
  1228  0076                     	ds	2
  1229  0078                     ?___awtoft:	
  1230  0078                     ?___lwtoft:	
  1231                           ; 3 bytes @ 0x8
  1232                           
  1233  0078                     ___awtoft@c:	
  1234                           ; 3 bytes @ 0x8
  1235                           
  1236  0078                     ___lwtoft@c:	
  1237                           ; 2 bytes @ 0x8
  1238                           
  1239                           
  1240                           ; 2 bytes @ 0x8
  1241  0078                     	ds	3
  1242  007B                     ??___awtoft:	
  1243  007B                     ??___lwtoft:	
  1244                           ; 0 bytes @ 0xB
  1245                           
  1246                           
  1247                           ; 0 bytes @ 0xB
  1248  007B                     	ds	2
  1249  007D                     ___awtoft@sign:	
  1250                           
  1251                           ; 1 bytes @ 0xD
  1252  007D                     	ds	1
  1253  007E                     ??_trimf:	
  1254  007E                     ??___ftneg:	
  1255                           ; 0 bytes @ 0xE
  1256                           
  1257                           
  1258                           	psect	cstackBANK0
  1259  0020                     __pcstackBANK0:	
  1260                           ; 0 bytes @ 0xE
  1261                           
  1262  0020                     ?___ftneg:	
  1263  0020                     ___ftneg@f1:	
  1264                           ; 3 bytes @ 0x0
  1265                           
  1266                           
  1267                           ; 3 bytes @ 0x0
  1268  0020                     	ds	3
  1269  0023                     ?___ftadd:	
  1270  0023                     ___ftadd@f1:	
  1271                           ; 3 bytes @ 0x3
  1272                           
  1273                           
  1274                           ; 3 bytes @ 0x3
  1275  0023                     	ds	3
  1276  0026                     ___ftadd@f2:	
  1277                           
  1278                           ; 3 bytes @ 0x6
  1279  0026                     	ds	3
  1280  0029                     ??___ftadd:	
  1281                           
  1282                           ; 0 bytes @ 0x9
  1283  0029                     	ds	4
  1284  002D                     ___ftadd@sign:	
  1285                           
  1286                           ; 1 bytes @ 0xD
  1287  002D                     	ds	1
  1288  002E                     ___ftadd@exp2:	
  1289                           
  1290                           ; 1 bytes @ 0xE
  1291  002E                     	ds	1
  1292  002F                     ___ftadd@exp1:	
  1293                           
  1294                           ; 1 bytes @ 0xF
  1295  002F                     	ds	1
  1296  0030                     ?___ftdiv:	
  1297  0030                     ___ftdiv@f2:	
  1298                           ; 3 bytes @ 0x10
  1299                           
  1300                           
  1301                           ; 3 bytes @ 0x10
  1302  0030                     	ds	3
  1303  0033                     ___ftdiv@f1:	
  1304                           
  1305                           ; 3 bytes @ 0x13
  1306  0033                     	ds	3
  1307  0036                     ??___ftdiv:	
  1308                           
  1309                           ; 0 bytes @ 0x16
  1310  0036                     	ds	4
  1311  003A                     ___ftdiv@cntr:	
  1312                           
  1313                           ; 1 bytes @ 0x1A
  1314  003A                     	ds	1
  1315  003B                     ___ftdiv@f3:	
  1316                           
  1317                           ; 3 bytes @ 0x1B
  1318  003B                     	ds	3
  1319  003E                     ___ftdiv@exp:	
  1320                           
  1321                           ; 1 bytes @ 0x1E
  1322  003E                     	ds	1
  1323  003F                     ___ftdiv@sign:	
  1324                           
  1325                           ; 1 bytes @ 0x1F
  1326  003F                     	ds	1
  1327  0040                     ?_trimf:	
  1328  0040                     ?___ftmul:	
  1329                           ; 3 bytes @ 0x20
  1330                           
  1331  0040                     trimf@x:	
  1332                           ; 3 bytes @ 0x20
  1333                           
  1334  0040                     ___ftmul@f1:	
  1335                           ; 3 bytes @ 0x20
  1336                           
  1337                           
  1338                           ; 3 bytes @ 0x20
  1339  0040                     	ds	3
  1340  0043                     trimf@a:	
  1341  0043                     ___ftmul@f2:	
  1342                           ; 3 bytes @ 0x23
  1343                           
  1344                           
  1345                           ; 3 bytes @ 0x23
  1346  0043                     	ds	3
  1347  0046                     ??___ftmul:	
  1348  0046                     trimf@b:	
  1349                           ; 0 bytes @ 0x26
  1350                           
  1351                           
  1352                           ; 3 bytes @ 0x26
  1353  0046                     	ds	3
  1354  0049                     trimf@c:	
  1355                           
  1356                           ; 3 bytes @ 0x29
  1357  0049                     	ds	1
  1358  004A                     ___ftmul@exp:	
  1359                           
  1360                           ; 1 bytes @ 0x2A
  1361  004A                     	ds	1
  1362  004B                     ___ftmul@f3_as_product:	
  1363                           
  1364                           ; 3 bytes @ 0x2B
  1365  004B                     	ds	1
  1366  004C                     trimf@ua:	
  1367                           
  1368                           ; 3 bytes @ 0x2C
  1369  004C                     	ds	2
  1370  004E                     ___ftmul@cntr:	
  1371                           
  1372                           ; 1 bytes @ 0x2E
  1373  004E                     	ds	1
  1374  004F                     ___ftmul@sign:	
  1375                           
  1376                           ; 1 bytes @ 0x2F
  1377  004F                     	ds	1
  1378  0050                     ?___fttol:	
  1379  0050                     ___fttol@f1:	
  1380                           ; 4 bytes @ 0x30
  1381                           
  1382                           
  1383                           ; 3 bytes @ 0x30
  1384  0050                     	ds	4
  1385  0054                     ??___fttol:	
  1386                           
  1387                           ; 0 bytes @ 0x34
  1388  0054                     	ds	4
  1389  0058                     ___fttol@sign1:	
  1390                           
  1391                           ; 1 bytes @ 0x38
  1392  0058                     	ds	1
  1393  0059                     ___fttol@lval:	
  1394                           
  1395                           ; 4 bytes @ 0x39
  1396  0059                     	ds	4
  1397  005D                     ___fttol@exp1:	
  1398                           
  1399                           ; 1 bytes @ 0x3D
  1400  005D                     	ds	1
  1401  005E                     ??_ISR:	
  1402                           
  1403                           ; 0 bytes @ 0x3E
  1404  005E                     	ds	6
  1405  0064                     _ISR$236:	
  1406                           
  1407                           ; 2 bytes @ 0x44
  1408  0064                     	ds	2
  1409  0066                     _ISR$237:	
  1410                           
  1411                           ; 2 bytes @ 0x46
  1412  0066                     	ds	2
  1413  0068                     _ISR$238:	
  1414                           
  1415                           ; 2 bytes @ 0x48
  1416  0068                     	ds	2
  1417  006A                     ISR@checksum:	
  1418                           
  1419                           ; 1 bytes @ 0x4A
  1420  006A                     	ds	1
  1421  006B                     _ISR$1677:	
  1422                           
  1423                           ; 3 bytes @ 0x4B
  1424  006B                     	ds	3
  1425  006E                     ISR@byte:	
  1426                           
  1427                           ; 1 bytes @ 0x4E
  1428  006E                     	ds	1
  1429  006F                     ISR@index:	
  1430                           
  1431                           ; 1 bytes @ 0x4F
  1432  006F                     	ds	1
  1433                           
  1434                           	psect	maintext
  1435  0F20                     __pmaintext:	
  1436 ;;
  1437 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1438 ;;
  1439 ;; *************** function _main *****************
  1440 ;; Defined at:
  1441 ;;		line 226 in file "C:\Users\332414\Desktop\FyzzySI\firmware\main.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;		None               void
  1448 ;; Registers used:
  1449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 17F/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1455 ;;      Params:         0       0       0       0       0
  1456 ;;      Locals:         0       0       0       0       0
  1457 ;;      Temps:          0       0       3       0       0
  1458 ;;      Totals:         0       0       3       0       0
  1459 ;;Total ram usage:        3 bytes
  1460 ;; Hardware stack levels required when called:    6
  1461 ;; This function calls:
  1462 ;;		_ADC_Init
  1463 ;;		_LCD_Clear
  1464 ;;		_LCD_Cursor
  1465 ;;		_LCD_Init
  1466 ;;		_LCD_WriteString
  1467 ;;		_PWM_DutyCycle1
  1468 ;;		_PWM_DutyCycle2
  1469 ;;		_PWM_Init
  1470 ;;		_TIMER0_Init
  1471 ;;		_TIMER0_Set
  1472 ;;		_USART_Init
  1473 ;;		_sprintf
  1474 ;; This function is called by:
  1475 ;;		Startup code after reset
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           
  1480                           ;psect for function _main
  1481  0F20                     _main:	
  1482                           
  1483                           ;main.c: 228: TRISA = 0b00000001;
  1484                           
  1485                           ;incstack = 0
  1486                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1487  0F20  3001               	movlw	1
  1488  0F21  1683               	bsf	3,5	;RP0=1, select bank1
  1489  0F22  1303               	bcf	3,6	;RP1=0, select bank1
  1490  0F23  0085               	movwf	5	;volatile
  1491                           
  1492                           ;main.c: 229: PORTA = 0b00000001;
  1493  0F24  3001               	movlw	1
  1494  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0F27  0085               	movwf	5	;volatile
  1497                           
  1498                           ;main.c: 230: TRISB = 0b00000000;
  1499  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  1500  0F29  1303               	bcf	3,6	;RP1=0, select bank1
  1501  0F2A  0186               	clrf	6	;volatile
  1502                           
  1503                           ;main.c: 231: PORTB = 0b00000000;
  1504  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0F2D  0186               	clrf	6	;volatile
  1507                           
  1508                           ;main.c: 232: TRISC = 0b10000001;
  1509  0F2E  3081               	movlw	129
  1510  0F2F  1683               	bsf	3,5	;RP0=1, select bank1
  1511  0F30  1303               	bcf	3,6	;RP1=0, select bank1
  1512  0F31  0087               	movwf	7	;volatile
  1513                           
  1514                           ;main.c: 233: PORTC = 0b11000000;
  1515  0F32  30C0               	movlw	192
  1516  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  1517  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  1518  0F35  0087               	movwf	7	;volatile
  1519                           
  1520                           ;main.c: 234: TRISD = 0b00000000;
  1521  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  1522  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  1523  0F38  0188               	clrf	8	;volatile
  1524                           
  1525                           ;main.c: 235: PORTD = 0b00000000;
  1526  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  1527  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  1528  0F3B  0188               	clrf	8	;volatile
  1529                           
  1530                           ;main.c: 236: TRISE = 0b00000000;
  1531  0F3C  1683               	bsf	3,5	;RP0=1, select bank1
  1532  0F3D  1303               	bcf	3,6	;RP1=0, select bank1
  1533  0F3E  0189               	clrf	9	;volatile
  1534                           
  1535                           ;main.c: 237: PORTE = 0b00000000;
  1536  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  1537  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  1538  0F41  0189               	clrf	9	;volatile
  1539                           
  1540                           ;main.c: 240: T1CON = 0x03;
  1541  0F42  3003               	movlw	3
  1542  0F43  0090               	movwf	16	;volatile
  1543                           
  1544                           ;main.c: 241: TMR1L = 0x00;
  1545  0F44  018E               	clrf	14	;volatile
  1546                           
  1547                           ;main.c: 242: TMR1H = 0x00;
  1548  0F45  018F               	clrf	15	;volatile
  1549                           
  1550                           ;main.c: 245: USART_Init(115200);
  1551  0F46  3000               	movlw	0
  1552  0F47  1683               	bsf	3,5	;RP0=1, select bank1
  1553  0F48  1303               	bcf	3,6	;RP1=0, select bank1
  1554  0F49  00DB               	movwf	(USART_Init@BaudRate+3)^(0+128)
  1555  0F4A  3001               	movlw	1
  1556  0F4B  00DA               	movwf	(USART_Init@BaudRate+2)^(0+128)
  1557  0F4C  30C2               	movlw	194
  1558  0F4D  00D9               	movwf	(USART_Init@BaudRate+1)^(0+128)
  1559  0F4E  3000               	movlw	0
  1560  0F4F  00D8               	movwf	USART_Init@BaudRate^(0+128)
  1561  0F50  120A  158A  22FF  120A  158A  	fcall	_USART_Init
  1562                           
  1563                           ;main.c: 246: TIMER0_Init();
  1564  0F55  120A  158A  2082  120A  158A  	fcall	_TIMER0_Init
  1565                           
  1566                           ;main.c: 247: ADC_Init();
  1567  0F5A  120A  158A  209D  120A  158A  	fcall	_ADC_Init
  1568                           
  1569                           ;main.c: 248: PWM_Init();
  1570  0F5F  120A  158A  21E6  120A  158A  	fcall	_PWM_Init
  1571                           
  1572                           ;main.c: 249: LCD_Init();
  1573  0F64  120A  158A  240D  120A  158A  	fcall	_LCD_Init
  1574                           
  1575                           ;main.c: 252: INTCONbits.PEIE = 1;
  1576  0F69  170B               	bsf	11,6	;volatile
  1577                           
  1578                           ;main.c: 253: INTCONbits.GIE = 1;
  1579  0F6A  178B               	bsf	11,7	;volatile
  1580                           
  1581                           ;main.c: 260: LCD_Init();
  1582  0F6B  120A  158A  240D  120A  158A  	fcall	_LCD_Init
  1583                           
  1584                           ;main.c: 261: LCD_Cursor(0,0);
  1585  0F70  1683               	bsf	3,5	;RP0=1, select bank1
  1586  0F71  1303               	bcf	3,6	;RP1=0, select bank1
  1587  0F72  01C9               	clrf	LCD_Cursor@Col^(0+128)
  1588  0F73  3000               	movlw	0
  1589  0F74  120A  158A  2140  120A  158A  	fcall	_LCD_Cursor
  1590                           
  1591                           ;main.c: 262: LCD_WriteString("Inicializando...");
  1592  0F79  3033               	movlw	low (STR_1-__stringbase)
  1593  0F7A  1683               	bsf	3,5	;RP0=1, select bank1
  1594  0F7B  1303               	bcf	3,6	;RP1=0, select bank1
  1595  0F7C  00CB               	movwf	LCD_WriteString@Str^(0+128)
  1596  0F7D  3080               	movlw	128
  1597  0F7E  00CC               	movwf	(LCD_WriteString@Str+1)^(0+128)
  1598  0F7F  120A  158A  2258  120A  158A  	fcall	_LCD_WriteString
  1599                           
  1600                           ;main.c: 265: PWM_DutyCycle1(0);
  1601  0F84  3000               	movlw	0
  1602  0F85  1683               	bsf	3,5	;RP0=1, select bank1
  1603  0F86  1303               	bcf	3,6	;RP1=0, select bank1
  1604  0F87  00C9               	movwf	PWM_DutyCycle1@valor^(0+128)
  1605  0F88  3000               	movlw	0
  1606  0F89  00CA               	movwf	(PWM_DutyCycle1@valor^(0+128)+1)
  1607  0F8A  120A  158A  2181  120A  158A  	fcall	_PWM_DutyCycle1
  1608                           
  1609                           ;main.c: 266: PWM_DutyCycle2(0);
  1610  0F8F  3000               	movlw	0
  1611  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  1612  0F91  1303               	bcf	3,6	;RP1=0, select bank1
  1613  0F92  00C9               	movwf	PWM_DutyCycle2@valor^(0+128)
  1614  0F93  3000               	movlw	0
  1615  0F94  00CA               	movwf	(PWM_DutyCycle2@valor^(0+128)+1)
  1616  0F95  120A  158A  21A2  120A  158A  	fcall	_PWM_DutyCycle2
  1617                           
  1618                           ;main.c: 269: TIMER0_Set(238);
  1619  0F9A  30EE               	movlw	238
  1620  0F9B  120A  158A  2068  120A  158A  	fcall	_TIMER0_Set
  1621                           
  1622                           ;main.c: 272: _delay((unsigned long)((1000)*(18432000/4000.0)));
  1623  0FA0  3018               	movlw	24
  1624  0FA1  1683               	bsf	3,5	;RP0=1, select bank1
  1625  0FA2  1303               	bcf	3,6	;RP1=0, select bank1
  1626  0FA3  00EA               	movwf	(??_main^(0+128)+2)
  1627  0FA4  3061               	movlw	97
  1628  0FA5  00E9               	movwf	(??_main^(0+128)+1)
  1629  0FA6  306E               	movlw	110
  1630  0FA7  00E8               	movwf	??_main^(0+128)
  1631  0FA8                     u3467:	
  1632  0FA8  0BE8               	decfsz	??_main^(0+128),f
  1633  0FA9  2FA8               	goto	u3467
  1634  0FAA  0BE9               	decfsz	(??_main^(0+128)+1),f
  1635  0FAB  2FA8               	goto	u3467
  1636  0FAC  0BEA               	decfsz	(??_main^(0+128)+2),f
  1637  0FAD  2FA8               	goto	u3467
  1638  0FAE  0000               	nop
  1639  0FAF                     l167:	
  1640                           ;main.c: 275: while(1)
  1641                           
  1642                           
  1643                           ;main.c: 276: {
  1644                           ;main.c: 278: sprintf(display,"%04d", rpm);
  1645  0FAF  304A               	movlw	(STR_2-__stringbase)& (0+255)
  1646  0FB0  1683               	bsf	3,5	;RP0=1, select bank1
  1647  0FB1  1303               	bcf	3,6	;RP1=0, select bank1
  1648  0FB2  00E8               	movwf	??_main^(0+128)
  1649  0FB3  0868               	movf	??_main^(0+128),w
  1650  0FB4  00D7               	movwf	sprintf@f^(0+128)
  1651  0FB5  083F               	movf	(_rpm+1)^(0+128),w
  1652  0FB6  01D9               	clrf	((?_sprintf+1)^(0+128)+1)
  1653  0FB7  07D9               	addwf	((?_sprintf+1)^(0+128)+1),f
  1654  0FB8  083E               	movf	_rpm^(0+128),w
  1655  0FB9  01D8               	clrf	(?_sprintf^(0+128)+1)
  1656  0FBA  07D8               	addwf	(?_sprintf^(0+128)+1),f
  1657  0FBB  309E               	movlw	_display& (0+255)
  1658  0FBC  120A  118A  23CE  120A  158A  	fcall	_sprintf
  1659                           
  1660                           ;main.c: 285: LCD_Clear();
  1661  0FC1  120A  158A  222F  120A  158A  	fcall	_LCD_Clear
  1662                           
  1663                           ;main.c: 286: LCD_Cursor(0,0);
  1664  0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  1665  0FC7  1303               	bcf	3,6	;RP1=0, select bank1
  1666  0FC8  01C9               	clrf	LCD_Cursor@Col^(0+128)
  1667  0FC9  3000               	movlw	0
  1668  0FCA  120A  158A  2140  120A  158A  	fcall	_LCD_Cursor
  1669                           
  1670                           ;main.c: 287: LCD_WriteString("RPM: ");
  1671  0FCF  3044               	movlw	low (STR_3-__stringbase)
  1672  0FD0  1683               	bsf	3,5	;RP0=1, select bank1
  1673  0FD1  1303               	bcf	3,6	;RP1=0, select bank1
  1674  0FD2  00CB               	movwf	LCD_WriteString@Str^(0+128)
  1675  0FD3  3080               	movlw	128
  1676  0FD4  00CC               	movwf	(LCD_WriteString@Str+1)^(0+128)
  1677  0FD5  120A  158A  2258  120A  158A  	fcall	_LCD_WriteString
  1678                           
  1679                           ;main.c: 288: LCD_Cursor(0,6);
  1680  0FDA  3006               	movlw	6
  1681  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  1682  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  1683  0FDD  00E8               	movwf	??_main^(0+128)
  1684  0FDE  0868               	movf	??_main^(0+128),w
  1685  0FDF  00C9               	movwf	LCD_Cursor@Col^(0+128)
  1686  0FE0  3000               	movlw	0
  1687  0FE1  120A  158A  2140  120A  158A  	fcall	_LCD_Cursor
  1688                           
  1689                           ;main.c: 289: LCD_WriteString(display);
  1690  0FE6  309E               	movlw	_display& (0+255)
  1691  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  1692  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  1693  0FE9  00CB               	movwf	LCD_WriteString@Str^(0+128)
  1694  0FEA  3001               	movlw	1
  1695  0FEB  00CC               	movwf	(LCD_WriteString@Str+1)^(0+128)
  1696  0FEC  120A  158A  2258  120A  158A  	fcall	_LCD_WriteString
  1697                           
  1698                           ;main.c: 291: _delay((unsigned long)((200)*(18432000/4000.0)));
  1699  0FF1  3005               	movlw	5
  1700  0FF2  1683               	bsf	3,5	;RP0=1, select bank1
  1701  0FF3  1303               	bcf	3,6	;RP1=0, select bank1
  1702  0FF4  00EA               	movwf	(??_main^(0+128)+2)
  1703  0FF5  30AD               	movlw	173
  1704  0FF6  00E9               	movwf	(??_main^(0+128)+1)
  1705  0FF7  30E0               	movlw	224
  1706  0FF8  00E8               	movwf	??_main^(0+128)
  1707  0FF9                     u3477:	
  1708  0FF9  0BE8               	decfsz	??_main^(0+128),f
  1709  0FFA  2FF9               	goto	u3477
  1710  0FFB  0BE9               	decfsz	(??_main^(0+128)+1),f
  1711  0FFC  2FF9               	goto	u3477
  1712  0FFD  0BEA               	decfsz	(??_main^(0+128)+2),f
  1713  0FFE  2FF9               	goto	u3477
  1714  0FFF  2FAF               	goto	l167
  1715  1000                     __end_of_main:	
  1716                           
  1717                           	psect	text1
  1718  03CE                     __ptext1:	
  1719 ;; *************** function _sprintf *****************
  1720 ;; Defined at:
  1721 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  sp              1    wreg     PTR unsigned char 
  1724 ;;		 -> display(10), 
  1725 ;;  f               1   14[BANK1 ] PTR const unsigned char 
  1726 ;;		 -> STR_2(5), 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  sp              1   29[BANK1 ] PTR unsigned char 
  1729 ;;		 -> display(10), 
  1730 ;;  _val            4   22[BANK1 ] struct .
  1731 ;;  width           2   27[BANK1 ] int 
  1732 ;;  c               1   30[BANK1 ] char 
  1733 ;;  flag            1   26[BANK1 ] unsigned char 
  1734 ;;  prec            1   21[BANK1 ] char 
  1735 ;;  ap              1   20[BANK1 ] PTR void [1]
  1736 ;;		 -> ?_sprintf(2), 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  2   14[BANK1 ] int 
  1739 ;; Registers used:
  1740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1746 ;;      Params:         0       0       3       0       0
  1747 ;;      Locals:         0       0      11       0       0
  1748 ;;      Temps:          0       0       3       0       0
  1749 ;;      Totals:         0       0      17       0       0
  1750 ;;Total ram usage:       17 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    5
  1753 ;; This function calls:
  1754 ;;		___lwdiv
  1755 ;;		___lwmod
  1756 ;;		___wmul
  1757 ;;		_isdigit
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function _sprintf
  1765  03CE                     _sprintf:	
  1766                           
  1767                           ;incstack = 0
  1768                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1769                           ;sprintf@sp stored from wreg
  1770  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  1771  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  1772  03D0  00E6               	movwf	sprintf@sp^(0+128)
  1773                           
  1774                           ;doprnt.c: 494: va_list ap;
  1775                           ;doprnt.c: 499: signed char c;
  1776                           ;doprnt.c: 501: int width;
  1777                           ;doprnt.c: 506: signed char prec;
  1778                           ;doprnt.c: 508: unsigned char flag;
  1779                           ;doprnt.c: 527: union {
  1780                           ;doprnt.c: 528: unsigned int _val;
  1781                           ;doprnt.c: 529: struct {
  1782                           ;doprnt.c: 530: const char * _cp;
  1783                           ;doprnt.c: 531: unsigned _len;
  1784                           ;doprnt.c: 532: } _str;
  1785                           ;doprnt.c: 533: } _val;
  1786                           ;doprnt.c: 542: *ap = __va_start();
  1787  03D1  30D8               	movlw	(?_sprintf+1)& (0+255)
  1788  03D2  00DA               	movwf	??_sprintf^(0+128)
  1789  03D3  085A               	movf	??_sprintf^(0+128),w
  1790  03D4  00DD               	movwf	sprintf@ap^(0+128)
  1791  03D5                     l2663:	
  1792                           ;doprnt.c: 545: while(c = *f++) {
  1793                           
  1794  03D5  3001               	movlw	1
  1795  03D6  1683               	bsf	3,5	;RP0=1, select bank1
  1796  03D7  1303               	bcf	3,6	;RP1=0, select bank1
  1797  03D8  07D7               	addwf	sprintf@f^(0+128),f
  1798  03D9  30FF               	movlw	-1
  1799  03DA  0757               	addwf	sprintf@f^(0+128),w
  1800  03DB  0084               	movwf	4
  1801  03DC  120A  158A  200A  120A  118A  	fcall	stringdir
  1802  03E1  00DA               	movwf	??_sprintf^(0+128)
  1803  03E2  085A               	movf	??_sprintf^(0+128),w
  1804  03E3  00E7               	movwf	sprintf@c^(0+128)
  1805  03E4  08E7               	movf	sprintf@c^(0+128),f
  1806  03E5  1903               	btfsc	3,2
  1807  03E6  2D7E               	goto	l2665
  1808                           
  1809                           ;doprnt.c: 547: if(c != '%')
  1810  03E7  0867               	movf	sprintf@c^(0+128),w
  1811  03E8  3A25               	xorlw	37
  1812  03E9  1903               	skipnz
  1813  03EA  2BF7               	goto	l2567
  1814                           
  1815                           ;doprnt.c: 549: {
  1816                           ;doprnt.c: 550: ((*sp++ = (c)));
  1817  03EB  0867               	movf	sprintf@c^(0+128),w
  1818  03EC  00DA               	movwf	??_sprintf^(0+128)
  1819  03ED  0866               	movf	sprintf@sp^(0+128),w
  1820  03EE  0084               	movwf	4
  1821  03EF  085A               	movf	??_sprintf^(0+128),w
  1822  03F0  1783               	bsf	3,7	;select IRP bank2
  1823  03F1  0080               	movwf	0
  1824  03F2  3001               	movlw	1
  1825  03F3  00DA               	movwf	??_sprintf^(0+128)
  1826  03F4  085A               	movf	??_sprintf^(0+128),w
  1827  03F5  07E6               	addwf	sprintf@sp^(0+128),f
  1828                           
  1829                           ;doprnt.c: 551: continue;
  1830  03F6  2BD5               	goto	l2663
  1831  03F7                     l2567:	
  1832                           
  1833                           ;doprnt.c: 552: }
  1834                           ;doprnt.c: 555: width = 0;
  1835  03F7  01E4               	clrf	sprintf@width^(0+128)
  1836  03F8  01E5               	clrf	(sprintf@width+1)^(0+128)
  1837                           
  1838                           ;doprnt.c: 557: flag = 0;
  1839  03F9  01E3               	clrf	sprintf@flag^(0+128)
  1840                           
  1841                           ;doprnt.c: 560: switch(*f) {
  1842                           
  1843                           ;doprnt.c: 559: for(;;) {
  1844  03FA  2C00               	goto	l2573
  1845  03FB                     l444:	
  1846                           ;doprnt.c: 588: case '0':
  1847                           
  1848                           
  1849                           ;doprnt.c: 589: flag |= 0x04;
  1850  03FB  1563               	bsf	sprintf@flag^(0+128),2
  1851                           
  1852                           ;doprnt.c: 590: f++;
  1853  03FC  3001               	movlw	1
  1854  03FD  00DA               	movwf	??_sprintf^(0+128)
  1855  03FE  085A               	movf	??_sprintf^(0+128),w
  1856  03FF  07D7               	addwf	sprintf@f^(0+128),f
  1857  0400                     l2573:	
  1858                           ;doprnt.c: 593: }
  1859                           
  1860                           ;doprnt.c: 591: continue;
  1861                           
  1862  0400  0857               	movf	sprintf@f^(0+128),w
  1863  0401  0084               	movwf	4
  1864  0402  120A  158A  200A  120A  118A  	fcall	stringdir
  1865                           
  1866                           ; Switch size 1, requested type "space"
  1867                           ; Number of cases is 1, Range of values is 48 to 48
  1868                           ; switch strategies available:
  1869                           ; Name         Instructions Cycles
  1870                           ; simple_byte            4     3 (average)
  1871                           ; direct_byte           14    11 (fixed)
  1872                           ; jumptable            263     9 (fixed)
  1873                           ;	Chosen strategy is simple_byte
  1874  0407  3A30               	xorlw	48	; case 48
  1875  0408  1903               	skipnz
  1876  0409  2BFB               	goto	l444
  1877  040A  2C0B               	goto	l2575
  1878  040B                     l2575:	
  1879                           ;doprnt.c: 595: }
  1880                           
  1881                           ;doprnt.c: 594: break;
  1882                           
  1883                           
  1884                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1885  040B  0857               	movf	sprintf@f^(0+128),w
  1886  040C  0084               	movwf	4
  1887  040D  120A  158A  200A  120A  118A  	fcall	stringdir
  1888  0412  120A  158A  208D  120A  118A  	fcall	_isdigit
  1889  0417  1C03               	btfss	3,0
  1890  0418  2C5B               	goto	l2589
  1891                           
  1892                           ;doprnt.c: 607: width = 0;
  1893  0419  1683               	bsf	3,5	;RP0=1, select bank1
  1894  041A  1303               	bcf	3,6	;RP1=0, select bank1
  1895  041B  01E4               	clrf	sprintf@width^(0+128)
  1896  041C  01E5               	clrf	(sprintf@width+1)^(0+128)
  1897  041D                     l2579:	
  1898                           ;doprnt.c: 608: do {
  1899                           
  1900                           
  1901                           ;doprnt.c: 609: width *= 10;
  1902  041D  300A               	movlw	10
  1903  041E  1683               	bsf	3,5	;RP0=1, select bank1
  1904  041F  1303               	bcf	3,6	;RP1=0, select bank1
  1905  0420  00C9               	movwf	___wmul@multiplier^(0+128)
  1906  0421  3000               	movlw	0
  1907  0422  00CA               	movwf	(___wmul@multiplier^(0+128)+1)
  1908  0423  0865               	movf	(sprintf@width+1)^(0+128),w
  1909  0424  01CC               	clrf	(___wmul@multiplicand+1)^(0+128)
  1910  0425  07CC               	addwf	(___wmul@multiplicand+1)^(0+128),f
  1911  0426  0864               	movf	sprintf@width^(0+128),w
  1912  0427  01CB               	clrf	___wmul@multiplicand^(0+128)
  1913  0428  07CB               	addwf	___wmul@multiplicand^(0+128),f
  1914  0429  120A  158A  220A  120A  118A  	fcall	___wmul
  1915  042E  1683               	bsf	3,5	;RP0=1, select bank1
  1916  042F  1303               	bcf	3,6	;RP1=0, select bank1
  1917  0430  084A               	movf	(?___wmul+1)^(0+128),w
  1918  0431  01E5               	clrf	(sprintf@width+1)^(0+128)
  1919  0432  07E5               	addwf	(sprintf@width+1)^(0+128),f
  1920  0433  0849               	movf	?___wmul^(0+128),w
  1921  0434  01E4               	clrf	sprintf@width^(0+128)
  1922  0435  07E4               	addwf	sprintf@width^(0+128),f
  1923                           
  1924                           ;doprnt.c: 610: width += *f++ - '0';
  1925  0436  0857               	movf	sprintf@f^(0+128),w
  1926  0437  0084               	movwf	4
  1927  0438  120A  158A  200A  120A  118A  	fcall	stringdir
  1928  043D  3ED0               	addlw	208
  1929  043E  00DA               	movwf	??_sprintf^(0+128)
  1930  043F  30FF               	movlw	255
  1931  0440  1803               	skipnc
  1932  0441  3000               	movlw	0
  1933  0442  00DB               	movwf	(??_sprintf^(0+128)+1)
  1934  0443  085A               	movf	??_sprintf^(0+128),w
  1935  0444  07E4               	addwf	sprintf@width^(0+128),f
  1936  0445  1803               	skipnc
  1937  0446  0AE5               	incf	(sprintf@width+1)^(0+128),f
  1938  0447  085B               	movf	(??_sprintf+1)^(0+128),w
  1939  0448  07E5               	addwf	(sprintf@width+1)^(0+128),f
  1940  0449  3001               	movlw	1
  1941  044A  00DA               	movwf	??_sprintf^(0+128)
  1942  044B  085A               	movf	??_sprintf^(0+128),w
  1943  044C  07D7               	addwf	sprintf@f^(0+128),f
  1944                           
  1945                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1946  044D  0857               	movf	sprintf@f^(0+128),w
  1947  044E  0084               	movwf	4
  1948  044F  120A  158A  200A  120A  118A  	fcall	stringdir
  1949  0454  120A  158A  208D  120A  118A  	fcall	_isdigit
  1950  0459  1803               	btfsc	3,0
  1951  045A  2C1D               	goto	l2579
  1952  045B                     l2589:	
  1953                           ;doprnt.c: 831: }
  1954                           
  1955                           ;doprnt.c: 822: continue;
  1956                           
  1957                           ;doprnt.c: 811: default:
  1958                           
  1959                           ;doprnt.c: 707: case 'i':
  1960                           ;doprnt.c: 708: break;
  1961                           
  1962                           ;doprnt.c: 706: case 'd':
  1963                           
  1964                           ;doprnt.c: 647: goto alldone;
  1965                           
  1966                           ;doprnt.c: 646: case 0:
  1967                           
  1968                           ;doprnt.c: 617: }
  1969                           ;doprnt.c: 644: switch(c = *f++) {
  1970                           
  1971  045B  3001               	movlw	1
  1972  045C  1683               	bsf	3,5	;RP0=1, select bank1
  1973  045D  1303               	bcf	3,6	;RP1=0, select bank1
  1974  045E  07D7               	addwf	sprintf@f^(0+128),f
  1975  045F  30FF               	movlw	-1
  1976  0460  0757               	addwf	sprintf@f^(0+128),w
  1977  0461  0084               	movwf	4
  1978  0462  120A  158A  200A  120A  118A  	fcall	stringdir
  1979  0467  00E7               	movwf	sprintf@c^(0+128)
  1980                           
  1981                           ; Switch size 1, requested type "space"
  1982                           ; Number of cases is 3, Range of values is 0 to 105
  1983                           ; switch strategies available:
  1984                           ; Name         Instructions Cycles
  1985                           ; simple_byte           10     6 (average)
  1986                           ; jumptable            260     6 (fixed)
  1987                           ;	Chosen strategy is simple_byte
  1988  0468  3A00               	xorlw	0	; case 0
  1989  0469  1903               	skipnz
  1990  046A  2D7E               	goto	l2665
  1991  046B  3A64               	xorlw	100	; case 100
  1992  046C  1903               	skipnz
  1993  046D  2C72               	goto	l2591
  1994  046E  3A0D               	xorlw	13	; case 105
  1995  046F  1903               	skipnz
  1996  0470  2C72               	goto	l2591
  1997  0471  2BD5               	goto	l2663
  1998  0472                     l2591:	
  1999                           
  2000                           ;doprnt.c: 1262: {
  2001                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2002  0472  1683               	bsf	3,5	;RP0=1, select bank1
  2003  0473  1303               	bcf	3,6	;RP1=0, select bank1
  2004  0474  085D               	movf	sprintf@ap^(0+128),w
  2005  0475  0084               	movwf	4
  2006  0476  1383               	bcf	3,7	;select IRP bank0
  2007  0477  0800               	movf	0,w
  2008  0478  00DF               	movwf	sprintf@_val^(0+128)
  2009  0479  0A84               	incf	4,f
  2010  047A  0800               	movf	0,w
  2011  047B  00E0               	movwf	(sprintf@_val+1)^(0+128)
  2012  047C  3002               	movlw	2
  2013  047D  00DA               	movwf	??_sprintf^(0+128)
  2014  047E  085A               	movf	??_sprintf^(0+128),w
  2015  047F  07DD               	addwf	sprintf@ap^(0+128),f
  2016                           
  2017                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2018  0480  1FE0               	btfss	(sprintf@_val+1)^(0+128),7
  2019  0481  2C8B               	goto	l2601
  2020                           
  2021                           ;doprnt.c: 1271: flag |= 0x03;
  2022  0482  3003               	movlw	3
  2023  0483  00DA               	movwf	??_sprintf^(0+128)
  2024  0484  085A               	movf	??_sprintf^(0+128),w
  2025  0485  04E3               	iorwf	sprintf@flag^(0+128),f
  2026                           
  2027                           ;doprnt.c: 1272: _val._val = -_val._val;
  2028  0486  09DF               	comf	sprintf@_val^(0+128),f
  2029  0487  09E0               	comf	(sprintf@_val+1)^(0+128),f
  2030  0488  0ADF               	incf	sprintf@_val^(0+128),f
  2031  0489  1903               	skipnz
  2032  048A  0AE0               	incf	(sprintf@_val+1)^(0+128),f
  2033  048B                     l2601:	
  2034                           
  2035                           ;doprnt.c: 1273: }
  2036                           ;doprnt.c: 1275: }
  2037                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2038  048B  01E7               	clrf	sprintf@c^(0+128)
  2039  048C  0AE7               	incf	sprintf@c^(0+128),f
  2040  048D  0867               	movf	sprintf@c^(0+128),w
  2041  048E  3A05               	xorlw	5
  2042  048F  1903               	btfsc	3,2
  2043  0490  2CB2               	goto	l2613
  2044  0491                     l2605:	
  2045                           
  2046                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2047  0491  0867               	movf	sprintf@c^(0+128),w
  2048  0492  00DA               	movwf	??_sprintf^(0+128)
  2049  0493  075A               	addwf	??_sprintf^(0+128),w
  2050  0494  3E01               	addlw	low (_dpowers-__stringbase)
  2051  0495  0084               	movwf	4
  2052  0496  120A  158A  200A  120A  118A  	fcall	stringdir
  2053  049B  00DB               	movwf	(??_sprintf+1)^(0+128)
  2054  049C  120A  158A  200A  120A  118A  	fcall	stringdir
  2055  04A1  00DC               	movwf	((??_sprintf+1)^(0+128)+1)
  2056  04A2  085C               	movf	(??_sprintf+2)^(0+128),w
  2057  04A3  0260               	subwf	(sprintf@_val+1)^(0+128),w
  2058  04A4  1D03               	skipz
  2059  04A5  2CA8               	goto	u2795
  2060  04A6  085B               	movf	(??_sprintf+1)^(0+128),w
  2061  04A7  025F               	subwf	sprintf@_val^(0+128),w
  2062  04A8                     u2795:	
  2063  04A8  1C03               	btfss	3,0
  2064  04A9  2CB2               	goto	l2613
  2065                           
  2066                           ;doprnt.c: 1316: break;
  2067  04AA  3001               	movlw	1
  2068  04AB  00DA               	movwf	??_sprintf^(0+128)
  2069  04AC  085A               	movf	??_sprintf^(0+128),w
  2070  04AD  07E7               	addwf	sprintf@c^(0+128),f
  2071  04AE  0867               	movf	sprintf@c^(0+128),w
  2072  04AF  3A05               	xorlw	5
  2073  04B0  1D03               	skipz
  2074  04B1  2C91               	goto	l2605
  2075  04B2                     l2613:	
  2076                           
  2077                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2078  04B2  0865               	movf	(sprintf@width+1)^(0+128),w
  2079  04B3  0464               	iorwf	sprintf@width^(0+128),w
  2080  04B4  1903               	skipnz
  2081  04B5  2CC0               	goto	l462
  2082  04B6  0863               	movf	sprintf@flag^(0+128),w
  2083  04B7  3903               	andlw	3
  2084  04B8  1903               	btfsc	3,2
  2085  04B9  2CC0               	goto	l462
  2086                           
  2087                           ;doprnt.c: 1355: width--;
  2088  04BA  30FF               	movlw	255
  2089  04BB  07E4               	addwf	sprintf@width^(0+128),f
  2090  04BC  1803               	skipnc
  2091  04BD  0AE5               	incf	(sprintf@width+1)^(0+128),f
  2092  04BE  30FF               	movlw	255
  2093  04BF  07E5               	addwf	(sprintf@width+1)^(0+128),f
  2094  04C0                     l462:	
  2095                           
  2096                           ;doprnt.c: 1390: if(width > c)
  2097  04C0  0867               	movf	sprintf@c^(0+128),w
  2098  04C1  00DA               	movwf	??_sprintf^(0+128)
  2099  04C2  01DB               	clrf	(??_sprintf^(0+128)+1)
  2100  04C3  1BDA               	btfsc	??_sprintf^(0+128),7
  2101  04C4  03DB               	decf	(??_sprintf^(0+128)+1),f
  2102  04C5  085B               	movf	(??_sprintf+1)^(0+128),w
  2103  04C6  3A80               	xorlw	128
  2104  04C7  00DC               	movwf	(??_sprintf+2)^(0+128)
  2105  04C8  0865               	movf	(sprintf@width+1)^(0+128),w
  2106  04C9  3A80               	xorlw	128
  2107  04CA  025C               	subwf	(??_sprintf+2)^(0+128),w
  2108  04CB  1D03               	skipz
  2109  04CC  2CCF               	goto	u2835
  2110  04CD  0864               	movf	sprintf@width^(0+128),w
  2111  04CE  025A               	subwf	??_sprintf^(0+128),w
  2112  04CF                     u2835:	
  2113  04CF  1803               	skipnc
  2114  04D0  2CDF               	goto	l2621
  2115                           
  2116                           ;doprnt.c: 1391: width -= c;
  2117  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  2118  04D2  1303               	bcf	3,6	;RP1=0, select bank1
  2119  04D3  0867               	movf	sprintf@c^(0+128),w
  2120  04D4  00DA               	movwf	??_sprintf^(0+128)
  2121  04D5  01DB               	clrf	(??_sprintf^(0+128)+1)
  2122  04D6  1BDA               	btfsc	??_sprintf^(0+128),7
  2123  04D7  03DB               	decf	(??_sprintf^(0+128)+1),f
  2124  04D8  085A               	movf	??_sprintf^(0+128),w
  2125  04D9  02E4               	subwf	sprintf@width^(0+128),f
  2126  04DA  085B               	movf	(??_sprintf+1)^(0+128),w
  2127  04DB  1C03               	skipc
  2128  04DC  03E5               	decf	(sprintf@width+1)^(0+128),f
  2129  04DD  02E5               	subwf	(sprintf@width+1)^(0+128),f
  2130  04DE  2CE3               	goto	l2623
  2131  04DF                     l2621:	
  2132                           
  2133                           ;doprnt.c: 1392: else
  2134                           ;doprnt.c: 1393: width = 0;
  2135  04DF  1683               	bsf	3,5	;RP0=1, select bank1
  2136  04E0  1303               	bcf	3,6	;RP1=0, select bank1
  2137  04E1  01E4               	clrf	sprintf@width^(0+128)
  2138  04E2  01E5               	clrf	(sprintf@width+1)^(0+128)
  2139  04E3                     l2623:	
  2140                           
  2141                           ;doprnt.c: 1396: if(flag & 0x04) {
  2142  04E3  1D63               	btfss	sprintf@flag^(0+128),2
  2143  04E4  2D0A               	goto	l2639
  2144                           
  2145                           ;doprnt.c: 1401: if(flag & 0x03)
  2146  04E5  0863               	movf	sprintf@flag^(0+128),w
  2147  04E6  3903               	andlw	3
  2148  04E7  1903               	btfsc	3,2
  2149  04E8  2CF4               	goto	l2631
  2150                           
  2151                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  2152  04E9  302D               	movlw	45
  2153  04EA  00DA               	movwf	??_sprintf^(0+128)
  2154  04EB  0866               	movf	sprintf@sp^(0+128),w
  2155  04EC  0084               	movwf	4
  2156  04ED  085A               	movf	??_sprintf^(0+128),w
  2157  04EE  1783               	bsf	3,7	;select IRP bank2
  2158  04EF  0080               	movwf	0
  2159  04F0  3001               	movlw	1
  2160  04F1  00DA               	movwf	??_sprintf^(0+128)
  2161  04F2  085A               	movf	??_sprintf^(0+128),w
  2162  04F3  07E6               	addwf	sprintf@sp^(0+128),f
  2163  04F4                     l2631:	
  2164                           
  2165                           ;doprnt.c: 1424: if(width)
  2166  04F4  0865               	movf	(sprintf@width+1)^(0+128),w
  2167  04F5  0464               	iorwf	sprintf@width^(0+128),w
  2168  04F6  1903               	skipnz
  2169  04F7  2D32               	goto	l2653
  2170                           
  2171                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  2172                           
  2173                           ;doprnt.c: 1425: do
  2174  04F8  3030               	movlw	48
  2175  04F9  00DA               	movwf	??_sprintf^(0+128)
  2176  04FA  0866               	movf	sprintf@sp^(0+128),w
  2177  04FB  0084               	movwf	4
  2178  04FC  085A               	movf	??_sprintf^(0+128),w
  2179  04FD  1783               	bsf	3,7	;select IRP bank2
  2180  04FE  0080               	movwf	0
  2181  04FF  3001               	movlw	1
  2182  0500  00DA               	movwf	??_sprintf^(0+128)
  2183  0501  085A               	movf	??_sprintf^(0+128),w
  2184  0502  07E6               	addwf	sprintf@sp^(0+128),f
  2185                           
  2186                           ;doprnt.c: 1427: while(--width);
  2187  0503  30FF               	movlw	255
  2188  0504  07E4               	addwf	sprintf@width^(0+128),f
  2189  0505  1803               	skipnc
  2190  0506  0AE5               	incf	(sprintf@width+1)^(0+128),f
  2191  0507  30FF               	movlw	255
  2192  0508  07E5               	addwf	(sprintf@width+1)^(0+128),f
  2193  0509  2CF4               	goto	l2631
  2194  050A                     l2639:	
  2195                           ;doprnt.c: 1429: } else
  2196                           
  2197                           
  2198                           ;doprnt.c: 1431: {
  2199                           ;doprnt.c: 1433: if(width
  2200                           ;doprnt.c: 1437: )
  2201  050A  0865               	movf	(sprintf@width+1)^(0+128),w
  2202  050B  0464               	iorwf	sprintf@width^(0+128),w
  2203  050C  1903               	skipnz
  2204  050D  2D23               	goto	l2647
  2205  050E                     l2641:	
  2206                           ;doprnt.c: 1438: do
  2207                           
  2208                           
  2209                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2210  050E  3020               	movlw	32
  2211  050F  00DA               	movwf	??_sprintf^(0+128)
  2212  0510  0866               	movf	sprintf@sp^(0+128),w
  2213  0511  0084               	movwf	4
  2214  0512  085A               	movf	??_sprintf^(0+128),w
  2215  0513  1783               	bsf	3,7	;select IRP bank2
  2216  0514  0080               	movwf	0
  2217  0515  3001               	movlw	1
  2218  0516  00DA               	movwf	??_sprintf^(0+128)
  2219  0517  085A               	movf	??_sprintf^(0+128),w
  2220  0518  07E6               	addwf	sprintf@sp^(0+128),f
  2221                           
  2222                           ;doprnt.c: 1440: while(--width);
  2223  0519  30FF               	movlw	255
  2224  051A  07E4               	addwf	sprintf@width^(0+128),f
  2225  051B  1803               	skipnc
  2226  051C  0AE5               	incf	(sprintf@width+1)^(0+128),f
  2227  051D  30FF               	movlw	255
  2228  051E  07E5               	addwf	(sprintf@width+1)^(0+128),f
  2229  051F  0865               	movf	(sprintf@width+1)^(0+128),w
  2230  0520  0464               	iorwf	sprintf@width^(0+128),w
  2231  0521  1D03               	skipz
  2232  0522  2D0E               	goto	l2641
  2233  0523                     l2647:	
  2234                           
  2235                           ;doprnt.c: 1447: if(flag & 0x03)
  2236  0523  0863               	movf	sprintf@flag^(0+128),w
  2237  0524  3903               	andlw	3
  2238  0525  1903               	btfsc	3,2
  2239  0526  2D32               	goto	l2653
  2240                           
  2241                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2242  0527  302D               	movlw	45
  2243  0528  00DA               	movwf	??_sprintf^(0+128)
  2244  0529  0866               	movf	sprintf@sp^(0+128),w
  2245  052A  0084               	movwf	4
  2246  052B  085A               	movf	??_sprintf^(0+128),w
  2247  052C  1783               	bsf	3,7	;select IRP bank2
  2248  052D  0080               	movwf	0
  2249  052E  3001               	movlw	1
  2250  052F  00DA               	movwf	??_sprintf^(0+128)
  2251  0530  085A               	movf	??_sprintf^(0+128),w
  2252  0531  07E6               	addwf	sprintf@sp^(0+128),f
  2253  0532                     l2653:	
  2254                           
  2255                           ;doprnt.c: 1478: }
  2256                           ;doprnt.c: 1481: prec = c;
  2257  0532  0867               	movf	sprintf@c^(0+128),w
  2258  0533  00DA               	movwf	??_sprintf^(0+128)
  2259  0534  085A               	movf	??_sprintf^(0+128),w
  2260  0535  00DE               	movwf	sprintf@prec^(0+128)
  2261  0536                     l2661:	
  2262                           ;doprnt.c: 1483: while(prec--) {
  2263                           
  2264  0536  30FF               	movlw	-1
  2265  0537  00DA               	movwf	??_sprintf^(0+128)
  2266  0538  085A               	movf	??_sprintf^(0+128),w
  2267  0539  07DE               	addwf	sprintf@prec^(0+128),f
  2268  053A  085E               	movf	sprintf@prec^(0+128),w
  2269  053B  3AFF               	xorlw	-1
  2270  053C  1903               	btfsc	3,2
  2271  053D  2BD5               	goto	l2663
  2272                           
  2273                           ;doprnt.c: 1487: {
  2274                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2275  053E  300A               	movlw	10
  2276  053F  00D1               	movwf	___lwmod@divisor^(0+128)
  2277  0540  3000               	movlw	0
  2278  0541  00D2               	movwf	(___lwmod@divisor^(0+128)+1)
  2279  0542  085E               	movf	sprintf@prec^(0+128),w
  2280  0543  00DA               	movwf	??_sprintf^(0+128)
  2281  0544  075A               	addwf	??_sprintf^(0+128),w
  2282  0545  3E01               	addlw	low (_dpowers-__stringbase)
  2283  0546  0084               	movwf	4
  2284  0547  120A  158A  200A  120A  118A  	fcall	stringdir
  2285  054C  00C9               	movwf	___lwdiv@divisor^(0+128)
  2286  054D  120A  158A  200A  120A  118A  	fcall	stringdir
  2287  0552  00CA               	movwf	(___lwdiv@divisor+1)^(0+128)
  2288  0553  0860               	movf	(sprintf@_val+1)^(0+128),w
  2289  0554  01CC               	clrf	(___lwdiv@dividend+1)^(0+128)
  2290  0555  07CC               	addwf	(___lwdiv@dividend+1)^(0+128),f
  2291  0556  085F               	movf	sprintf@_val^(0+128),w
  2292  0557  01CB               	clrf	___lwdiv@dividend^(0+128)
  2293  0558  07CB               	addwf	___lwdiv@dividend^(0+128),f
  2294  0559  120A  158A  22BF  120A  118A  	fcall	___lwdiv
  2295  055E  1683               	bsf	3,5	;RP0=1, select bank1
  2296  055F  1303               	bcf	3,6	;RP1=0, select bank1
  2297  0560  084A               	movf	(?___lwdiv+1)^(0+128),w
  2298  0561  01D4               	clrf	(___lwmod@dividend+1)^(0+128)
  2299  0562  07D4               	addwf	(___lwmod@dividend+1)^(0+128),f
  2300  0563  0849               	movf	?___lwdiv^(0+128),w
  2301  0564  01D3               	clrf	___lwmod@dividend^(0+128)
  2302  0565  07D3               	addwf	___lwmod@dividend^(0+128),f
  2303  0566  120A  158A  2289  120A  118A  	fcall	___lwmod
  2304  056B  1683               	bsf	3,5	;RP0=1, select bank1
  2305  056C  1303               	bcf	3,6	;RP1=0, select bank1
  2306  056D  0851               	movf	?___lwmod^(0+128),w
  2307  056E  3E30               	addlw	48
  2308  056F  00DB               	movwf	(??_sprintf+1)^(0+128)
  2309  0570  085B               	movf	(??_sprintf+1)^(0+128),w
  2310  0571  00E7               	movwf	sprintf@c^(0+128)
  2311                           
  2312                           ;doprnt.c: 1532: }
  2313                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2314  0572  0867               	movf	sprintf@c^(0+128),w
  2315  0573  00DA               	movwf	??_sprintf^(0+128)
  2316  0574  0866               	movf	sprintf@sp^(0+128),w
  2317  0575  0084               	movwf	4
  2318  0576  085A               	movf	??_sprintf^(0+128),w
  2319  0577  1783               	bsf	3,7	;select IRP bank2
  2320  0578  0080               	movwf	0
  2321  0579  3001               	movlw	1
  2322  057A  00DA               	movwf	??_sprintf^(0+128)
  2323  057B  085A               	movf	??_sprintf^(0+128),w
  2324  057C  07E6               	addwf	sprintf@sp^(0+128),f
  2325  057D  2D36               	goto	l2661
  2326  057E                     l2665:	
  2327                           ;doprnt.c: 1534: }
  2328                           ;doprnt.c: 1542: }
  2329                           ;doprnt.c: 1544: alldone:
  2330                           
  2331                           
  2332                           ;doprnt.c: 1547: *sp = 0;
  2333  057E  1683               	bsf	3,5	;RP0=1, select bank1
  2334  057F  1303               	bcf	3,6	;RP1=0, select bank1
  2335  0580  0866               	movf	sprintf@sp^(0+128),w
  2336  0581  0084               	movwf	4
  2337  0582  1783               	bsf	3,7	;select IRP bank2
  2338  0583  0180               	clrf	0
  2339  0584  0008               	return
  2340  0585                     __end_of_sprintf:	
  2341                           ;doprnt.c: 1549: return 0;
  2342                           ;	Return value of _sprintf is never used
  2343                           
  2344                           
  2345                           	psect	text2
  2346  088D                     __ptext2:	
  2347 ;; *************** function _isdigit *****************
  2348 ;; Defined at:
  2349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  c               1    wreg     unsigned char 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  c               1    1[BANK1 ] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, status,0
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2363 ;;      Params:         0       0       0       0       0
  2364 ;;      Locals:         0       0       2       0       0
  2365 ;;      Temps:          0       0       0       0       0
  2366 ;;      Totals:         0       0       2       0       0
  2367 ;;Total ram usage:        2 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    4
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_sprintf
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           
  2378                           ;psect for function _isdigit
  2379  088D                     _isdigit:	
  2380                           
  2381                           ;incstack = 0
  2382                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2383                           ;isdigit@c stored from wreg
  2384  088D  1683               	bsf	3,5	;RP0=1, select bank1
  2385  088E  1303               	bcf	3,6	;RP1=0, select bank1
  2386  088F  00CA               	movwf	isdigit@c^(0+128)
  2387  0890  01C9               	clrf	_isdigit$1414^(0+128)
  2388  0891  303A               	movlw	58
  2389  0892  024A               	subwf	isdigit@c^(0+128),w
  2390  0893  1803               	skipnc
  2391  0894  289B               	goto	l2115
  2392  0895  3030               	movlw	48
  2393  0896  024A               	subwf	isdigit@c^(0+128),w
  2394  0897  1C03               	skipc
  2395  0898  289B               	goto	l2115
  2396  0899  01C9               	clrf	_isdigit$1414^(0+128)
  2397  089A  0AC9               	incf	_isdigit$1414^(0+128),f
  2398  089B                     l2115:	
  2399  089B  0C49               	rrf	_isdigit$1414^(0+128),w
  2400  089C  0008               	return
  2401  089D                     __end_of_isdigit:	
  2402                           
  2403                           	psect	text3
  2404  0A0A                     __ptext3:	
  2405 ;; *************** function ___wmul *****************
  2406 ;; Defined at:
  2407 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  multiplier      2    0[BANK1 ] unsigned int 
  2410 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  product         2    4[BANK1 ] unsigned int 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  2    0[BANK1 ] unsigned int 
  2415 ;; Registers used:
  2416 ;;		wreg, status,2, status,0
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2422 ;;      Params:         0       0       4       0       0
  2423 ;;      Locals:         0       0       2       0       0
  2424 ;;      Temps:          0       0       0       0       0
  2425 ;;      Totals:         0       0       6       0       0
  2426 ;;Total ram usage:        6 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    4
  2429 ;; This function calls:
  2430 ;;		Nothing
  2431 ;; This function is called by:
  2432 ;;		_sprintf
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           
  2437                           ;psect for function ___wmul
  2438  0A0A                     ___wmul:	
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2442  0A0A  1683               	bsf	3,5	;RP0=1, select bank1
  2443  0A0B  1303               	bcf	3,6	;RP1=0, select bank1
  2444  0A0C  01CD               	clrf	___wmul@product^(0+128)
  2445  0A0D  01CE               	clrf	(___wmul@product+1)^(0+128)
  2446  0A0E                     l2121:	
  2447  0A0E  1C49               	btfss	___wmul@multiplier^(0+128),0
  2448  0A0F  2A16               	goto	l563
  2449  0A10  084B               	movf	___wmul@multiplicand^(0+128),w
  2450  0A11  07CD               	addwf	___wmul@product^(0+128),f
  2451  0A12  1803               	skipnc
  2452  0A13  0ACE               	incf	(___wmul@product+1)^(0+128),f
  2453  0A14  084C               	movf	(___wmul@multiplicand+1)^(0+128),w
  2454  0A15  07CE               	addwf	(___wmul@product+1)^(0+128),f
  2455  0A16                     l563:	
  2456  0A16  3001               	movlw	1
  2457  0A17                     u1965:	
  2458  0A17  1003               	clrc
  2459  0A18  0DCB               	rlf	___wmul@multiplicand^(0+128),f
  2460  0A19  0DCC               	rlf	(___wmul@multiplicand+1)^(0+128),f
  2461  0A1A  3EFF               	addlw	-1
  2462  0A1B  1D03               	skipz
  2463  0A1C  2A17               	goto	u1965
  2464  0A1D  3001               	movlw	1
  2465  0A1E                     u1975:	
  2466  0A1E  1003               	clrc
  2467  0A1F  0CCA               	rrf	(___wmul@multiplier+1)^(0+128),f
  2468  0A20  0CC9               	rrf	___wmul@multiplier^(0+128),f
  2469  0A21  3EFF               	addlw	-1
  2470  0A22  1D03               	skipz
  2471  0A23  2A1E               	goto	u1975
  2472  0A24  084A               	movf	(___wmul@multiplier+1)^(0+128),w
  2473  0A25  0449               	iorwf	___wmul@multiplier^(0+128),w
  2474  0A26  1D03               	skipz
  2475  0A27  2A0E               	goto	l2121
  2476  0A28  084E               	movf	(___wmul@product+1)^(0+128),w
  2477  0A29  01CA               	clrf	(?___wmul+1)^(0+128)
  2478  0A2A  07CA               	addwf	(?___wmul+1)^(0+128),f
  2479  0A2B  084D               	movf	___wmul@product^(0+128),w
  2480  0A2C  01C9               	clrf	?___wmul^(0+128)
  2481  0A2D  07C9               	addwf	?___wmul^(0+128),f
  2482  0A2E  0008               	return
  2483  0A2F                     __end_of___wmul:	
  2484                           
  2485                           	psect	text4
  2486  0A89                     __ptext4:	
  2487 ;; *************** function ___lwmod *****************
  2488 ;; Defined at:
  2489 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;  divisor         2    8[BANK1 ] unsigned int 
  2492 ;;  dividend        2   10[BANK1 ] unsigned int 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  counter         1   13[BANK1 ] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  2    8[BANK1 ] unsigned int 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2504 ;;      Params:         0       0       4       0       0
  2505 ;;      Locals:         0       0       1       0       0
  2506 ;;      Temps:          0       0       1       0       0
  2507 ;;      Totals:         0       0       6       0       0
  2508 ;;Total ram usage:        6 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    4
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_sprintf
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           
  2519                           ;psect for function ___lwmod
  2520  0A89                     ___lwmod:	
  2521                           
  2522                           ;incstack = 0
  2523                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2524  0A89  1683               	bsf	3,5	;RP0=1, select bank1
  2525  0A8A  1303               	bcf	3,6	;RP1=0, select bank1
  2526  0A8B  0852               	movf	(___lwmod@divisor+1)^(0+128),w
  2527  0A8C  0451               	iorwf	___lwmod@divisor^(0+128),w
  2528  0A8D  1903               	skipnz
  2529  0A8E  2AB8               	goto	l2357
  2530  0A8F  01D6               	clrf	___lwmod@counter^(0+128)
  2531  0A90  0AD6               	incf	___lwmod@counter^(0+128),f
  2532  0A91                     l2347:	
  2533  0A91  1BD2               	btfsc	(___lwmod@divisor+1)^(0+128),7
  2534  0A92  2A9F               	goto	l2349
  2535  0A93  3001               	movlw	1
  2536  0A94                     u2555:	
  2537  0A94  1003               	clrc
  2538  0A95  0DD1               	rlf	___lwmod@divisor^(0+128),f
  2539  0A96  0DD2               	rlf	(___lwmod@divisor+1)^(0+128),f
  2540  0A97  3EFF               	addlw	-1
  2541  0A98  1D03               	skipz
  2542  0A99  2A94               	goto	u2555
  2543  0A9A  3001               	movlw	1
  2544  0A9B  00D5               	movwf	??___lwmod^(0+128)
  2545  0A9C  0855               	movf	??___lwmod^(0+128),w
  2546  0A9D  07D6               	addwf	___lwmod@counter^(0+128),f
  2547  0A9E  2A91               	goto	l2347
  2548  0A9F                     l2349:	
  2549  0A9F  0852               	movf	(___lwmod@divisor+1)^(0+128),w
  2550  0AA0  0254               	subwf	(___lwmod@dividend+1)^(0+128),w
  2551  0AA1  1D03               	skipz
  2552  0AA2  2AA5               	goto	u2575
  2553  0AA3  0851               	movf	___lwmod@divisor^(0+128),w
  2554  0AA4  0253               	subwf	___lwmod@dividend^(0+128),w
  2555  0AA5                     u2575:	
  2556  0AA5  1C03               	skipc
  2557  0AA6  2AAD               	goto	l2353
  2558  0AA7  0851               	movf	___lwmod@divisor^(0+128),w
  2559  0AA8  02D3               	subwf	___lwmod@dividend^(0+128),f
  2560  0AA9  0852               	movf	(___lwmod@divisor+1)^(0+128),w
  2561  0AAA  1C03               	skipc
  2562  0AAB  03D4               	decf	(___lwmod@dividend+1)^(0+128),f
  2563  0AAC  02D4               	subwf	(___lwmod@dividend+1)^(0+128),f
  2564  0AAD                     l2353:	
  2565  0AAD  3001               	movlw	1
  2566  0AAE                     u2585:	
  2567  0AAE  1003               	clrc
  2568  0AAF  0CD2               	rrf	(___lwmod@divisor+1)^(0+128),f
  2569  0AB0  0CD1               	rrf	___lwmod@divisor^(0+128),f
  2570  0AB1  3EFF               	addlw	-1
  2571  0AB2  1D03               	skipz
  2572  0AB3  2AAE               	goto	u2585
  2573  0AB4  3001               	movlw	1
  2574  0AB5  02D6               	subwf	___lwmod@counter^(0+128),f
  2575  0AB6  1D03               	btfss	3,2
  2576  0AB7  2A9F               	goto	l2349
  2577  0AB8                     l2357:	
  2578  0AB8  0854               	movf	(___lwmod@dividend+1)^(0+128),w
  2579  0AB9  01D2               	clrf	(?___lwmod+1)^(0+128)
  2580  0ABA  07D2               	addwf	(?___lwmod+1)^(0+128),f
  2581  0ABB  0853               	movf	___lwmod@dividend^(0+128),w
  2582  0ABC  01D1               	clrf	?___lwmod^(0+128)
  2583  0ABD  07D1               	addwf	?___lwmod^(0+128),f
  2584  0ABE  0008               	return
  2585  0ABF                     __end_of___lwmod:	
  2586                           
  2587                           	psect	text5
  2588  0ABF                     __ptext5:	
  2589 ;; *************** function ___lwdiv *****************
  2590 ;; Defined at:
  2591 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;  divisor         2    0[BANK1 ] unsigned int 
  2594 ;;  dividend        2    2[BANK1 ] unsigned int 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  quotient        2    5[BANK1 ] unsigned int 
  2597 ;;  counter         1    7[BANK1 ] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  2    0[BANK1 ] unsigned int 
  2600 ;; Registers used:
  2601 ;;		wreg, status,2, status,0
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2607 ;;      Params:         0       0       4       0       0
  2608 ;;      Locals:         0       0       3       0       0
  2609 ;;      Temps:          0       0       1       0       0
  2610 ;;      Totals:         0       0       8       0       0
  2611 ;;Total ram usage:        8 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    4
  2614 ;; This function calls:
  2615 ;;		Nothing
  2616 ;; This function is called by:
  2617 ;;		_sprintf
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           
  2622                           ;psect for function ___lwdiv
  2623  0ABF                     ___lwdiv:	
  2624                           
  2625                           ;incstack = 0
  2626                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2627  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  2628  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  2629  0AC1  01CE               	clrf	___lwdiv@quotient^(0+128)
  2630  0AC2  01CF               	clrf	(___lwdiv@quotient+1)^(0+128)
  2631  0AC3  084A               	movf	(___lwdiv@divisor+1)^(0+128),w
  2632  0AC4  0449               	iorwf	___lwdiv@divisor^(0+128),w
  2633  0AC5  1903               	skipnz
  2634  0AC6  2AF8               	goto	l2335
  2635  0AC7  01D0               	clrf	___lwdiv@counter^(0+128)
  2636  0AC8  0AD0               	incf	___lwdiv@counter^(0+128),f
  2637  0AC9                     l2323:	
  2638  0AC9  1BCA               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  2639  0ACA  2AD7               	goto	l2325
  2640  0ACB  3001               	movlw	1
  2641  0ACC                     u2485:	
  2642  0ACC  1003               	clrc
  2643  0ACD  0DC9               	rlf	___lwdiv@divisor^(0+128),f
  2644  0ACE  0DCA               	rlf	(___lwdiv@divisor+1)^(0+128),f
  2645  0ACF  3EFF               	addlw	-1
  2646  0AD0  1D03               	skipz
  2647  0AD1  2ACC               	goto	u2485
  2648  0AD2  3001               	movlw	1
  2649  0AD3  00CD               	movwf	??___lwdiv^(0+128)
  2650  0AD4  084D               	movf	??___lwdiv^(0+128),w
  2651  0AD5  07D0               	addwf	___lwdiv@counter^(0+128),f
  2652  0AD6  2AC9               	goto	l2323
  2653  0AD7                     l2325:	
  2654  0AD7  3001               	movlw	1
  2655  0AD8                     u2505:	
  2656  0AD8  1003               	clrc
  2657  0AD9  0DCE               	rlf	___lwdiv@quotient^(0+128),f
  2658  0ADA  0DCF               	rlf	(___lwdiv@quotient+1)^(0+128),f
  2659  0ADB  3EFF               	addlw	-1
  2660  0ADC  1D03               	skipz
  2661  0ADD  2AD8               	goto	u2505
  2662  0ADE  084A               	movf	(___lwdiv@divisor+1)^(0+128),w
  2663  0ADF  024C               	subwf	(___lwdiv@dividend+1)^(0+128),w
  2664  0AE0  1D03               	skipz
  2665  0AE1  2AE4               	goto	u2515
  2666  0AE2  0849               	movf	___lwdiv@divisor^(0+128),w
  2667  0AE3  024B               	subwf	___lwdiv@dividend^(0+128),w
  2668  0AE4                     u2515:	
  2669  0AE4  1C03               	skipc
  2670  0AE5  2AED               	goto	l2331
  2671  0AE6  0849               	movf	___lwdiv@divisor^(0+128),w
  2672  0AE7  02CB               	subwf	___lwdiv@dividend^(0+128),f
  2673  0AE8  084A               	movf	(___lwdiv@divisor+1)^(0+128),w
  2674  0AE9  1C03               	skipc
  2675  0AEA  03CC               	decf	(___lwdiv@dividend+1)^(0+128),f
  2676  0AEB  02CC               	subwf	(___lwdiv@dividend+1)^(0+128),f
  2677  0AEC  144E               	bsf	___lwdiv@quotient^(0+128),0
  2678  0AED                     l2331:	
  2679  0AED  3001               	movlw	1
  2680  0AEE                     u2525:	
  2681  0AEE  1003               	clrc
  2682  0AEF  0CCA               	rrf	(___lwdiv@divisor+1)^(0+128),f
  2683  0AF0  0CC9               	rrf	___lwdiv@divisor^(0+128),f
  2684  0AF1  3EFF               	addlw	-1
  2685  0AF2  1D03               	skipz
  2686  0AF3  2AEE               	goto	u2525
  2687  0AF4  3001               	movlw	1
  2688  0AF5  02D0               	subwf	___lwdiv@counter^(0+128),f
  2689  0AF6  1D03               	btfss	3,2
  2690  0AF7  2AD7               	goto	l2325
  2691  0AF8                     l2335:	
  2692  0AF8  084F               	movf	(___lwdiv@quotient+1)^(0+128),w
  2693  0AF9  01CA               	clrf	(?___lwdiv+1)^(0+128)
  2694  0AFA  07CA               	addwf	(?___lwdiv+1)^(0+128),f
  2695  0AFB  084E               	movf	___lwdiv@quotient^(0+128),w
  2696  0AFC  01C9               	clrf	?___lwdiv^(0+128)
  2697  0AFD  07C9               	addwf	?___lwdiv^(0+128),f
  2698  0AFE  0008               	return
  2699  0AFF                     __end_of___lwdiv:	
  2700                           
  2701                           	psect	text6
  2702  0AFF                     __ptext6:	
  2703 ;; *************** function _USART_Init *****************
  2704 ;; Defined at:
  2705 ;;		line 6 in file "C:\Users\332414\Desktop\FyzzySI\firmware\usart.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  BaudRate        4   15[BANK1 ] long 
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;		None               void
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0, pclath, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2719 ;;      Params:         0       0       4       0       0
  2720 ;;      Locals:         0       0       0       0       0
  2721 ;;      Temps:          0       0       4       0       0
  2722 ;;      Totals:         0       0       8       0       0
  2723 ;;Total ram usage:        8 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    5
  2726 ;; This function calls:
  2727 ;;		___aldiv
  2728 ;; This function is called by:
  2729 ;;		_main
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           
  2734                           ;psect for function _USART_Init
  2735  0AFF                     _USART_Init:	
  2736                           
  2737                           ;usart.c: 13: SPBRG = (unsigned char)(18432000 / (16 * BaudRate)) - 1;
  2738                           
  2739                           ;incstack = 0
  2740                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  2741  0AFF  1683               	bsf	3,5	;RP0=1, select bank1
  2742  0B00  1303               	bcf	3,6	;RP1=0, select bank1
  2743  0B01  0858               	movf	USART_Init@BaudRate^(0+128),w
  2744  0B02  00DC               	movwf	??_USART_Init^(0+128)
  2745  0B03  0859               	movf	(USART_Init@BaudRate+1)^(0+128),w
  2746  0B04  00DD               	movwf	(??_USART_Init^(0+128)+1)
  2747  0B05  085A               	movf	(USART_Init@BaudRate+2)^(0+128),w
  2748  0B06  00DE               	movwf	(??_USART_Init^(0+128)+2)
  2749  0B07  085B               	movf	(USART_Init@BaudRate+3)^(0+128),w
  2750  0B08  00DF               	movwf	(??_USART_Init^(0+128)+3)
  2751  0B09  3004               	movlw	4
  2752  0B0A                     u2705:	
  2753  0B0A  1003               	clrc
  2754  0B0B  0DDC               	rlf	??_USART_Init^(0+128),f
  2755  0B0C  0DDD               	rlf	(??_USART_Init^(0+128)+1),f
  2756  0B0D  0DDE               	rlf	(??_USART_Init^(0+128)+2),f
  2757  0B0E  0DDF               	rlf	(??_USART_Init^(0+128)+3),f
  2758  0B0F  3EFF               	addlw	-1
  2759  0B10  1D03               	skipz
  2760  0B11  2B0A               	goto	u2705
  2761  0B12  085F               	movf	(??_USART_Init+3)^(0+128),w
  2762  0B13  00CC               	movwf	(___aldiv@divisor+3)^(0+128)
  2763  0B14  085E               	movf	(??_USART_Init+2)^(0+128),w
  2764  0B15  00CB               	movwf	(___aldiv@divisor+2)^(0+128)
  2765  0B16  085D               	movf	(??_USART_Init+1)^(0+128),w
  2766  0B17  00CA               	movwf	(___aldiv@divisor+1)^(0+128)
  2767  0B18  085C               	movf	??_USART_Init^(0+128),w
  2768  0B19  00C9               	movwf	___aldiv@divisor^(0+128)
  2769  0B1A  3001               	movlw	1
  2770  0B1B  00D0               	movwf	(___aldiv@dividend+3)^(0+128)
  2771  0B1C  3019               	movlw	25
  2772  0B1D  00CF               	movwf	(___aldiv@dividend+2)^(0+128)
  2773  0B1E  3040               	movlw	64
  2774  0B1F  00CE               	movwf	(___aldiv@dividend+1)^(0+128)
  2775  0B20  3000               	movlw	0
  2776  0B21  00CD               	movwf	___aldiv@dividend^(0+128)
  2777  0B22  120A  158A  2506   	fcall	___aldiv
  2778  0B25  1683               	bsf	3,5	;RP0=1, select bank1
  2779  0B26  1303               	bcf	3,6	;RP1=0, select bank1
  2780  0B27  0849               	movf	?___aldiv^(0+128),w
  2781  0B28  3EFF               	addlw	255
  2782  0B29  0099               	movwf	25	;volatile
  2783                           
  2784                           ;usart.c: 16: TXSTAbits.CSRC = 0;
  2785  0B2A  1398               	bcf	24,7	;volatile
  2786                           
  2787                           ;usart.c: 17: TXSTAbits.TX9 = 0;
  2788  0B2B  1318               	bcf	24,6	;volatile
  2789                           
  2790                           ;usart.c: 18: TXSTAbits.TXEN = 1;
  2791  0B2C  1698               	bsf	24,5	;volatile
  2792                           
  2793                           ;usart.c: 19: TXSTAbits.SYNC = 0;
  2794  0B2D  1218               	bcf	24,4	;volatile
  2795                           
  2796                           ;usart.c: 21: TXSTAbits.BRGH = 1;
  2797  0B2E  1518               	bsf	24,2	;volatile
  2798                           
  2799                           ;usart.c: 22: TXSTAbits.TRMT = 1;
  2800  0B2F  1498               	bsf	24,1	;volatile
  2801                           
  2802                           ;usart.c: 23: TXSTAbits.TX9D = 0;
  2803  0B30  1018               	bcf	24,0	;volatile
  2804                           
  2805                           ;usart.c: 26: RCSTAbits.SPEN = 1;
  2806  0B31  1283               	bcf	3,5	;RP0=0, select bank0
  2807  0B32  1303               	bcf	3,6	;RP1=0, select bank0
  2808  0B33  1798               	bsf	24,7	;volatile
  2809                           
  2810                           ;usart.c: 27: RCSTAbits.RX9 = 0;
  2811  0B34  1318               	bcf	24,6	;volatile
  2812                           
  2813                           ;usart.c: 28: RCSTAbits.SREN = 0;
  2814  0B35  1298               	bcf	24,5	;volatile
  2815                           
  2816                           ;usart.c: 29: RCSTAbits.CREN = 1;
  2817  0B36  1618               	bsf	24,4	;volatile
  2818                           
  2819                           ;usart.c: 30: RCSTAbits.ADDEN = 0;
  2820  0B37  1198               	bcf	24,3	;volatile
  2821                           
  2822                           ;usart.c: 31: RCSTAbits.FERR = 0;
  2823  0B38  1118               	bcf	24,2	;volatile
  2824                           
  2825                           ;usart.c: 32: RCSTAbits.OERR = 0;
  2826  0B39  1098               	bcf	24,1	;volatile
  2827                           
  2828                           ;usart.c: 33: RCSTAbits.RX9D = 0;
  2829  0B3A  1018               	bcf	24,0	;volatile
  2830                           
  2831                           ;usart.c: 36: PIE1bits.TXIE = 0;
  2832  0B3B  1683               	bsf	3,5	;RP0=1, select bank1
  2833  0B3C  1303               	bcf	3,6	;RP1=0, select bank1
  2834  0B3D  120C               	bcf	12,4	;volatile
  2835                           
  2836                           ;usart.c: 37: PIR1bits.TXIF = 0;
  2837  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  2838  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  2839  0B40  120C               	bcf	12,4	;volatile
  2840                           
  2841                           ;usart.c: 38: PIE1bits.RCIE = 1;
  2842  0B41  1683               	bsf	3,5	;RP0=1, select bank1
  2843  0B42  1303               	bcf	3,6	;RP1=0, select bank1
  2844  0B43  168C               	bsf	12,5	;volatile
  2845                           
  2846                           ;usart.c: 39: PIR1bits.RCIF = 0;
  2847  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  2848  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  2849  0B46  128C               	bcf	12,5	;volatile
  2850  0B47  0008               	return
  2851  0B48                     __end_of_USART_Init:	
  2852                           
  2853                           	psect	text7
  2854  0D06                     __ptext7:	
  2855 ;; *************** function ___aldiv *****************
  2856 ;; Defined at:
  2857 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  divisor         4    0[BANK1 ] long 
  2860 ;;  dividend        4    4[BANK1 ] long 
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  quotient        4   11[BANK1 ] long 
  2863 ;;  sign            1   10[BANK1 ] unsigned char 
  2864 ;;  counter         1    9[BANK1 ] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  4    0[BANK1 ] long 
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2874 ;;      Params:         0       0       8       0       0
  2875 ;;      Locals:         0       0       6       0       0
  2876 ;;      Temps:          0       0       1       0       0
  2877 ;;      Totals:         0       0      15       0       0
  2878 ;;Total ram usage:       15 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    4
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_USART_Init
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function ___aldiv
  2890  0D06                     ___aldiv:	
  2891                           
  2892                           ;incstack = 0
  2893                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2894  0D06  1683               	bsf	3,5	;RP0=1, select bank1
  2895  0D07  1303               	bcf	3,6	;RP1=0, select bank1
  2896  0D08  01D3               	clrf	___aldiv@sign^(0+128)
  2897  0D09  1FCC               	btfss	(___aldiv@divisor+3)^(0+128),7
  2898  0D0A  2D18               	goto	l618
  2899  0D0B  09C9               	comf	___aldiv@divisor^(0+128),f
  2900  0D0C  09CA               	comf	(___aldiv@divisor+1)^(0+128),f
  2901  0D0D  09CB               	comf	(___aldiv@divisor+2)^(0+128),f
  2902  0D0E  09CC               	comf	(___aldiv@divisor+3)^(0+128),f
  2903  0D0F  0AC9               	incf	___aldiv@divisor^(0+128),f
  2904  0D10  1903               	skipnz
  2905  0D11  0ACA               	incf	(___aldiv@divisor+1)^(0+128),f
  2906  0D12  1903               	skipnz
  2907  0D13  0ACB               	incf	(___aldiv@divisor+2)^(0+128),f
  2908  0D14  1903               	skipnz
  2909  0D15  0ACC               	incf	(___aldiv@divisor+3)^(0+128),f
  2910  0D16  01D3               	clrf	___aldiv@sign^(0+128)
  2911  0D17  0AD3               	incf	___aldiv@sign^(0+128),f
  2912  0D18                     l618:	
  2913  0D18  1FD0               	btfss	(___aldiv@dividend+3)^(0+128),7
  2914  0D19  2D29               	goto	l2141
  2915  0D1A  09CD               	comf	___aldiv@dividend^(0+128),f
  2916  0D1B  09CE               	comf	(___aldiv@dividend+1)^(0+128),f
  2917  0D1C  09CF               	comf	(___aldiv@dividend+2)^(0+128),f
  2918  0D1D  09D0               	comf	(___aldiv@dividend+3)^(0+128),f
  2919  0D1E  0ACD               	incf	___aldiv@dividend^(0+128),f
  2920  0D1F  1903               	skipnz
  2921  0D20  0ACE               	incf	(___aldiv@dividend+1)^(0+128),f
  2922  0D21  1903               	skipnz
  2923  0D22  0ACF               	incf	(___aldiv@dividend+2)^(0+128),f
  2924  0D23  1903               	skipnz
  2925  0D24  0AD0               	incf	(___aldiv@dividend+3)^(0+128),f
  2926  0D25  3001               	movlw	1
  2927  0D26  00D1               	movwf	??___aldiv^(0+128)
  2928  0D27  0851               	movf	??___aldiv^(0+128),w
  2929  0D28  06D3               	xorwf	___aldiv@sign^(0+128),f
  2930  0D29                     l2141:	
  2931  0D29  3000               	movlw	0
  2932  0D2A  00D7               	movwf	(___aldiv@quotient+3)^(0+128)
  2933  0D2B  3000               	movlw	0
  2934  0D2C  00D6               	movwf	(___aldiv@quotient+2)^(0+128)
  2935  0D2D  3000               	movlw	0
  2936  0D2E  00D5               	movwf	(___aldiv@quotient+1)^(0+128)
  2937  0D2F  3000               	movlw	0
  2938  0D30  00D4               	movwf	___aldiv@quotient^(0+128)
  2939  0D31  084C               	movf	(___aldiv@divisor+3)^(0+128),w
  2940  0D32  044B               	iorwf	(___aldiv@divisor+2)^(0+128),w
  2941  0D33  044A               	iorwf	(___aldiv@divisor+1)^(0+128),w
  2942  0D34  0449               	iorwf	___aldiv@divisor^(0+128),w
  2943  0D35  1903               	skipnz
  2944  0D36  2D7E               	goto	l2163
  2945  0D37  01D2               	clrf	___aldiv@counter^(0+128)
  2946  0D38  0AD2               	incf	___aldiv@counter^(0+128),f
  2947  0D39                     l2149:	
  2948  0D39  1BCC               	btfsc	(___aldiv@divisor+3)^(0+128),7
  2949  0D3A  2D49               	goto	l2151
  2950  0D3B  3001               	movlw	1
  2951  0D3C  00D1               	movwf	??___aldiv^(0+128)
  2952  0D3D                     u2025:	
  2953  0D3D  1003               	clrc
  2954  0D3E  0DC9               	rlf	___aldiv@divisor^(0+128),f
  2955  0D3F  0DCA               	rlf	(___aldiv@divisor+1)^(0+128),f
  2956  0D40  0DCB               	rlf	(___aldiv@divisor+2)^(0+128),f
  2957  0D41  0DCC               	rlf	(___aldiv@divisor+3)^(0+128),f
  2958  0D42  0BD1               	decfsz	??___aldiv^(0+128),f
  2959  0D43  2D3D               	goto	u2025
  2960  0D44  3001               	movlw	1
  2961  0D45  00D1               	movwf	??___aldiv^(0+128)
  2962  0D46  0851               	movf	??___aldiv^(0+128),w
  2963  0D47  07D2               	addwf	___aldiv@counter^(0+128),f
  2964  0D48  2D39               	goto	l2149
  2965  0D49                     l2151:	
  2966  0D49  3001               	movlw	1
  2967  0D4A  00D1               	movwf	??___aldiv^(0+128)
  2968  0D4B                     u2045:	
  2969  0D4B  1003               	clrc
  2970  0D4C  0DD4               	rlf	___aldiv@quotient^(0+128),f
  2971  0D4D  0DD5               	rlf	(___aldiv@quotient+1)^(0+128),f
  2972  0D4E  0DD6               	rlf	(___aldiv@quotient+2)^(0+128),f
  2973  0D4F  0DD7               	rlf	(___aldiv@quotient+3)^(0+128),f
  2974  0D50  0BD1               	decfsz	??___aldiv^(0+128),f
  2975  0D51  2D4B               	goto	u2045
  2976  0D52  084C               	movf	(___aldiv@divisor+3)^(0+128),w
  2977  0D53  0250               	subwf	(___aldiv@dividend+3)^(0+128),w
  2978  0D54  1D03               	skipz
  2979  0D55  2D60               	goto	u2055
  2980  0D56  084B               	movf	(___aldiv@divisor+2)^(0+128),w
  2981  0D57  024F               	subwf	(___aldiv@dividend+2)^(0+128),w
  2982  0D58  1D03               	skipz
  2983  0D59  2D60               	goto	u2055
  2984  0D5A  084A               	movf	(___aldiv@divisor+1)^(0+128),w
  2985  0D5B  024E               	subwf	(___aldiv@dividend+1)^(0+128),w
  2986  0D5C  1D03               	skipz
  2987  0D5D  2D60               	goto	u2055
  2988  0D5E  0849               	movf	___aldiv@divisor^(0+128),w
  2989  0D5F  024D               	subwf	___aldiv@dividend^(0+128),w
  2990  0D60                     u2055:	
  2991  0D60  1C03               	skipc
  2992  0D61  2D71               	goto	l2159
  2993  0D62  0849               	movf	___aldiv@divisor^(0+128),w
  2994  0D63  02CD               	subwf	___aldiv@dividend^(0+128),f
  2995  0D64  084A               	movf	(___aldiv@divisor+1)^(0+128),w
  2996  0D65  1C03               	skipc
  2997  0D66  0F4A               	incfsz	(___aldiv@divisor+1)^(0+128),w
  2998  0D67  02CE               	subwf	(___aldiv@dividend+1)^(0+128),f
  2999  0D68  084B               	movf	(___aldiv@divisor+2)^(0+128),w
  3000  0D69  1C03               	skipc
  3001  0D6A  0F4B               	incfsz	(___aldiv@divisor+2)^(0+128),w
  3002  0D6B  02CF               	subwf	(___aldiv@dividend+2)^(0+128),f
  3003  0D6C  084C               	movf	(___aldiv@divisor+3)^(0+128),w
  3004  0D6D  1C03               	skipc
  3005  0D6E  0F4C               	incfsz	(___aldiv@divisor+3)^(0+128),w
  3006  0D6F  02D0               	subwf	(___aldiv@dividend+3)^(0+128),f
  3007  0D70  1454               	bsf	___aldiv@quotient^(0+128),0
  3008  0D71                     l2159:	
  3009  0D71  3001               	movlw	1
  3010  0D72                     u2065:	
  3011  0D72  1003               	clrc
  3012  0D73  0CCC               	rrf	(___aldiv@divisor+3)^(0+128),f
  3013  0D74  0CCB               	rrf	(___aldiv@divisor+2)^(0+128),f
  3014  0D75  0CCA               	rrf	(___aldiv@divisor+1)^(0+128),f
  3015  0D76  0CC9               	rrf	___aldiv@divisor^(0+128),f
  3016  0D77  3EFF               	addlw	-1
  3017  0D78  1D03               	skipz
  3018  0D79  2D72               	goto	u2065
  3019  0D7A  3001               	movlw	1
  3020  0D7B  02D2               	subwf	___aldiv@counter^(0+128),f
  3021  0D7C  1D03               	btfss	3,2
  3022  0D7D  2D49               	goto	l2151
  3023  0D7E                     l2163:	
  3024  0D7E  0853               	movf	___aldiv@sign^(0+128),w
  3025  0D7F  1903               	btfsc	3,2
  3026  0D80  2D8C               	goto	l2167
  3027  0D81  09D4               	comf	___aldiv@quotient^(0+128),f
  3028  0D82  09D5               	comf	(___aldiv@quotient+1)^(0+128),f
  3029  0D83  09D6               	comf	(___aldiv@quotient+2)^(0+128),f
  3030  0D84  09D7               	comf	(___aldiv@quotient+3)^(0+128),f
  3031  0D85  0AD4               	incf	___aldiv@quotient^(0+128),f
  3032  0D86  1903               	skipnz
  3033  0D87  0AD5               	incf	(___aldiv@quotient+1)^(0+128),f
  3034  0D88  1903               	skipnz
  3035  0D89  0AD6               	incf	(___aldiv@quotient+2)^(0+128),f
  3036  0D8A  1903               	skipnz
  3037  0D8B  0AD7               	incf	(___aldiv@quotient+3)^(0+128),f
  3038  0D8C                     l2167:	
  3039  0D8C  0857               	movf	(___aldiv@quotient+3)^(0+128),w
  3040  0D8D  00CC               	movwf	(?___aldiv+3)^(0+128)
  3041  0D8E  0856               	movf	(___aldiv@quotient+2)^(0+128),w
  3042  0D8F  00CB               	movwf	(?___aldiv+2)^(0+128)
  3043  0D90  0855               	movf	(___aldiv@quotient+1)^(0+128),w
  3044  0D91  00CA               	movwf	(?___aldiv+1)^(0+128)
  3045  0D92  0854               	movf	___aldiv@quotient^(0+128),w
  3046  0D93  00C9               	movwf	?___aldiv^(0+128)
  3047  0D94  0008               	return
  3048  0D95                     __end_of___aldiv:	
  3049                           
  3050                           	psect	text8
  3051  0868                     __ptext8:	
  3052 ;; *************** function _TIMER0_Set *****************
  3053 ;; Defined at:
  3054 ;;		line 20 in file "C:\Users\332414\Desktop\FyzzySI\firmware\timers.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  contagens       1    wreg     unsigned char 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  contagens       1    0[BANK1 ] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;		None               void
  3061 ;; Registers used:
  3062 ;;		wreg
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3068 ;;      Params:         0       0       0       0       0
  3069 ;;      Locals:         0       0       1       0       0
  3070 ;;      Temps:          0       0       0       0       0
  3071 ;;      Totals:         0       0       1       0       0
  3072 ;;Total ram usage:        1 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    4
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function _TIMER0_Set
  3084  0868                     _TIMER0_Set:	
  3085                           
  3086                           ;incstack = 0
  3087                           ; Regs used in _TIMER0_Set: [wreg]
  3088                           ;TIMER0_Set@contagens stored from wreg
  3089  0868  1683               	bsf	3,5	;RP0=1, select bank1
  3090  0869  1303               	bcf	3,6	;RP1=0, select bank1
  3091  086A  00C9               	movwf	TIMER0_Set@contagens^(0+128)
  3092                           
  3093                           ;timers.c: 22: TMR0 = contagens;
  3094  086B  0849               	movf	TIMER0_Set@contagens^(0+128),w
  3095  086C  1283               	bcf	3,5	;RP0=0, select bank0
  3096  086D  1303               	bcf	3,6	;RP1=0, select bank0
  3097  086E  0081               	movwf	1	;volatile
  3098  086F  0008               	return
  3099  0870                     __end_of_TIMER0_Set:	
  3100                           
  3101                           	psect	text9
  3102  0882                     __ptext9:	
  3103 ;; *************** function _TIMER0_Init *****************
  3104 ;; Defined at:
  3105 ;;		line 6 in file "C:\Users\332414\Desktop\FyzzySI\firmware\timers.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;		None
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		None
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3119 ;;      Params:         0       0       0       0       0
  3120 ;;      Locals:         0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0
  3122 ;;      Totals:         0       0       0       0       0
  3123 ;;Total ram usage:        0 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    4
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_main
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function _TIMER0_Init
  3135  0882                     _TIMER0_Init:	
  3136                           
  3137                           ;timers.c: 8: OPTION_REGbits.T0CS = 0;
  3138                           
  3139                           ;incstack = 0
  3140                           ; Regs used in _TIMER0_Init: []
  3141  0882  1683               	bsf	3,5	;RP0=1, select bank1
  3142  0883  1303               	bcf	3,6	;RP1=0, select bank1
  3143  0884  1281               	bcf	1,5	;volatile
  3144                           
  3145                           ;timers.c: 9: OPTION_REGbits.T0SE = 0;
  3146  0885  1201               	bcf	1,4	;volatile
  3147                           
  3148                           ;timers.c: 10: OPTION_REGbits.PSA = 0;
  3149  0886  1181               	bcf	1,3	;volatile
  3150                           
  3151                           ;timers.c: 11: OPTION_REGbits.PS2 = 1;
  3152  0887  1501               	bsf	1,2	;volatile
  3153                           
  3154                           ;timers.c: 12: OPTION_REGbits.PS1 = 1;
  3155  0888  1481               	bsf	1,1	;volatile
  3156                           
  3157                           ;timers.c: 13: OPTION_REGbits.PS0 = 1;
  3158  0889  1401               	bsf	1,0	;volatile
  3159                           
  3160                           ;timers.c: 14: INTCONbits.TMR0IF = 0;
  3161  088A  110B               	bcf	11,2	;volatile
  3162                           
  3163                           ;timers.c: 15: INTCONbits.TMR0IE = 1;
  3164  088B  168B               	bsf	11,5	;volatile
  3165  088C  0008               	return
  3166  088D                     __end_of_TIMER0_Init:	
  3167                           
  3168                           	psect	text10
  3169  09E6                     __ptext10:	
  3170 ;; *************** function _PWM_Init *****************
  3171 ;; Defined at:
  3172 ;;		line 5 in file "C:\Users\332414\Desktop\FyzzySI\firmware\pwm.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;		None               void
  3179 ;; Registers used:
  3180 ;;		wreg
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3186 ;;      Params:         0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0
  3189 ;;      Totals:         0       0       0       0       0
  3190 ;;Total ram usage:        0 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    4
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function _PWM_Init
  3202  09E6                     _PWM_Init:	
  3203                           
  3204                           ;pwm.c: 14: T2CONbits.T2CKPS1 = 1;
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _PWM_Init: [wreg]
  3208  09E6  1283               	bcf	3,5	;RP0=0, select bank0
  3209  09E7  1303               	bcf	3,6	;RP1=0, select bank0
  3210  09E8  1492               	bsf	18,1	;volatile
  3211                           
  3212                           ;pwm.c: 15: T2CONbits.T2CKPS0 = 0;
  3213  09E9  1012               	bcf	18,0	;volatile
  3214                           
  3215                           ;pwm.c: 18: T2CONbits.TOUTPS3 = 0;
  3216  09EA  1312               	bcf	18,6	;volatile
  3217                           
  3218                           ;pwm.c: 19: T2CONbits.TOUTPS2 = 0;
  3219  09EB  1292               	bcf	18,5	;volatile
  3220                           
  3221                           ;pwm.c: 20: T2CONbits.TOUTPS1 = 0;
  3222  09EC  1212               	bcf	18,4	;volatile
  3223                           
  3224                           ;pwm.c: 21: T2CONbits.TOUTPS0 = 0;
  3225  09ED  1192               	bcf	18,3	;volatile
  3226                           
  3227                           ;pwm.c: 24: T2CONbits.TMR2ON = 1;
  3228  09EE  1512               	bsf	18,2	;volatile
  3229                           
  3230                           ;pwm.c: 27: PR2 = 255;
  3231  09EF  30FF               	movlw	255
  3232  09F0  1683               	bsf	3,5	;RP0=1, select bank1
  3233  09F1  1303               	bcf	3,6	;RP1=0, select bank1
  3234  09F2  0092               	movwf	18	;volatile
  3235                           
  3236                           ;pwm.c: 43: CCP1CONbits.CCP1M3 = 1;
  3237  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  3238  09F4  1303               	bcf	3,6	;RP1=0, select bank0
  3239  09F5  1597               	bsf	23,3	;volatile
  3240                           
  3241                           ;pwm.c: 44: CCP1CONbits.CCP1M2 = 1;
  3242  09F6  1517               	bsf	23,2	;volatile
  3243                           
  3244                           ;pwm.c: 45: CCP1CONbits.CCP1M1 = 1;
  3245  09F7  1497               	bsf	23,1	;volatile
  3246                           
  3247                           ;pwm.c: 46: CCP1CONbits.CCP1M0 = 1;
  3248  09F8  1417               	bsf	23,0	;volatile
  3249                           
  3250                           ;pwm.c: 49: PIE1bits.CCP1IE = 1;
  3251  09F9  1683               	bsf	3,5	;RP0=1, select bank1
  3252  09FA  1303               	bcf	3,6	;RP1=0, select bank1
  3253  09FB  150C               	bsf	12,2	;volatile
  3254                           
  3255                           ;pwm.c: 50: PIR1bits.CCP1IF = 0;
  3256  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  3257  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  3258  09FE  110C               	bcf	12,2	;volatile
  3259                           
  3260                           ;pwm.c: 53: CCP2CONbits.CCP2M3 = 1;
  3261  09FF  159D               	bsf	29,3	;volatile
  3262                           
  3263                           ;pwm.c: 54: CCP2CONbits.CCP2M2 = 1;
  3264  0A00  151D               	bsf	29,2	;volatile
  3265                           
  3266                           ;pwm.c: 55: CCP2CONbits.CCP2M1 = 1;
  3267  0A01  149D               	bsf	29,1	;volatile
  3268                           
  3269                           ;pwm.c: 56: CCP2CONbits.CCP2M0 = 1;
  3270  0A02  141D               	bsf	29,0	;volatile
  3271                           
  3272                           ;pwm.c: 59: PIE2bits.CCP2IE = 1;
  3273  0A03  1683               	bsf	3,5	;RP0=1, select bank1
  3274  0A04  1303               	bcf	3,6	;RP1=0, select bank1
  3275  0A05  140D               	bsf	13,0	;volatile
  3276                           
  3277                           ;pwm.c: 60: PIR2bits.CCP2IF = 0;
  3278  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0A08  100D               	bcf	13,0	;volatile
  3281  0A09  0008               	return
  3282  0A0A                     __end_of_PWM_Init:	
  3283                           
  3284                           	psect	text11
  3285  09A2                     __ptext11:	
  3286 ;; *************** function _PWM_DutyCycle2 *****************
  3287 ;; Defined at:
  3288 ;;		line 96 in file "C:\Users\332414\Desktop\FyzzySI\firmware\pwm.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  valor           2    0[BANK1 ] int 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;		None               void
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3302 ;;      Params:         0       0       2       0       0
  3303 ;;      Locals:         0       0       0       0       0
  3304 ;;      Temps:          0       0       2       0       0
  3305 ;;      Totals:         0       0       4       0       0
  3306 ;;Total ram usage:        4 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    4
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _PWM_DutyCycle2
  3318  09A2                     _PWM_DutyCycle2:	
  3319                           
  3320                           ;pwm.c: 98: CCPR2L = valor >> 2;
  3321                           
  3322                           ;incstack = 0
  3323                           ; Regs used in _PWM_DutyCycle2: [wreg+status,2+status,0]
  3324  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  3325  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  3326  09A4  084A               	movf	(PWM_DutyCycle2@valor+1)^(0+128),w
  3327  09A5  00CC               	movwf	(??_PWM_DutyCycle2^(0+128)+1)
  3328  09A6  0849               	movf	PWM_DutyCycle2@valor^(0+128),w
  3329  09A7  00CB               	movwf	??_PWM_DutyCycle2^(0+128)
  3330  09A8  0D4C               	rlf	(??_PWM_DutyCycle2^(0+128)+1),w
  3331  09A9  0CCC               	rrf	(??_PWM_DutyCycle2^(0+128)+1),f
  3332  09AA  0CCB               	rrf	??_PWM_DutyCycle2^(0+128),f
  3333  09AB  0D4C               	rlf	(??_PWM_DutyCycle2^(0+128)+1),w
  3334  09AC  0CCC               	rrf	(??_PWM_DutyCycle2^(0+128)+1),f
  3335  09AD  0CCB               	rrf	??_PWM_DutyCycle2^(0+128),f
  3336  09AE  084B               	movf	??_PWM_DutyCycle2^(0+128),w
  3337  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  3338  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  3339  09B1  009B               	movwf	27	;volatile
  3340                           
  3341                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  3342  09B2  1683               	bsf	3,5	;RP0=1, select bank1
  3343  09B3  1303               	bcf	3,6	;RP1=0, select bank1
  3344  09B4  0849               	movf	PWM_DutyCycle2@valor^(0+128),w
  3345  09B5  00CB               	movwf	??_PWM_DutyCycle2^(0+128)
  3346  09B6  3003               	movlw	3
  3347  09B7                     u2695:	
  3348  09B7  1003               	clrc
  3349  09B8  0DCB               	rlf	??_PWM_DutyCycle2^(0+128),f
  3350  09B9  3EFF               	addlw	-1
  3351  09BA  1D03               	skipz
  3352  09BB  29B7               	goto	u2695
  3353  09BC  1003               	clrc
  3354  09BD  0D4B               	rlf	??_PWM_DutyCycle2^(0+128),w
  3355  09BE  380C               	iorlw	12
  3356  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  3357  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  3358  09C1  009D               	movwf	29	;volatile
  3359  09C2  0008               	return
  3360  09C3                     __end_of_PWM_DutyCycle2:	
  3361                           
  3362                           	psect	text12
  3363  0981                     __ptext12:	
  3364 ;; *************** function _PWM_DutyCycle1 *****************
  3365 ;; Defined at:
  3366 ;;		line 64 in file "C:\Users\332414\Desktop\FyzzySI\firmware\pwm.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  valor           2    0[BANK1 ] int 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;		None               void
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3380 ;;      Params:         0       0       2       0       0
  3381 ;;      Locals:         0       0       0       0       0
  3382 ;;      Temps:          0       0       2       0       0
  3383 ;;      Totals:         0       0       4       0       0
  3384 ;;Total ram usage:        4 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    4
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_main
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           
  3395                           ;psect for function _PWM_DutyCycle1
  3396  0981                     _PWM_DutyCycle1:	
  3397                           
  3398                           ;pwm.c: 91: CCPR1L = valor >> 2;
  3399                           
  3400                           ;incstack = 0
  3401                           ; Regs used in _PWM_DutyCycle1: [wreg+status,2+status,0]
  3402  0981  1683               	bsf	3,5	;RP0=1, select bank1
  3403  0982  1303               	bcf	3,6	;RP1=0, select bank1
  3404  0983  084A               	movf	(PWM_DutyCycle1@valor+1)^(0+128),w
  3405  0984  00CC               	movwf	(??_PWM_DutyCycle1^(0+128)+1)
  3406  0985  0849               	movf	PWM_DutyCycle1@valor^(0+128),w
  3407  0986  00CB               	movwf	??_PWM_DutyCycle1^(0+128)
  3408  0987  0D4C               	rlf	(??_PWM_DutyCycle1^(0+128)+1),w
  3409  0988  0CCC               	rrf	(??_PWM_DutyCycle1^(0+128)+1),f
  3410  0989  0CCB               	rrf	??_PWM_DutyCycle1^(0+128),f
  3411  098A  0D4C               	rlf	(??_PWM_DutyCycle1^(0+128)+1),w
  3412  098B  0CCC               	rrf	(??_PWM_DutyCycle1^(0+128)+1),f
  3413  098C  0CCB               	rrf	??_PWM_DutyCycle1^(0+128),f
  3414  098D  084B               	movf	??_PWM_DutyCycle1^(0+128),w
  3415  098E  1283               	bcf	3,5	;RP0=0, select bank0
  3416  098F  1303               	bcf	3,6	;RP1=0, select bank0
  3417  0990  0095               	movwf	21	;volatile
  3418                           
  3419                           ;pwm.c: 92: CCP1CON = (valor << 4)|0X0C;
  3420  0991  1683               	bsf	3,5	;RP0=1, select bank1
  3421  0992  1303               	bcf	3,6	;RP1=0, select bank1
  3422  0993  0849               	movf	PWM_DutyCycle1@valor^(0+128),w
  3423  0994  00CB               	movwf	??_PWM_DutyCycle1^(0+128)
  3424  0995  3003               	movlw	3
  3425  0996                     u2735:	
  3426  0996  1003               	clrc
  3427  0997  0DCB               	rlf	??_PWM_DutyCycle1^(0+128),f
  3428  0998  3EFF               	addlw	-1
  3429  0999  1D03               	skipz
  3430  099A  2996               	goto	u2735
  3431  099B  1003               	clrc
  3432  099C  0D4B               	rlf	??_PWM_DutyCycle1^(0+128),w
  3433  099D  380C               	iorlw	12
  3434  099E  1283               	bcf	3,5	;RP0=0, select bank0
  3435  099F  1303               	bcf	3,6	;RP1=0, select bank0
  3436  09A0  0097               	movwf	23	;volatile
  3437  09A1  0008               	return
  3438  09A2                     __end_of_PWM_DutyCycle1:	
  3439                           
  3440                           	psect	text13
  3441  0A58                     __ptext13:	
  3442 ;; *************** function _LCD_WriteString *****************
  3443 ;; Defined at:
  3444 ;;		line 61 in file "C:\Users\332414\Desktop\FyzzySI\firmware\lcd.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  Str             2    2[BANK1 ] PTR const unsigned char 
  3447 ;;		 -> STR_3(6), display(10), STR_1(17), 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;		None               void
  3452 ;; Registers used:
  3453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3459 ;;      Params:         0       0       2       0       0
  3460 ;;      Locals:         0       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0
  3462 ;;      Totals:         0       0       2       0       0
  3463 ;;Total ram usage:        2 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    5
  3466 ;; This function calls:
  3467 ;;		_LCD_WriteData
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _LCD_WriteString
  3475  0A58                     _LCD_WriteString:	
  3476  0A58                     l2553:	
  3477                           ;lcd.c: 63: while(*Str != '\0')
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _LCD_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3481                           
  3482  0A58  1683               	bsf	3,5	;RP0=1, select bank1
  3483  0A59  1303               	bcf	3,6	;RP1=0, select bank1
  3484  0A5A  084C               	movf	(LCD_WriteString@Str+1)^(0+128),w
  3485  0A5B  1283               	bcf	3,5	;RP0=0, select bank0
  3486  0A5C  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0A5D  00FF               	movwf	127
  3488  0A5E  1683               	bsf	3,5	;RP0=1, select bank1
  3489  0A5F  1303               	bcf	3,6	;RP1=0, select bank1
  3490  0A60  084B               	movf	LCD_WriteString@Str^(0+128),w
  3491  0A61  0084               	movwf	4
  3492  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  3493  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  3494  0A64  120A  158A  2000  120A  158A  	fcall	stringtab
  3495  0A69  3800               	iorlw	0
  3496  0A6A  1903               	btfsc	3,2
  3497  0A6B  0008               	return
  3498                           
  3499                           ;lcd.c: 64: {
  3500                           ;lcd.c: 65: LCD_WriteData(*Str);
  3501  0A6C  1683               	bsf	3,5	;RP0=1, select bank1
  3502  0A6D  1303               	bcf	3,6	;RP1=0, select bank1
  3503  0A6E  084C               	movf	(LCD_WriteString@Str+1)^(0+128),w
  3504  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0A71  00FF               	movwf	127
  3507  0A72  1683               	bsf	3,5	;RP0=1, select bank1
  3508  0A73  1303               	bcf	3,6	;RP1=0, select bank1
  3509  0A74  084B               	movf	LCD_WriteString@Str^(0+128),w
  3510  0A75  0084               	movwf	4
  3511  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  3512  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  3513  0A78  120A  158A  2000  120A  158A  	fcall	stringtab
  3514  0A7D  120A  158A  20DA  120A  158A  	fcall	_LCD_WriteData
  3515                           
  3516                           ;lcd.c: 66: Str++;
  3517  0A82  3001               	movlw	1
  3518  0A83  1683               	bsf	3,5	;RP0=1, select bank1
  3519  0A84  1303               	bcf	3,6	;RP1=0, select bank1
  3520  0A85  07CB               	addwf	LCD_WriteString@Str^(0+128),f
  3521  0A86  1803               	skipnc
  3522  0A87  0ACC               	incf	(LCD_WriteString@Str+1)^(0+128),f
  3523  0A88  2A58               	goto	l2553
  3524  0A89                     __end_of_LCD_WriteString:	
  3525                           
  3526                           	psect	text14
  3527  08DA                     __ptext14:	
  3528 ;; *************** function _LCD_WriteData *****************
  3529 ;; Defined at:
  3530 ;;		line 47 in file "C:\Users\332414\Desktop\FyzzySI\firmware\lcd.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  Byte            1    wreg     unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  Byte            1    1[BANK1 ] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;		None               void
  3537 ;; Registers used:
  3538 ;;		wreg
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3544 ;;      Params:         0       0       0       0       0
  3545 ;;      Locals:         0       0       1       0       0
  3546 ;;      Temps:          0       0       1       0       0
  3547 ;;      Totals:         0       0       2       0       0
  3548 ;;Total ram usage:        2 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    4
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_LCD_WriteString
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _LCD_WriteData
  3560  08DA                     _LCD_WriteData:	
  3561                           
  3562                           ;incstack = 0
  3563                           ; Regs used in _LCD_WriteData: [wreg]
  3564                           ;LCD_WriteData@Byte stored from wreg
  3565  08DA  1683               	bsf	3,5	;RP0=1, select bank1
  3566  08DB  1303               	bcf	3,6	;RP1=0, select bank1
  3567  08DC  00CA               	movwf	LCD_WriteData@Byte^(0+128)
  3568                           
  3569                           ;lcd.c: 49: PORTEbits.RE0 = 1;
  3570  08DD  1283               	bcf	3,5	;RP0=0, select bank0
  3571  08DE  1303               	bcf	3,6	;RP1=0, select bank0
  3572  08DF  1409               	bsf	9,0	;volatile
  3573                           
  3574                           ;lcd.c: 51: PORTD = Byte;
  3575  08E0  1683               	bsf	3,5	;RP0=1, select bank1
  3576  08E1  1303               	bcf	3,6	;RP1=0, select bank1
  3577  08E2  084A               	movf	LCD_WriteData@Byte^(0+128),w
  3578  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  3579  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  3580  08E5  0088               	movwf	8	;volatile
  3581                           
  3582                           ;lcd.c: 53: PORTEbits.RE1 = 1;
  3583  08E6  1489               	bsf	9,1	;volatile
  3584                           
  3585                           ;lcd.c: 55: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3586  08E7  303D               	movlw	61
  3587  08E8  1683               	bsf	3,5	;RP0=1, select bank1
  3588  08E9  1303               	bcf	3,6	;RP1=0, select bank1
  3589  08EA  00C9               	movwf	??_LCD_WriteData^(0+128)
  3590  08EB                     u3487:	
  3591  08EB  0BC9               	decfsz	??_LCD_WriteData^(0+128),f
  3592  08EC  28EB               	goto	u3487
  3593                           
  3594                           ;lcd.c: 57: PORTEbits.RE1 = 0;
  3595  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  3596  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  3597  08EF  1089               	bcf	9,1	;volatile
  3598  08F0  0008               	return
  3599  08F1                     __end_of_LCD_WriteData:	
  3600                           
  3601                           	psect	text15
  3602  0C0D                     __ptext15:	
  3603 ;; *************** function _LCD_Init *****************
  3604 ;; Defined at:
  3605 ;;		line 87 in file "C:\Users\332414\Desktop\FyzzySI\firmware\lcd.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3619 ;;      Params:         0       0       0       0       0
  3620 ;;      Locals:         0       0       0       0       0
  3621 ;;      Temps:          0       0       2       0       0
  3622 ;;      Totals:         0       0       2       0       0
  3623 ;;Total ram usage:        2 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    5
  3626 ;; This function calls:
  3627 ;;		_LCD_WriteCmd
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _LCD_Init
  3635  0C0D                     _LCD_Init:	
  3636                           
  3637                           ;lcd.c: 90: ADCON1bits.PCFG3 = 0;
  3638                           
  3639                           ;incstack = 0
  3640                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  3641  0C0D  1683               	bsf	3,5	;RP0=1, select bank1
  3642  0C0E  1303               	bcf	3,6	;RP1=0, select bank1
  3643  0C0F  119F               	bcf	31,3	;volatile
  3644                           
  3645                           ;lcd.c: 91: ADCON1bits.PCFG2 = 1;
  3646  0C10  151F               	bsf	31,2	;volatile
  3647                           
  3648                           ;lcd.c: 92: ADCON1bits.PCFG1 = 0;
  3649  0C11  109F               	bcf	31,1	;volatile
  3650                           
  3651                           ;lcd.c: 93: ADCON1bits.PCFG0 = 0;
  3652  0C12  101F               	bcf	31,0	;volatile
  3653                           
  3654                           ;lcd.c: 95: _delay((unsigned long)((15)*(18432000/4000.0)));
  3655  0C13  305A               	movlw	90
  3656  0C14  00CC               	movwf	(??_LCD_Init^(0+128)+1)
  3657  0C15  30C3               	movlw	195
  3658  0C16  00CB               	movwf	??_LCD_Init^(0+128)
  3659  0C17                     u3497:	
  3660  0C17  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3661  0C18  2C17               	goto	u3497
  3662  0C19  0BCC               	decfsz	(??_LCD_Init^(0+128)+1),f
  3663  0C1A  2C17               	goto	u3497
  3664                           
  3665                           ;lcd.c: 97: LCD_WriteCmd(0x30);
  3666  0C1B  3030               	movlw	48
  3667  0C1C  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3668                           
  3669                           ;lcd.c: 98: _delay((unsigned long)((4)*(18432000/4000.0)));
  3670  0C21  3018               	movlw	24
  3671  0C22  1683               	bsf	3,5	;RP0=1, select bank1
  3672  0C23  1303               	bcf	3,6	;RP1=0, select bank1
  3673  0C24  00CC               	movwf	(??_LCD_Init^(0+128)+1)
  3674  0C25  30EF               	movlw	239
  3675  0C26  00CB               	movwf	??_LCD_Init^(0+128)
  3676  0C27                     u3507:	
  3677  0C27  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3678  0C28  2C27               	goto	u3507
  3679  0C29  0BCC               	decfsz	(??_LCD_Init^(0+128)+1),f
  3680  0C2A  2C27               	goto	u3507
  3681                           
  3682                           ;lcd.c: 100: LCD_WriteCmd(0x30);
  3683  0C2B  3030               	movlw	48
  3684  0C2C  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3685                           
  3686                           ;lcd.c: 101: _delay((unsigned long)((100)*(18432000/4000000.0)));
  3687  0C31  3099               	movlw	153
  3688  0C32  1683               	bsf	3,5	;RP0=1, select bank1
  3689  0C33  1303               	bcf	3,6	;RP1=0, select bank1
  3690  0C34  00CB               	movwf	??_LCD_Init^(0+128)
  3691  0C35                     u3517:	
  3692  0C35  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3693  0C36  2C35               	goto	u3517
  3694                           
  3695                           ;lcd.c: 103: LCD_WriteCmd(0x30);
  3696  0C37  3030               	movlw	48
  3697  0C38  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3698                           
  3699                           ;lcd.c: 104: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3700  0C3D  303D               	movlw	61
  3701  0C3E  1683               	bsf	3,5	;RP0=1, select bank1
  3702  0C3F  1303               	bcf	3,6	;RP1=0, select bank1
  3703  0C40  00CB               	movwf	??_LCD_Init^(0+128)
  3704  0C41                     u3527:	
  3705  0C41  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3706  0C42  2C41               	goto	u3527
  3707                           
  3708                           ;lcd.c: 106: LCD_WriteCmd(0x38);
  3709  0C43  3038               	movlw	56
  3710  0C44  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3711                           
  3712                           ;lcd.c: 107: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3713  0C49  303D               	movlw	61
  3714  0C4A  1683               	bsf	3,5	;RP0=1, select bank1
  3715  0C4B  1303               	bcf	3,6	;RP1=0, select bank1
  3716  0C4C  00CB               	movwf	??_LCD_Init^(0+128)
  3717  0C4D                     u3537:	
  3718  0C4D  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3719  0C4E  2C4D               	goto	u3537
  3720                           
  3721                           ;lcd.c: 109: LCD_WriteCmd(0x01);
  3722  0C4F  3001               	movlw	1
  3723  0C50  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3724                           
  3725                           ;lcd.c: 110: _delay((unsigned long)((2)*(18432000/4000.0)));
  3726  0C55  300C               	movlw	12
  3727  0C56  1683               	bsf	3,5	;RP0=1, select bank1
  3728  0C57  1303               	bcf	3,6	;RP1=0, select bank1
  3729  0C58  00CC               	movwf	(??_LCD_Init^(0+128)+1)
  3730  0C59  30F7               	movlw	247
  3731  0C5A  00CB               	movwf	??_LCD_Init^(0+128)
  3732  0C5B                     u3547:	
  3733  0C5B  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3734  0C5C  2C5B               	goto	u3547
  3735  0C5D  0BCC               	decfsz	(??_LCD_Init^(0+128)+1),f
  3736  0C5E  2C5B               	goto	u3547
  3737                           
  3738                           ;lcd.c: 112: LCD_WriteCmd(0x0C);
  3739  0C5F  300C               	movlw	12
  3740  0C60  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3741                           
  3742                           ;lcd.c: 113: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3743  0C65  303D               	movlw	61
  3744  0C66  1683               	bsf	3,5	;RP0=1, select bank1
  3745  0C67  1303               	bcf	3,6	;RP1=0, select bank1
  3746  0C68  00CB               	movwf	??_LCD_Init^(0+128)
  3747  0C69                     u3557:	
  3748  0C69  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3749  0C6A  2C69               	goto	u3557
  3750                           
  3751                           ;lcd.c: 115: LCD_WriteCmd(0x06);
  3752  0C6B  3006               	movlw	6
  3753  0C6C  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3754                           
  3755                           ;lcd.c: 116: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3756  0C71  303D               	movlw	61
  3757  0C72  1683               	bsf	3,5	;RP0=1, select bank1
  3758  0C73  1303               	bcf	3,6	;RP1=0, select bank1
  3759  0C74  00CB               	movwf	??_LCD_Init^(0+128)
  3760  0C75                     u3567:	
  3761  0C75  0BCB               	decfsz	??_LCD_Init^(0+128),f
  3762  0C76  2C75               	goto	u3567
  3763  0C77  0008               	return
  3764  0C78                     __end_of_LCD_Init:	
  3765                           
  3766                           	psect	text16
  3767  0940                     __ptext16:	
  3768 ;; *************** function _LCD_Cursor *****************
  3769 ;; Defined at:
  3770 ;;		line 10 in file "C:\Users\332414\Desktop\FyzzySI\firmware\lcd.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  Row             1    wreg     unsigned char 
  3773 ;;  Col             1    0[BANK1 ] unsigned char 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  Row             1    2[BANK1 ] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;		None               void
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3785 ;;      Params:         0       0       1       0       0
  3786 ;;      Locals:         0       0       1       0       0
  3787 ;;      Temps:          0       0       1       0       0
  3788 ;;      Totals:         0       0       3       0       0
  3789 ;;Total ram usage:        3 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    4
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _LCD_Cursor
  3801  0940                     _LCD_Cursor:	
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _LCD_Cursor: [wreg+status,2+status,0]
  3805                           ;LCD_Cursor@Row stored from wreg
  3806  0940  1683               	bsf	3,5	;RP0=1, select bank1
  3807  0941  1303               	bcf	3,6	;RP1=0, select bank1
  3808  0942  00CB               	movwf	LCD_Cursor@Row^(0+128)
  3809                           
  3810                           ;lcd.c: 12: PORTEbits.RE0 = 0;
  3811  0943  1283               	bcf	3,5	;RP0=0, select bank0
  3812  0944  1303               	bcf	3,6	;RP1=0, select bank0
  3813  0945  1009               	bcf	9,0	;volatile
  3814                           
  3815                           ;lcd.c: 14: if (Row == 0)
  3816  0946  1683               	bsf	3,5	;RP0=1, select bank1
  3817  0947  1303               	bcf	3,6	;RP1=0, select bank1
  3818  0948  08CB               	movf	LCD_Cursor@Row^(0+128),f
  3819  0949  1D03               	skipz
  3820  094A  294E               	goto	l2539
  3821                           
  3822                           ;lcd.c: 15: {
  3823                           ;lcd.c: 16: PORTD = 0x80 + Col;
  3824  094B  0849               	movf	LCD_Cursor@Col^(0+128),w
  3825  094C  3E80               	addlw	128
  3826  094D  2952               	goto	L2
  3827  094E                     l2539:	
  3828                           ;lcd.c: 17: }
  3829                           
  3830                           
  3831                           ;lcd.c: 18: else
  3832                           ;lcd.c: 19: {
  3833                           ;lcd.c: 20: PORTD = 0xC0 + Col;
  3834  094E  1683               	bsf	3,5	;RP0=1, select bank1
  3835  094F  1303               	bcf	3,6	;RP1=0, select bank1
  3836  0950  0849               	movf	LCD_Cursor@Col^(0+128),w
  3837  0951  3EC0               	addlw	192
  3838  0952                     L2:	
  3839  0952  1283               	bcf	3,5	;RP0=0, select bank0
  3840  0953  1303               	bcf	3,6	;RP1=0, select bank0
  3841  0954  0088               	movwf	8	;volatile
  3842                           
  3843                           ;lcd.c: 21: }
  3844                           ;lcd.c: 24: PORTEbits.RE1 = 1;
  3845  0955  1489               	bsf	9,1	;volatile
  3846                           
  3847                           ;lcd.c: 26: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3848  0956  303D               	movlw	61
  3849  0957  1683               	bsf	3,5	;RP0=1, select bank1
  3850  0958  1303               	bcf	3,6	;RP1=0, select bank1
  3851  0959  00CA               	movwf	??_LCD_Cursor^(0+128)
  3852  095A                     u3577:	
  3853  095A  0BCA               	decfsz	??_LCD_Cursor^(0+128),f
  3854  095B  295A               	goto	u3577
  3855                           
  3856                           ;lcd.c: 28: PORTEbits.RE1 = 0;
  3857  095C  1283               	bcf	3,5	;RP0=0, select bank0
  3858  095D  1303               	bcf	3,6	;RP1=0, select bank0
  3859  095E  1089               	bcf	9,1	;volatile
  3860  095F  0008               	return
  3861  0960                     __end_of_LCD_Cursor:	
  3862                           
  3863                           	psect	text17
  3864  0A2F                     __ptext17:	
  3865 ;; *************** function _LCD_Clear *****************
  3866 ;; Defined at:
  3867 ;;		line 71 in file "C:\Users\332414\Desktop\FyzzySI\firmware\lcd.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;		None
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;		None
  3872 ;; Return value:  Size  Location     Type
  3873 ;;		None               void
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0, pclath, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3881 ;;      Params:         0       0       0       0       0
  3882 ;;      Locals:         0       0       0       0       0
  3883 ;;      Temps:          0       0       2       0       0
  3884 ;;      Totals:         0       0       2       0       0
  3885 ;;Total ram usage:        2 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    5
  3888 ;; This function calls:
  3889 ;;		_LCD_WriteCmd
  3890 ;; This function is called by:
  3891 ;;		_main
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           
  3896                           ;psect for function _LCD_Clear
  3897  0A2F                     _LCD_Clear:	
  3898                           
  3899                           ;lcd.c: 73: LCD_WriteCmd(0x01);
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  3903  0A2F  3001               	movlw	1
  3904  0A30  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3905                           
  3906                           ;lcd.c: 75: _delay((unsigned long)((2)*(18432000/4000.0)));
  3907  0A35  300C               	movlw	12
  3908  0A36  1683               	bsf	3,5	;RP0=1, select bank1
  3909  0A37  1303               	bcf	3,6	;RP1=0, select bank1
  3910  0A38  00CC               	movwf	(??_LCD_Clear^(0+128)+1)
  3911  0A39  30F7               	movlw	247
  3912  0A3A  00CB               	movwf	??_LCD_Clear^(0+128)
  3913  0A3B                     u3587:	
  3914  0A3B  0BCB               	decfsz	??_LCD_Clear^(0+128),f
  3915  0A3C  2A3B               	goto	u3587
  3916  0A3D  0BCC               	decfsz	(??_LCD_Clear^(0+128)+1),f
  3917  0A3E  2A3B               	goto	u3587
  3918                           
  3919                           ;lcd.c: 77: LCD_WriteCmd(0x0C);
  3920  0A3F  300C               	movlw	12
  3921  0A40  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3922                           
  3923                           ;lcd.c: 79: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3924  0A45  303D               	movlw	61
  3925  0A46  1683               	bsf	3,5	;RP0=1, select bank1
  3926  0A47  1303               	bcf	3,6	;RP1=0, select bank1
  3927  0A48  00CB               	movwf	??_LCD_Clear^(0+128)
  3928  0A49                     u3597:	
  3929  0A49  0BCB               	decfsz	??_LCD_Clear^(0+128),f
  3930  0A4A  2A49               	goto	u3597
  3931                           
  3932                           ;lcd.c: 81: LCD_WriteCmd(0x06);
  3933  0A4B  3006               	movlw	6
  3934  0A4C  120A  158A  20C3  120A  158A  	fcall	_LCD_WriteCmd
  3935                           
  3936                           ;lcd.c: 83: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3937  0A51  303D               	movlw	61
  3938  0A52  1683               	bsf	3,5	;RP0=1, select bank1
  3939  0A53  1303               	bcf	3,6	;RP1=0, select bank1
  3940  0A54  00CB               	movwf	??_LCD_Clear^(0+128)
  3941  0A55                     u3607:	
  3942  0A55  0BCB               	decfsz	??_LCD_Clear^(0+128),f
  3943  0A56  2A55               	goto	u3607
  3944  0A57  0008               	return
  3945  0A58                     __end_of_LCD_Clear:	
  3946                           
  3947                           	psect	text18
  3948  08C3                     __ptext18:	
  3949 ;; *************** function _LCD_WriteCmd *****************
  3950 ;; Defined at:
  3951 ;;		line 32 in file "C:\Users\332414\Desktop\FyzzySI\firmware\lcd.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  Byte            1    wreg     unsigned char 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;  Byte            1    1[BANK1 ] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;		None               void
  3958 ;; Registers used:
  3959 ;;		wreg
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3965 ;;      Params:         0       0       0       0       0
  3966 ;;      Locals:         0       0       1       0       0
  3967 ;;      Temps:          0       0       1       0       0
  3968 ;;      Totals:         0       0       2       0       0
  3969 ;;Total ram usage:        2 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    4
  3972 ;; This function calls:
  3973 ;;		Nothing
  3974 ;; This function is called by:
  3975 ;;		_LCD_Clear
  3976 ;;		_LCD_Init
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _LCD_WriteCmd
  3982  08C3                     _LCD_WriteCmd:	
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _LCD_WriteCmd: [wreg]
  3986                           ;LCD_WriteCmd@Byte stored from wreg
  3987  08C3  1683               	bsf	3,5	;RP0=1, select bank1
  3988  08C4  1303               	bcf	3,6	;RP1=0, select bank1
  3989  08C5  00CA               	movwf	LCD_WriteCmd@Byte^(0+128)
  3990                           
  3991                           ;lcd.c: 34: PORTEbits.RE0 = 0;
  3992  08C6  1283               	bcf	3,5	;RP0=0, select bank0
  3993  08C7  1303               	bcf	3,6	;RP1=0, select bank0
  3994  08C8  1009               	bcf	9,0	;volatile
  3995                           
  3996                           ;lcd.c: 36: PORTD = Byte;
  3997  08C9  1683               	bsf	3,5	;RP0=1, select bank1
  3998  08CA  1303               	bcf	3,6	;RP1=0, select bank1
  3999  08CB  084A               	movf	LCD_WriteCmd@Byte^(0+128),w
  4000  08CC  1283               	bcf	3,5	;RP0=0, select bank0
  4001  08CD  1303               	bcf	3,6	;RP1=0, select bank0
  4002  08CE  0088               	movwf	8	;volatile
  4003                           
  4004                           ;lcd.c: 39: PORTEbits.RE1 = 1;
  4005  08CF  1489               	bsf	9,1	;volatile
  4006                           
  4007                           ;lcd.c: 41: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4008  08D0  303D               	movlw	61
  4009  08D1  1683               	bsf	3,5	;RP0=1, select bank1
  4010  08D2  1303               	bcf	3,6	;RP1=0, select bank1
  4011  08D3  00C9               	movwf	??_LCD_WriteCmd^(0+128)
  4012  08D4                     u3617:	
  4013  08D4  0BC9               	decfsz	??_LCD_WriteCmd^(0+128),f
  4014  08D5  28D4               	goto	u3617
  4015                           
  4016                           ;lcd.c: 43: PORTEbits.RE1 = 0;
  4017  08D6  1283               	bcf	3,5	;RP0=0, select bank0
  4018  08D7  1303               	bcf	3,6	;RP1=0, select bank0
  4019  08D8  1089               	bcf	9,1	;volatile
  4020  08D9  0008               	return
  4021  08DA                     __end_of_LCD_WriteCmd:	
  4022                           
  4023                           	psect	text19
  4024  089D                     __ptext19:	
  4025 ;; *************** function _ADC_Init *****************
  4026 ;; Defined at:
  4027 ;;		line 6 in file "C:\Users\332414\Desktop\FyzzySI\firmware\adc.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;		None               void
  4034 ;; Registers used:
  4035 ;;		None
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4041 ;;      Params:         0       0       0       0       0
  4042 ;;      Locals:         0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0
  4044 ;;      Totals:         0       0       0       0       0
  4045 ;;Total ram usage:        0 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    4
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_main
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _ADC_Init
  4057  089D                     _ADC_Init:	
  4058                           
  4059                           ;adc.c: 9: ADCON1bits.ADFM = 1;
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _ADC_Init: []
  4063  089D  1683               	bsf	3,5	;RP0=1, select bank1
  4064  089E  1303               	bcf	3,6	;RP1=0, select bank1
  4065  089F  179F               	bsf	31,7	;volatile
  4066                           
  4067                           ;adc.c: 32: ADCON1bits.PCFG3 = 1;
  4068  08A0  159F               	bsf	31,3	;volatile
  4069                           
  4070                           ;adc.c: 33: ADCON1bits.PCFG2 = 1;
  4071  08A1  151F               	bsf	31,2	;volatile
  4072                           
  4073                           ;adc.c: 34: ADCON1bits.PCFG1 = 1;
  4074  08A2  149F               	bsf	31,1	;volatile
  4075                           
  4076                           ;adc.c: 35: ADCON1bits.PCFG0 = 0;
  4077  08A3  101F               	bcf	31,0	;volatile
  4078                           
  4079                           ;adc.c: 38: ADCON0bits.ADCS1 = 1;
  4080  08A4  1283               	bcf	3,5	;RP0=0, select bank0
  4081  08A5  1303               	bcf	3,6	;RP1=0, select bank0
  4082  08A6  179F               	bsf	31,7	;volatile
  4083                           
  4084                           ;adc.c: 39: ADCON0bits.ADCS0 = 0;
  4085  08A7  131F               	bcf	31,6	;volatile
  4086                           
  4087                           ;adc.c: 42: PIE1bits.ADIE = 0;
  4088  08A8  1683               	bsf	3,5	;RP0=1, select bank1
  4089  08A9  1303               	bcf	3,6	;RP1=0, select bank1
  4090  08AA  130C               	bcf	12,6	;volatile
  4091                           
  4092                           ;adc.c: 43: PIR1bits.ADIF = 0;
  4093  08AB  1283               	bcf	3,5	;RP0=0, select bank0
  4094  08AC  1303               	bcf	3,6	;RP1=0, select bank0
  4095  08AD  130C               	bcf	12,6	;volatile
  4096  08AE  0008               	return
  4097  08AF                     __end_of_ADC_Init:	
  4098                           
  4099                           	psect	text20
  4100  0037                     __ptext20:	
  4101 ;; *************** function _ISR *****************
  4102 ;; Defined at:
  4103 ;;		line 101 in file "C:\Users\332414\Desktop\FyzzySI\firmware\main.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;		None
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;  index           1   79[BANK0 ] unsigned char 
  4108 ;;  checksum        1   74[BANK0 ] unsigned char 
  4109 ;;  byte            1   78[BANK0 ] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;		None               void
  4112 ;; Registers used:
  4113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4119 ;;      Params:         0       0       0       0       0
  4120 ;;      Locals:         0      12       0       0       0
  4121 ;;      Temps:          0       6       0       0       0
  4122 ;;      Totals:         0      18       0       0       0
  4123 ;;Total ram usage:       18 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    3
  4126 ;; This function calls:
  4127 ;;		_USART_ReceiveChar
  4128 ;;		___awtoft
  4129 ;;		___ftadd
  4130 ;;		___ftdiv
  4131 ;;		___ftge
  4132 ;;		___ftmul
  4133 ;;		___ftneg
  4134 ;;		___fttol
  4135 ;;		___lwtoft
  4136 ;;		_send
  4137 ;;		_trimf
  4138 ;;		i1_PWM_DutyCycle2
  4139 ;;		i1_TIMER0_Set
  4140 ;;		i1___wmul
  4141 ;; This function is called by:
  4142 ;;		Interrupt level 1
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           
  4147                           ;psect for function _ISR
  4148  0037                     _ISR:	
  4149                           
  4150                           ;main.c: 104: if (PIR1bits.RCIF)
  4151  0037  1E8C               	btfss	12,5	;volatile
  4152  0038  28D4               	goto	i1l2855
  4153                           
  4154                           ;main.c: 105: {
  4155                           ;main.c: 106: unsigned char byte = USART_ReceiveChar();
  4156  0039  120A  158A  20F1  120A  118A  	fcall	_USART_ReceiveChar
  4157  003E  1283               	bcf	3,5	;RP0=0, select bank0
  4158  003F  1303               	bcf	3,6	;RP1=0, select bank0
  4159  0040  00DE               	movwf	??_ISR
  4160  0041  085E               	movf	??_ISR,w
  4161  0042  00EE               	movwf	ISR@byte
  4162                           
  4163                           ;main.c: 107: if (byte == '#')
  4164  0043  086E               	movf	ISR@byte,w
  4165  0044  3A23               	xorlw	35
  4166  0045  1D03               	skipz
  4167  0046  284C               	goto	i1l2815
  4168                           
  4169                           ;main.c: 108: {
  4170                           ;main.c: 109: receiveIndex = 0;
  4171  0047  1683               	bsf	3,5	;RP0=1, select bank1
  4172  0048  1303               	bcf	3,6	;RP1=0, select bank1
  4173  0049  01BC               	clrf	_receiveIndex^(0+128)
  4174  004A  01BD               	clrf	(_receiveIndex+1)^(0+128)
  4175                           
  4176                           ;main.c: 110: } else {
  4177  004B  2854               	goto	i1l2817
  4178  004C                     i1l2815:	
  4179                           
  4180                           ;main.c: 111: receiveIndex++;
  4181  004C  3001               	movlw	1
  4182  004D  1683               	bsf	3,5	;RP0=1, select bank1
  4183  004E  1303               	bcf	3,6	;RP1=0, select bank1
  4184  004F  07BC               	addwf	_receiveIndex^(0+128),f
  4185  0050  1803               	skipnc
  4186  0051  0ABD               	incf	(_receiveIndex+1)^(0+128),f
  4187  0052  3000               	movlw	0
  4188  0053  07BD               	addwf	(_receiveIndex+1)^(0+128),f
  4189  0054                     i1l2817:	
  4190                           
  4191                           ;main.c: 112: }
  4192                           ;main.c: 113: receivedBuffer[receiveIndex] = byte;
  4193  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4194  0055  1303               	bcf	3,6	;RP1=0, select bank0
  4195  0056  086E               	movf	ISR@byte,w
  4196  0057  00DE               	movwf	??_ISR
  4197  0058  1683               	bsf	3,5	;RP0=1, select bank1
  4198  0059  1303               	bcf	3,6	;RP1=0, select bank1
  4199  005A  083C               	movf	_receiveIndex^(0+128),w
  4200  005B  3E97               	addlw	_receivedBuffer& (0+255)
  4201  005C  0084               	movwf	4
  4202  005D  1283               	bcf	3,5	;RP0=0, select bank0
  4203  005E  1303               	bcf	3,6	;RP1=0, select bank0
  4204  005F  085E               	movf	??_ISR,w
  4205  0060  1783               	bsf	3,7	;select IRP bank3
  4206  0061  0080               	movwf	0
  4207                           
  4208                           ;main.c: 115: if (receiveIndex >= 6) {
  4209  0062  1683               	bsf	3,5	;RP0=1, select bank1
  4210  0063  1303               	bcf	3,6	;RP1=0, select bank1
  4211  0064  083D               	movf	(_receiveIndex+1)^(0+128),w
  4212  0065  3A80               	xorlw	128
  4213  0066  00FF               	movwf	127
  4214  0067  3080               	movlw	128
  4215  0068  027F               	subwf	127,w
  4216  0069  1D03               	skipz
  4217  006A  286D               	goto	u325_25
  4218  006B  3006               	movlw	6
  4219  006C  023C               	subwf	_receiveIndex^(0+128),w
  4220  006D                     u325_25:	
  4221  006D  1C03               	skipc
  4222  006E  28D1               	goto	i1l2853
  4223                           
  4224                           ;main.c: 116: receiveIndex = 0;
  4225  006F  1683               	bsf	3,5	;RP0=1, select bank1
  4226  0070  1303               	bcf	3,6	;RP1=0, select bank1
  4227  0071  01BC               	clrf	_receiveIndex^(0+128)
  4228  0072  01BD               	clrf	(_receiveIndex+1)^(0+128)
  4229                           
  4230                           ;main.c: 118: if (receivedBuffer[1] == 'A' || receivedBuffer[2] == 'A' || receivedBuffer
      +                          [3] == 'A') {
  4231  0073  1683               	bsf	3,5	;RP0=1, select bank3
  4232  0074  1703               	bsf	3,6	;RP1=1, select bank3
  4233  0075  0818               	movf	(_receivedBuffer^(0+384)+1),w
  4234  0076  3A41               	xorlw	65
  4235  0077  1903               	skipnz
  4236  0078  2881               	goto	i1l2829
  4237  0079  0819               	movf	(_receivedBuffer^(0+384)+2),w
  4238  007A  3A41               	xorlw	65
  4239  007B  1903               	skipnz
  4240  007C  2881               	goto	i1l2829
  4241  007D  081A               	movf	(_receivedBuffer^(0+384)+3),w
  4242  007E  3A41               	xorlw	65
  4243  007F  1D03               	skipz
  4244  0080  2887               	goto	i1l2831
  4245  0081                     i1l2829:	
  4246                           
  4247                           ;main.c: 119: send();
  4248  0081  120A  118A  27B2  120A  118A  	fcall	_send
  4249                           
  4250                           ;main.c: 120: } else if (receivedBuffer[0] == '#' && receivedBuffer[1] == '$' && receive
      +                          dBuffer[2] == ':') {
  4251  0086  28D1               	goto	i1l2853
  4252  0087                     i1l2831:	
  4253  0087  1683               	bsf	3,5	;RP0=1, select bank3
  4254  0088  1703               	bsf	3,6	;RP1=1, select bank3
  4255  0089  0817               	movf	_receivedBuffer^(0+384),w
  4256  008A  3A23               	xorlw	35
  4257  008B  1D03               	skipz
  4258  008C  28D1               	goto	i1l2853
  4259  008D  0818               	movf	(_receivedBuffer^(0+384)+1),w
  4260  008E  3A24               	xorlw	36
  4261  008F  1D03               	skipz
  4262  0090  28D1               	goto	i1l2853
  4263  0091  0819               	movf	(_receivedBuffer^(0+384)+2),w
  4264  0092  3A3A               	xorlw	58
  4265  0093  1D03               	skipz
  4266  0094  28D1               	goto	i1l2853
  4267                           
  4268                           ;main.c: 121: unsigned char checksum = 0x00;
  4269  0095  1283               	bcf	3,5	;RP0=0, select bank0
  4270  0096  1303               	bcf	3,6	;RP1=0, select bank0
  4271  0097  01EA               	clrf	ISR@checksum
  4272                           
  4273                           ;main.c: 122: for (unsigned char index = 0; index < 6; index++) {
  4274  0098  01EF               	clrf	ISR@index
  4275  0099  3006               	movlw	6
  4276  009A  026F               	subwf	ISR@index,w
  4277  009B  1803               	btfsc	3,0
  4278  009C  28AD               	goto	i1l2849
  4279  009D                     i1l2843:	
  4280                           
  4281                           ;main.c: 123: checksum ^= receivedBuffer[index];
  4282  009D  086F               	movf	ISR@index,w
  4283  009E  3E97               	addlw	_receivedBuffer& (0+255)
  4284  009F  0084               	movwf	4
  4285  00A0  1783               	bsf	3,7	;select IRP bank3
  4286  00A1  0800               	movf	0,w
  4287  00A2  00DE               	movwf	??_ISR
  4288  00A3  085E               	movf	??_ISR,w
  4289  00A4  06EA               	xorwf	ISR@checksum,f
  4290  00A5  3001               	movlw	1
  4291  00A6  00DE               	movwf	??_ISR
  4292  00A7  085E               	movf	??_ISR,w
  4293  00A8  07EF               	addwf	ISR@index,f
  4294  00A9  3006               	movlw	6
  4295  00AA  026F               	subwf	ISR@index,w
  4296  00AB  1C03               	skipc
  4297  00AC  289D               	goto	i1l2843
  4298  00AD                     i1l2849:	
  4299                           
  4300                           ;main.c: 124: }
  4301                           ;main.c: 126: if (receivedBuffer[6] == checksum) {
  4302  00AD  1683               	bsf	3,5	;RP0=1, select bank3
  4303  00AE  1703               	bsf	3,6	;RP1=1, select bank3
  4304  00AF  081D               	movf	(_receivedBuffer^(0+384)+6),w
  4305  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  4306  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  4307  00B2  066A               	xorwf	ISR@checksum,w
  4308  00B3  1D03               	skipz
  4309  00B4  28D1               	goto	i1l2853
  4310                           
  4311                           ;main.c: 127: setpoint = (receivedBuffer[3] << 8) + (receivedBuffer[4]);
  4312  00B5  1683               	bsf	3,5	;RP0=1, select bank3
  4313  00B6  1703               	bsf	3,6	;RP1=1, select bank3
  4314  00B7  081A               	movf	(_receivedBuffer^(0+384)+3),w
  4315  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  4316  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  4317  00BA  00DE               	movwf	??_ISR
  4318  00BB  01DF               	clrf	??_ISR+1
  4319  00BC  085E               	movf	??_ISR,w
  4320  00BD  00DF               	movwf	??_ISR+1
  4321  00BE  01DE               	clrf	??_ISR
  4322  00BF  1683               	bsf	3,5	;RP0=1, select bank3
  4323  00C0  1703               	bsf	3,6	;RP1=1, select bank3
  4324  00C1  081B               	movf	(_receivedBuffer^(0+384)+4),w
  4325  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  4326  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  4327  00C4  075E               	addwf	??_ISR,w
  4328  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  4329  00C6  1303               	bcf	3,6	;RP1=0, select bank1
  4330  00C7  00C0               	movwf	_setpoint^(0+128)
  4331  00C8  3000               	movlw	0
  4332  00C9  1803               	skipnc
  4333  00CA  3001               	movlw	1
  4334  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  4335  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  4336  00CD  075F               	addwf	??_ISR+1,w
  4337  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  4338  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  4339  00D0  00C1               	movwf	(_setpoint+1)^(0+128)
  4340  00D1                     i1l2853:	
  4341                           
  4342                           ;main.c: 128: }
  4343                           ;main.c: 132: }
  4344                           ;main.c: 135: }
  4345                           ;main.c: 138: PIR1bits.RCIF = 0;
  4346  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  4347  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  4348  00D3  128C               	bcf	12,5	;volatile
  4349  00D4                     i1l2855:	
  4350                           
  4351                           ;main.c: 139: }
  4352                           ;main.c: 142: if (PIR1bits.ADIF)
  4353  00D4  1B0C               	btfsc	12,6	;volatile
  4354                           
  4355                           ;main.c: 143: {
  4356                           ;main.c: 147: PIR1bits.ADIF = 0;
  4357  00D5  130C               	bcf	12,6	;volatile
  4358                           
  4359                           ;main.c: 148: }
  4360                           ;main.c: 152: if (INTCONbits.T0IF)
  4361  00D6  1D0B               	btfss	11,2	;volatile
  4362  00D7  2BBF               	goto	i1l2933
  4363                           
  4364                           ;main.c: 153: {
  4365                           ;main.c: 155: TIMER0_Set(238);
  4366  00D8  30EE               	movlw	238
  4367  00D9  160A  118A  27FA  120A  118A  	fcall	i1_TIMER0_Set
  4368                           
  4369                           ;main.c: 158: if (contagens_tm0 < 499)
  4370  00DE  3001               	movlw	1
  4371  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  4372  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  4373  00E1  0231               	subwf	(_contagens_tm0+1)^(0+128),w
  4374  00E2  30F3               	movlw	243
  4375  00E3  1903               	skipnz
  4376  00E4  0230               	subwf	_contagens_tm0^(0+128),w
  4377  00E5  1803               	skipnc
  4378  00E6  28F1               	goto	i1l2867
  4379                           
  4380                           ;main.c: 159: {
  4381                           ;main.c: 161: contagens_tm0++;
  4382  00E7  3001               	movlw	1
  4383  00E8  07B0               	addwf	_contagens_tm0^(0+128),f
  4384  00E9  1803               	skipnc
  4385  00EA  0AB1               	incf	(_contagens_tm0+1)^(0+128),f
  4386  00EB  3000               	movlw	0
  4387  00EC  07B1               	addwf	(_contagens_tm0+1)^(0+128),f
  4388                           
  4389                           ;main.c: 164: PORTBbits.RB6 = 1;
  4390  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  4391  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  4392  00EF  1706               	bsf	6,6	;volatile
  4393                           
  4394                           ;main.c: 165: }
  4395  00F0  2BBE               	goto	i1l2931
  4396  00F1                     i1l2867:	
  4397                           
  4398                           ;main.c: 166: else
  4399                           ;main.c: 167: {
  4400                           ;main.c: 169: contagens_tm0 = 0;
  4401  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  4402  00F2  1303               	bcf	3,6	;RP1=0, select bank1
  4403  00F3  01B0               	clrf	_contagens_tm0^(0+128)
  4404  00F4  01B1               	clrf	(_contagens_tm0+1)^(0+128)
  4405                           
  4406                           ;main.c: 172: pulsos = (TMR1H << 8) + TMR1L;
  4407  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  4408  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  4409  00F7  080F               	movf	15,w	;volatile
  4410  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  4411  00F9  1303               	bcf	3,6	;RP1=0, select bank1
  4412  00FA  01B9               	clrf	(_pulsos+1)^(0+128)
  4413  00FB  07B9               	addwf	(_pulsos+1)^(0+128),f
  4414  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  4415  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  4416  00FE  080E               	movf	14,w	;volatile
  4417  00FF  1683               	bsf	3,5	;RP0=1, select bank1
  4418  0100  1303               	bcf	3,6	;RP1=0, select bank1
  4419  0101  01B8               	clrf	_pulsos^(0+128)
  4420  0102  07B8               	addwf	_pulsos^(0+128),f
  4421                           
  4422                           ;main.c: 173: rpm = ((pulsos / 7.0) * 120);
  4423  0103  0839               	movf	(_pulsos+1)^(0+128),w
  4424  0104  01F9               	clrf	___lwtoft@c+1
  4425  0105  07F9               	addwf	___lwtoft@c+1,f
  4426  0106  0838               	movf	_pulsos^(0+128),w
  4427  0107  01F8               	clrf	___lwtoft@c
  4428  0108  07F8               	addwf	___lwtoft@c,f
  4429  0109  120A  158A  20AF  120A  118A  	fcall	___lwtoft
  4430  010E  0878               	movf	?___lwtoft,w
  4431  010F  1283               	bcf	3,5	;RP0=0, select bank0
  4432  0110  1303               	bcf	3,6	;RP1=0, select bank0
  4433  0111  00B3               	movwf	___ftdiv@f1
  4434  0112  0879               	movf	?___lwtoft+1,w
  4435  0113  00B4               	movwf	___ftdiv@f1+1
  4436  0114  087A               	movf	?___lwtoft+2,w
  4437  0115  00B5               	movwf	___ftdiv@f1+2
  4438  0116  3000               	movlw	0
  4439  0117  00B0               	movwf	___ftdiv@f2
  4440  0118  30E0               	movlw	224
  4441  0119  00B1               	movwf	___ftdiv@f2+1
  4442  011A  3040               	movlw	64
  4443  011B  00B2               	movwf	___ftdiv@f2+2
  4444  011C  120A  158A  2595  120A  118A  	fcall	___ftdiv
  4445  0121  1283               	bcf	3,5	;RP0=0, select bank0
  4446  0122  1303               	bcf	3,6	;RP1=0, select bank0
  4447  0123  0830               	movf	?___ftdiv,w
  4448  0124  00C3               	movwf	___ftmul@f2
  4449  0125  0831               	movf	?___ftdiv+1,w
  4450  0126  00C4               	movwf	___ftmul@f2+1
  4451  0127  0832               	movf	?___ftdiv+2,w
  4452  0128  00C5               	movwf	___ftmul@f2+2
  4453  0129  3000               	movlw	0
  4454  012A  00C0               	movwf	___ftmul@f1
  4455  012B  30F0               	movlw	240
  4456  012C  00C1               	movwf	___ftmul@f1+1
  4457  012D  3042               	movlw	66
  4458  012E  00C2               	movwf	___ftmul@f1+2
  4459  012F  120A  158A  264D  120A  118A  	fcall	___ftmul
  4460  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4461  0135  1303               	bcf	3,6	;RP1=0, select bank0
  4462  0136  0840               	movf	?___ftmul,w
  4463  0137  00D0               	movwf	___fttol@f1
  4464  0138  0841               	movf	?___ftmul+1,w
  4465  0139  00D1               	movwf	___fttol@f1+1
  4466  013A  0842               	movf	?___ftmul+2,w
  4467  013B  00D2               	movwf	___fttol@f1+2
  4468  013C  120A  158A  2478  120A  118A  	fcall	___fttol
  4469  0141  1283               	bcf	3,5	;RP0=0, select bank0
  4470  0142  1303               	bcf	3,6	;RP1=0, select bank0
  4471  0143  0851               	movf	?___fttol+1,w
  4472  0144  1683               	bsf	3,5	;RP0=1, select bank1
  4473  0145  1303               	bcf	3,6	;RP1=0, select bank1
  4474  0146  01BF               	clrf	(_rpm+1)^(0+128)
  4475  0147  07BF               	addwf	(_rpm+1)^(0+128),f
  4476  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4477  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4478  014A  0850               	movf	?___fttol,w
  4479  014B  1683               	bsf	3,5	;RP0=1, select bank1
  4480  014C  1303               	bcf	3,6	;RP1=0, select bank1
  4481  014D  01BE               	clrf	_rpm^(0+128)
  4482  014E  07BE               	addwf	_rpm^(0+128),f
  4483                           
  4484                           ;main.c: 175: erro_anterior = erro_atual;
  4485  014F  0837               	movf	(_erro_atual+1)^(0+128),w
  4486  0150  01B5               	clrf	(_erro_anterior+1)^(0+128)
  4487  0151  07B5               	addwf	(_erro_anterior+1)^(0+128),f
  4488  0152  0836               	movf	_erro_atual^(0+128),w
  4489  0153  01B4               	clrf	_erro_anterior^(0+128)
  4490  0154  07B4               	addwf	_erro_anterior^(0+128),f
  4491                           
  4492                           ;main.c: 176: erro_atual = setpoint - rpm;
  4493  0155  093E               	comf	_rpm^(0+128),w
  4494  0156  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0157  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0158  00DE               	movwf	??_ISR
  4497  0159  1683               	bsf	3,5	;RP0=1, select bank1
  4498  015A  1303               	bcf	3,6	;RP1=0, select bank1
  4499  015B  093F               	comf	(_rpm+1)^(0+128),w
  4500  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4501  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4502  015E  00DF               	movwf	??_ISR+1
  4503  015F  0ADE               	incf	??_ISR,f
  4504  0160  1903               	skipnz
  4505  0161  0ADF               	incf	??_ISR+1,f
  4506  0162  1683               	bsf	3,5	;RP0=1, select bank1
  4507  0163  1303               	bcf	3,6	;RP1=0, select bank1
  4508  0164  0840               	movf	_setpoint^(0+128),w
  4509  0165  1283               	bcf	3,5	;RP0=0, select bank0
  4510  0166  1303               	bcf	3,6	;RP1=0, select bank0
  4511  0167  075E               	addwf	??_ISR,w
  4512  0168  1683               	bsf	3,5	;RP0=1, select bank1
  4513  0169  1303               	bcf	3,6	;RP1=0, select bank1
  4514  016A  00B6               	movwf	_erro_atual^(0+128)
  4515  016B  0841               	movf	(_setpoint+1)^(0+128),w
  4516  016C  1803               	skipnc
  4517  016D  0A41               	incf	(_setpoint+1)^(0+128),w
  4518  016E  1283               	bcf	3,5	;RP0=0, select bank0
  4519  016F  1303               	bcf	3,6	;RP1=0, select bank0
  4520  0170  075F               	addwf	??_ISR+1,w
  4521  0171  1683               	bsf	3,5	;RP0=1, select bank1
  4522  0172  1303               	bcf	3,6	;RP1=0, select bank1
  4523  0173  00B7               	movwf	(_erro_atual+1)^(0+128)
  4524                           
  4525                           ;main.c: 177: delta = erro_atual - erro_anterior;
  4526  0174  0934               	comf	_erro_anterior^(0+128),w
  4527  0175  1283               	bcf	3,5	;RP0=0, select bank0
  4528  0176  1303               	bcf	3,6	;RP1=0, select bank0
  4529  0177  00DE               	movwf	??_ISR
  4530  0178  1683               	bsf	3,5	;RP0=1, select bank1
  4531  0179  1303               	bcf	3,6	;RP1=0, select bank1
  4532  017A  0935               	comf	(_erro_anterior+1)^(0+128),w
  4533  017B  1283               	bcf	3,5	;RP0=0, select bank0
  4534  017C  1303               	bcf	3,6	;RP1=0, select bank0
  4535  017D  00DF               	movwf	??_ISR+1
  4536  017E  0ADE               	incf	??_ISR,f
  4537  017F  1903               	skipnz
  4538  0180  0ADF               	incf	??_ISR+1,f
  4539  0181  1683               	bsf	3,5	;RP0=1, select bank1
  4540  0182  1303               	bcf	3,6	;RP1=0, select bank1
  4541  0183  0836               	movf	_erro_atual^(0+128),w
  4542  0184  1283               	bcf	3,5	;RP0=0, select bank0
  4543  0185  1303               	bcf	3,6	;RP1=0, select bank0
  4544  0186  075E               	addwf	??_ISR,w
  4545  0187  1683               	bsf	3,5	;RP0=1, select bank1
  4546  0188  1303               	bcf	3,6	;RP1=0, select bank1
  4547  0189  00B2               	movwf	_delta^(0+128)
  4548  018A  0837               	movf	(_erro_atual+1)^(0+128),w
  4549  018B  1803               	skipnc
  4550  018C  0A37               	incf	(_erro_atual+1)^(0+128),w
  4551  018D  1283               	bcf	3,5	;RP0=0, select bank0
  4552  018E  1303               	bcf	3,6	;RP1=0, select bank0
  4553  018F  075F               	addwf	??_ISR+1,w
  4554  0190  1683               	bsf	3,5	;RP0=1, select bank1
  4555  0191  1303               	bcf	3,6	;RP1=0, select bank1
  4556  0192  00B3               	movwf	(_delta+1)^(0+128)
  4557                           
  4558                           ;main.c: 179: fuzzy_erro = 1 - trimf(erro_atual, -9900, 0, 9900);
  4559  0193  30B0               	movlw	176
  4560  0194  1283               	bcf	3,5	;RP0=0, select bank0
  4561  0195  1303               	bcf	3,6	;RP1=0, select bank0
  4562  0196  00C9               	movwf	trimf@c
  4563  0197  301A               	movlw	26
  4564  0198  00CA               	movwf	trimf@c+1
  4565  0199  3046               	movlw	70
  4566  019A  00CB               	movwf	trimf@c+2
  4567  019B  3000               	movlw	0
  4568  019C  00C6               	movwf	trimf@b
  4569  019D  3000               	movlw	0
  4570  019E  00C7               	movwf	trimf@b+1
  4571  019F  3000               	movlw	0
  4572  01A0  00C8               	movwf	trimf@b+2
  4573  01A1  30B0               	movlw	176
  4574  01A2  00C3               	movwf	trimf@a
  4575  01A3  301A               	movlw	26
  4576  01A4  00C4               	movwf	trimf@a+1
  4577  01A5  30C6               	movlw	198
  4578  01A6  00C5               	movwf	trimf@a+2
  4579  01A7  1683               	bsf	3,5	;RP0=1, select bank1
  4580  01A8  1303               	bcf	3,6	;RP1=0, select bank1
  4581  01A9  0837               	movf	(_erro_atual+1)^(0+128),w
  4582  01AA  01F9               	clrf	___awtoft@c+1
  4583  01AB  07F9               	addwf	___awtoft@c+1,f
  4584  01AC  0836               	movf	_erro_atual^(0+128),w
  4585  01AD  01F8               	clrf	___awtoft@c
  4586  01AE  07F8               	addwf	___awtoft@c,f
  4587  01AF  120A  158A  2160  120A  118A  	fcall	___awtoft
  4588  01B4  0878               	movf	?___awtoft,w
  4589  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  4590  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  4591  01B7  00C0               	movwf	trimf@x
  4592  01B8  0879               	movf	?___awtoft+1,w
  4593  01B9  00C1               	movwf	trimf@x+1
  4594  01BA  087A               	movf	?___awtoft+2,w
  4595  01BB  00C2               	movwf	trimf@x+2
  4596  01BC  120A  118A  2585  120A  118A  	fcall	_trimf
  4597  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  4598  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  4599  01C3  0840               	movf	?_trimf,w
  4600  01C4  00EB               	movwf	_ISR$1677
  4601  01C5  0841               	movf	?_trimf+1,w
  4602  01C6  00EC               	movwf	_ISR$1677+1
  4603  01C7  0842               	movf	?_trimf+2,w
  4604  01C8  00ED               	movwf	_ISR$1677+2
  4605                           
  4606                           ;main.c: 179: fuzzy_erro = 1 - trimf(erro_atual, -9900, 0, 9900);
  4607  01C9  3000               	movlw	0
  4608  01CA  00A3               	movwf	___ftadd@f1
  4609  01CB  3080               	movlw	128
  4610  01CC  00A4               	movwf	___ftadd@f1+1
  4611  01CD  303F               	movlw	63
  4612  01CE  00A5               	movwf	___ftadd@f1+2
  4613  01CF  086B               	movf	_ISR$1677,w
  4614  01D0  00A0               	movwf	___ftneg@f1
  4615  01D1  086C               	movf	_ISR$1677+1,w
  4616  01D2  00A1               	movwf	___ftneg@f1+1
  4617  01D3  086D               	movf	_ISR$1677+2,w
  4618  01D4  00A2               	movwf	___ftneg@f1+2
  4619  01D5  120A  158A  2078  120A  118A  	fcall	___ftneg
  4620  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  4621  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  4622  01DC  0820               	movf	?___ftneg,w
  4623  01DD  00A6               	movwf	___ftadd@f2
  4624  01DE  0821               	movf	?___ftneg+1,w
  4625  01DF  00A7               	movwf	___ftadd@f2+1
  4626  01E0  0822               	movf	?___ftneg+2,w
  4627  01E1  00A8               	movwf	___ftadd@f2+2
  4628  01E2  120A  118A  26A9  120A  118A  	fcall	___ftadd
  4629  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  4630  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  4631  01E9  0823               	movf	?___ftadd,w
  4632  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  4633  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  4634  01EC  00A3               	movwf	_fuzzy_erro^(0+128)
  4635  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  4636  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  4637  01EF  0824               	movf	?___ftadd+1,w
  4638  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  4639  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  4640  01F2  00A4               	movwf	(_fuzzy_erro+1)^(0+128)
  4641  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  4642  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  4643  01F5  0825               	movf	?___ftadd+2,w
  4644  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  4645  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  4646  01F8  00A5               	movwf	(_fuzzy_erro+2)^(0+128)
  4647                           
  4648                           ;main.c: 180: fuzzy_delta = 1 - trimf(delta, -9900, 0, 9900);
  4649  01F9  30B0               	movlw	176
  4650  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  4651  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  4652  01FC  00C9               	movwf	trimf@c
  4653  01FD  301A               	movlw	26
  4654  01FE  00CA               	movwf	trimf@c+1
  4655  01FF  3046               	movlw	70
  4656  0200  00CB               	movwf	trimf@c+2
  4657  0201  3000               	movlw	0
  4658  0202  00C6               	movwf	trimf@b
  4659  0203  3000               	movlw	0
  4660  0204  00C7               	movwf	trimf@b+1
  4661  0205  3000               	movlw	0
  4662  0206  00C8               	movwf	trimf@b+2
  4663  0207  30B0               	movlw	176
  4664  0208  00C3               	movwf	trimf@a
  4665  0209  301A               	movlw	26
  4666  020A  00C4               	movwf	trimf@a+1
  4667  020B  30C6               	movlw	198
  4668  020C  00C5               	movwf	trimf@a+2
  4669  020D  1683               	bsf	3,5	;RP0=1, select bank1
  4670  020E  1303               	bcf	3,6	;RP1=0, select bank1
  4671  020F  0833               	movf	(_delta+1)^(0+128),w
  4672  0210  01F9               	clrf	___awtoft@c+1
  4673  0211  07F9               	addwf	___awtoft@c+1,f
  4674  0212  0832               	movf	_delta^(0+128),w
  4675  0213  01F8               	clrf	___awtoft@c
  4676  0214  07F8               	addwf	___awtoft@c,f
  4677  0215  120A  158A  2160  120A  118A  	fcall	___awtoft
  4678  021A  0878               	movf	?___awtoft,w
  4679  021B  1283               	bcf	3,5	;RP0=0, select bank0
  4680  021C  1303               	bcf	3,6	;RP1=0, select bank0
  4681  021D  00C0               	movwf	trimf@x
  4682  021E  0879               	movf	?___awtoft+1,w
  4683  021F  00C1               	movwf	trimf@x+1
  4684  0220  087A               	movf	?___awtoft+2,w
  4685  0221  00C2               	movwf	trimf@x+2
  4686  0222  120A  118A  2585  120A  118A  	fcall	_trimf
  4687  0227  1283               	bcf	3,5	;RP0=0, select bank0
  4688  0228  1303               	bcf	3,6	;RP1=0, select bank0
  4689  0229  0840               	movf	?_trimf,w
  4690  022A  00EB               	movwf	_ISR$1677
  4691  022B  0841               	movf	?_trimf+1,w
  4692  022C  00EC               	movwf	_ISR$1677+1
  4693  022D  0842               	movf	?_trimf+2,w
  4694  022E  00ED               	movwf	_ISR$1677+2
  4695                           
  4696                           ;main.c: 180: fuzzy_delta = 1 - trimf(delta, -9900, 0, 9900);
  4697  022F  3000               	movlw	0
  4698  0230  00A3               	movwf	___ftadd@f1
  4699  0231  3080               	movlw	128
  4700  0232  00A4               	movwf	___ftadd@f1+1
  4701  0233  303F               	movlw	63
  4702  0234  00A5               	movwf	___ftadd@f1+2
  4703  0235  086B               	movf	_ISR$1677,w
  4704  0236  00A0               	movwf	___ftneg@f1
  4705  0237  086C               	movf	_ISR$1677+1,w
  4706  0238  00A1               	movwf	___ftneg@f1+1
  4707  0239  086D               	movf	_ISR$1677+2,w
  4708  023A  00A2               	movwf	___ftneg@f1+2
  4709  023B  120A  158A  2078  120A  118A  	fcall	___ftneg
  4710  0240  1283               	bcf	3,5	;RP0=0, select bank0
  4711  0241  1303               	bcf	3,6	;RP1=0, select bank0
  4712  0242  0820               	movf	?___ftneg,w
  4713  0243  00A6               	movwf	___ftadd@f2
  4714  0244  0821               	movf	?___ftneg+1,w
  4715  0245  00A7               	movwf	___ftadd@f2+1
  4716  0246  0822               	movf	?___ftneg+2,w
  4717  0247  00A8               	movwf	___ftadd@f2+2
  4718  0248  120A  118A  26A9  120A  118A  	fcall	___ftadd
  4719  024D  1283               	bcf	3,5	;RP0=0, select bank0
  4720  024E  1303               	bcf	3,6	;RP1=0, select bank0
  4721  024F  0823               	movf	?___ftadd,w
  4722  0250  1683               	bsf	3,5	;RP0=1, select bank1
  4723  0251  1303               	bcf	3,6	;RP1=0, select bank1
  4724  0252  00A0               	movwf	_fuzzy_delta^(0+128)
  4725  0253  1283               	bcf	3,5	;RP0=0, select bank0
  4726  0254  1303               	bcf	3,6	;RP1=0, select bank0
  4727  0255  0824               	movf	?___ftadd+1,w
  4728  0256  1683               	bsf	3,5	;RP0=1, select bank1
  4729  0257  1303               	bcf	3,6	;RP1=0, select bank1
  4730  0258  00A1               	movwf	(_fuzzy_delta+1)^(0+128)
  4731  0259  1283               	bcf	3,5	;RP0=0, select bank0
  4732  025A  1303               	bcf	3,6	;RP1=0, select bank0
  4733  025B  0825               	movf	?___ftadd+2,w
  4734  025C  1683               	bsf	3,5	;RP0=1, select bank1
  4735  025D  1303               	bcf	3,6	;RP1=0, select bank1
  4736  025E  00A2               	movwf	(_fuzzy_delta+2)^(0+128)
  4737                           
  4738                           ;main.c: 182: fuzzy = (((fuzzy_erro)>(fuzzy_delta))?(fuzzy_erro):(fuzzy_delta));
  4739  025F  0820               	movf	_fuzzy_delta^(0+128),w
  4740  0260  00F0               	movwf	___ftge@ff1
  4741  0261  0821               	movf	(_fuzzy_delta+1)^(0+128),w
  4742  0262  00F1               	movwf	___ftge@ff1+1
  4743  0263  0822               	movf	(_fuzzy_delta+2)^(0+128),w
  4744  0264  00F2               	movwf	___ftge@ff1+2
  4745  0265  0823               	movf	_fuzzy_erro^(0+128),w
  4746  0266  00F3               	movwf	___ftge@ff2
  4747  0267  0824               	movf	(_fuzzy_erro+1)^(0+128),w
  4748  0268  00F4               	movwf	___ftge@ff2+1
  4749  0269  0825               	movf	(_fuzzy_erro+2)^(0+128),w
  4750  026A  00F5               	movwf	___ftge@ff2+2
  4751  026B  120A  158A  2348  120A  118A  	fcall	___ftge
  4752  0270  1C03               	btfss	3,0
  4753  0271  2A7A               	goto	i1l2891
  4754  0272  1683               	bsf	3,5	;RP0=1, select bank1
  4755  0273  1303               	bcf	3,6	;RP1=0, select bank1
  4756  0274  0820               	movf	_fuzzy_delta^(0+128),w
  4757  0275  00C6               	movwf	_fuzzy^(0+128)
  4758  0276  0821               	movf	(_fuzzy_delta+1)^(0+128),w
  4759  0277  00C7               	movwf	(_fuzzy+1)^(0+128)
  4760  0278  0822               	movf	(_fuzzy_delta+2)^(0+128),w
  4761  0279  2A81               	goto	L3
  4762  027A                     i1l2891:	
  4763  027A  1683               	bsf	3,5	;RP0=1, select bank1
  4764  027B  1303               	bcf	3,6	;RP1=0, select bank1
  4765  027C  0823               	movf	_fuzzy_erro^(0+128),w
  4766  027D  00C6               	movwf	_fuzzy^(0+128)
  4767  027E  0824               	movf	(_fuzzy_erro+1)^(0+128),w
  4768  027F  00C7               	movwf	(_fuzzy+1)^(0+128)
  4769  0280  0825               	movf	(_fuzzy_erro+2)^(0+128),w
  4770  0281                     L3:	
  4771  0281  00C8               	movwf	(_fuzzy+2)^(0+128)
  4772                           
  4773                           ;main.c: 184: variacao_fuzzy = 100 * (erro_atual > 0 ? 1 : -1) * fuzzy;
  4774  0282  0837               	movf	(_erro_atual+1)^(0+128),w
  4775  0283  3A80               	xorlw	128
  4776  0284  00FF               	movwf	127
  4777  0285  3080               	movlw	128
  4778  0286  027F               	subwf	127,w
  4779  0287  1D03               	skipz
  4780  0288  2A8B               	goto	u339_25
  4781  0289  3001               	movlw	1
  4782  028A  0236               	subwf	_erro_atual^(0+128),w
  4783  028B                     u339_25:	
  4784  028B  1803               	skipnc
  4785  028C  2A93               	goto	i1l2897
  4786  028D  30FF               	movlw	255
  4787  028E  1283               	bcf	3,5	;RP0=0, select bank0
  4788  028F  1303               	bcf	3,6	;RP1=0, select bank0
  4789  0290  00E4               	movwf	_ISR$236
  4790  0291  30FF               	movlw	255
  4791  0292  2A98               	goto	L4
  4792  0293                     i1l2897:	
  4793  0293  3001               	movlw	1
  4794  0294  1283               	bcf	3,5	;RP0=0, select bank0
  4795  0295  1303               	bcf	3,6	;RP1=0, select bank0
  4796  0296  00E4               	movwf	_ISR$236
  4797  0297  3000               	movlw	0
  4798  0298                     L4:	
  4799  0298  00E5               	movwf	_ISR$236+1
  4800  0299  1683               	bsf	3,5	;RP0=1, select bank1
  4801  029A  1303               	bcf	3,6	;RP1=0, select bank1
  4802  029B  0846               	movf	_fuzzy^(0+128),w
  4803  029C  1283               	bcf	3,5	;RP0=0, select bank0
  4804  029D  1303               	bcf	3,6	;RP1=0, select bank0
  4805  029E  00C0               	movwf	___ftmul@f1
  4806  029F  1683               	bsf	3,5	;RP0=1, select bank1
  4807  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  4808  02A1  0847               	movf	(_fuzzy+1)^(0+128),w
  4809  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  4810  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  4811  02A4  00C1               	movwf	___ftmul@f1+1
  4812  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  4813  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  4814  02A7  0848               	movf	(_fuzzy+2)^(0+128),w
  4815  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  4816  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  4817  02AA  00C2               	movwf	___ftmul@f1+2
  4818  02AB  0865               	movf	_ISR$236+1,w
  4819  02AC  01F1               	clrf	i1___wmul@multiplier+1
  4820  02AD  07F1               	addwf	i1___wmul@multiplier+1,f
  4821  02AE  0864               	movf	_ISR$236,w
  4822  02AF  01F0               	clrf	i1___wmul@multiplier
  4823  02B0  07F0               	addwf	i1___wmul@multiplier,f
  4824  02B1  3064               	movlw	100
  4825  02B2  00F2               	movwf	i1___wmul@multiplicand
  4826  02B3  3000               	movlw	0
  4827  02B4  00F3               	movwf	i1___wmul@multiplicand+1
  4828  02B5  120A  158A  21C3  120A  118A  	fcall	i1___wmul
  4829  02BA  0871               	movf	?i1___wmul+1,w
  4830  02BB  01F9               	clrf	___awtoft@c+1
  4831  02BC  07F9               	addwf	___awtoft@c+1,f
  4832  02BD  0870               	movf	?i1___wmul,w
  4833  02BE  01F8               	clrf	___awtoft@c
  4834  02BF  07F8               	addwf	___awtoft@c,f
  4835  02C0  120A  158A  2160  120A  118A  	fcall	___awtoft
  4836  02C5  0878               	movf	?___awtoft,w
  4837  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  4838  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  4839  02C8  00C3               	movwf	___ftmul@f2
  4840  02C9  0879               	movf	?___awtoft+1,w
  4841  02CA  00C4               	movwf	___ftmul@f2+1
  4842  02CB  087A               	movf	?___awtoft+2,w
  4843  02CC  00C5               	movwf	___ftmul@f2+2
  4844  02CD  120A  158A  264D  120A  118A  	fcall	___ftmul
  4845  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  4846  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  4847  02D4  0840               	movf	?___ftmul,w
  4848  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  4849  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  4850  02D7  00A9               	movwf	_variacao_fuzzy^(0+128)
  4851  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  4852  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  4853  02DA  0841               	movf	?___ftmul+1,w
  4854  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  4855  02DC  1303               	bcf	3,6	;RP1=0, select bank1
  4856  02DD  00AA               	movwf	(_variacao_fuzzy+1)^(0+128)
  4857  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  4858  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  4859  02E0  0842               	movf	?___ftmul+2,w
  4860  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  4861  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  4862  02E3  00AB               	movwf	(_variacao_fuzzy+2)^(0+128)
  4863                           
  4864                           ;main.c: 186: if (ligado) {
  4865  02E4  086C               	movf	(_ligado+1)^(0+128),w
  4866  02E5  046B               	iorwf	_ligado^(0+128),w
  4867  02E6  1903               	skipnz
  4868  02E7  2BAC               	goto	i1l2921
  4869                           
  4870                           ;main.c: 187: pwm = ((((((pwm + (int) variacao_fuzzy)<(1023))?(pwm + (int) variacao_fuzz
      +                          y):(1023)))>(0))?((((pwm + (int) variacao_fuzzy)<(1023))?(pwm + (int) variacao_fuzzy):(1
      +                          023))):(0));
  4871  02E8  0829               	movf	_variacao_fuzzy^(0+128),w
  4872  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  4873  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  4874  02EB  00D0               	movwf	___fttol@f1
  4875  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  4876  02ED  1303               	bcf	3,6	;RP1=0, select bank1
  4877  02EE  082A               	movf	(_variacao_fuzzy+1)^(0+128),w
  4878  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  4879  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  4880  02F1  00D1               	movwf	___fttol@f1+1
  4881  02F2  1683               	bsf	3,5	;RP0=1, select bank1
  4882  02F3  1303               	bcf	3,6	;RP1=0, select bank1
  4883  02F4  082B               	movf	(_variacao_fuzzy+2)^(0+128),w
  4884  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  4885  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  4886  02F7  00D2               	movwf	___fttol@f1+2
  4887  02F8  120A  158A  2478  120A  118A  	fcall	___fttol
  4888  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  4889  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  4890  02FF  083A               	movf	_pwm^(0+128),w
  4891  0300  1283               	bcf	3,5	;RP0=0, select bank0
  4892  0301  1303               	bcf	3,6	;RP1=0, select bank0
  4893  0302  0750               	addwf	?___fttol,w
  4894  0303  00DE               	movwf	??_ISR
  4895  0304  1683               	bsf	3,5	;RP0=1, select bank1
  4896  0305  1303               	bcf	3,6	;RP1=0, select bank1
  4897  0306  083B               	movf	(_pwm+1)^(0+128),w
  4898  0307  1803               	skipnc
  4899  0308  0A3B               	incf	(_pwm+1)^(0+128),w
  4900  0309  1283               	bcf	3,5	;RP0=0, select bank0
  4901  030A  1303               	bcf	3,6	;RP1=0, select bank0
  4902  030B  0751               	addwf	?___fttol+1,w
  4903  030C  00DF               	movwf	??_ISR+1
  4904  030D  3003               	movlw	3
  4905  030E  025F               	subwf	??_ISR+1,w
  4906  030F  30FF               	movlw	255
  4907  0310  1903               	skipnz
  4908  0311  025E               	subwf	??_ISR,w
  4909  0312  1C03               	skipc
  4910  0313  2B18               	goto	i1l2907
  4911  0314  30FF               	movlw	255
  4912  0315  00E6               	movwf	_ISR$237
  4913  0316  3003               	movlw	3
  4914  0317  2B3E               	goto	L5
  4915  0318                     i1l2907:	
  4916  0318  1683               	bsf	3,5	;RP0=1, select bank1
  4917  0319  1303               	bcf	3,6	;RP1=0, select bank1
  4918  031A  0829               	movf	_variacao_fuzzy^(0+128),w
  4919  031B  1283               	bcf	3,5	;RP0=0, select bank0
  4920  031C  1303               	bcf	3,6	;RP1=0, select bank0
  4921  031D  00D0               	movwf	___fttol@f1
  4922  031E  1683               	bsf	3,5	;RP0=1, select bank1
  4923  031F  1303               	bcf	3,6	;RP1=0, select bank1
  4924  0320  082A               	movf	(_variacao_fuzzy+1)^(0+128),w
  4925  0321  1283               	bcf	3,5	;RP0=0, select bank0
  4926  0322  1303               	bcf	3,6	;RP1=0, select bank0
  4927  0323  00D1               	movwf	___fttol@f1+1
  4928  0324  1683               	bsf	3,5	;RP0=1, select bank1
  4929  0325  1303               	bcf	3,6	;RP1=0, select bank1
  4930  0326  082B               	movf	(_variacao_fuzzy+2)^(0+128),w
  4931  0327  1283               	bcf	3,5	;RP0=0, select bank0
  4932  0328  1303               	bcf	3,6	;RP1=0, select bank0
  4933  0329  00D2               	movwf	___fttol@f1+2
  4934  032A  120A  158A  2478  120A  118A  	fcall	___fttol
  4935  032F  1683               	bsf	3,5	;RP0=1, select bank1
  4936  0330  1303               	bcf	3,6	;RP1=0, select bank1
  4937  0331  083A               	movf	_pwm^(0+128),w
  4938  0332  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0333  1303               	bcf	3,6	;RP1=0, select bank0
  4940  0334  0750               	addwf	?___fttol,w
  4941  0335  00E6               	movwf	_ISR$237
  4942  0336  1683               	bsf	3,5	;RP0=1, select bank1
  4943  0337  1303               	bcf	3,6	;RP1=0, select bank1
  4944  0338  083B               	movf	(_pwm+1)^(0+128),w
  4945  0339  1803               	skipnc
  4946  033A  0A3B               	incf	(_pwm+1)^(0+128),w
  4947  033B  1283               	bcf	3,5	;RP0=0, select bank0
  4948  033C  1303               	bcf	3,6	;RP1=0, select bank0
  4949  033D  0751               	addwf	?___fttol+1,w
  4950  033E                     L5:	
  4951  033E  00E7               	movwf	_ISR$237+1
  4952  033F  0867               	movf	_ISR$237+1,w
  4953  0340  0466               	iorwf	_ISR$237,w
  4954  0341  1D03               	skipz
  4955  0342  2B46               	goto	i1l2913
  4956  0343  1683               	bsf	3,5	;RP0=1, select bank1
  4957  0344  1303               	bcf	3,6	;RP1=0, select bank1
  4958  0345  2BAC               	goto	i1l2921
  4959  0346                     i1l2913:	
  4960  0346  1683               	bsf	3,5	;RP0=1, select bank1
  4961  0347  1303               	bcf	3,6	;RP1=0, select bank1
  4962  0348  0829               	movf	_variacao_fuzzy^(0+128),w
  4963  0349  1283               	bcf	3,5	;RP0=0, select bank0
  4964  034A  1303               	bcf	3,6	;RP1=0, select bank0
  4965  034B  00D0               	movwf	___fttol@f1
  4966  034C  1683               	bsf	3,5	;RP0=1, select bank1
  4967  034D  1303               	bcf	3,6	;RP1=0, select bank1
  4968  034E  082A               	movf	(_variacao_fuzzy+1)^(0+128),w
  4969  034F  1283               	bcf	3,5	;RP0=0, select bank0
  4970  0350  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0351  00D1               	movwf	___fttol@f1+1
  4972  0352  1683               	bsf	3,5	;RP0=1, select bank1
  4973  0353  1303               	bcf	3,6	;RP1=0, select bank1
  4974  0354  082B               	movf	(_variacao_fuzzy+2)^(0+128),w
  4975  0355  1283               	bcf	3,5	;RP0=0, select bank0
  4976  0356  1303               	bcf	3,6	;RP1=0, select bank0
  4977  0357  00D2               	movwf	___fttol@f1+2
  4978  0358  120A  158A  2478  120A  118A  	fcall	___fttol
  4979  035D  1683               	bsf	3,5	;RP0=1, select bank1
  4980  035E  1303               	bcf	3,6	;RP1=0, select bank1
  4981  035F  083A               	movf	_pwm^(0+128),w
  4982  0360  1283               	bcf	3,5	;RP0=0, select bank0
  4983  0361  1303               	bcf	3,6	;RP1=0, select bank0
  4984  0362  0750               	addwf	?___fttol,w
  4985  0363  00DE               	movwf	??_ISR
  4986  0364  1683               	bsf	3,5	;RP0=1, select bank1
  4987  0365  1303               	bcf	3,6	;RP1=0, select bank1
  4988  0366  083B               	movf	(_pwm+1)^(0+128),w
  4989  0367  1803               	skipnc
  4990  0368  0A3B               	incf	(_pwm+1)^(0+128),w
  4991  0369  1283               	bcf	3,5	;RP0=0, select bank0
  4992  036A  1303               	bcf	3,6	;RP1=0, select bank0
  4993  036B  0751               	addwf	?___fttol+1,w
  4994  036C  00DF               	movwf	??_ISR+1
  4995  036D  3003               	movlw	3
  4996  036E  025F               	subwf	??_ISR+1,w
  4997  036F  30FF               	movlw	255
  4998  0370  1903               	skipnz
  4999  0371  025E               	subwf	??_ISR,w
  5000  0372  1C03               	skipc
  5001  0373  2B78               	goto	i1l2917
  5002  0374  30FF               	movlw	255
  5003  0375  00E8               	movwf	_ISR$238
  5004  0376  3003               	movlw	3
  5005  0377  2B9E               	goto	L6
  5006  0378                     i1l2917:	
  5007  0378  1683               	bsf	3,5	;RP0=1, select bank1
  5008  0379  1303               	bcf	3,6	;RP1=0, select bank1
  5009  037A  0829               	movf	_variacao_fuzzy^(0+128),w
  5010  037B  1283               	bcf	3,5	;RP0=0, select bank0
  5011  037C  1303               	bcf	3,6	;RP1=0, select bank0
  5012  037D  00D0               	movwf	___fttol@f1
  5013  037E  1683               	bsf	3,5	;RP0=1, select bank1
  5014  037F  1303               	bcf	3,6	;RP1=0, select bank1
  5015  0380  082A               	movf	(_variacao_fuzzy+1)^(0+128),w
  5016  0381  1283               	bcf	3,5	;RP0=0, select bank0
  5017  0382  1303               	bcf	3,6	;RP1=0, select bank0
  5018  0383  00D1               	movwf	___fttol@f1+1
  5019  0384  1683               	bsf	3,5	;RP0=1, select bank1
  5020  0385  1303               	bcf	3,6	;RP1=0, select bank1
  5021  0386  082B               	movf	(_variacao_fuzzy+2)^(0+128),w
  5022  0387  1283               	bcf	3,5	;RP0=0, select bank0
  5023  0388  1303               	bcf	3,6	;RP1=0, select bank0
  5024  0389  00D2               	movwf	___fttol@f1+2
  5025  038A  120A  158A  2478  120A  118A  	fcall	___fttol
  5026  038F  1683               	bsf	3,5	;RP0=1, select bank1
  5027  0390  1303               	bcf	3,6	;RP1=0, select bank1
  5028  0391  083A               	movf	_pwm^(0+128),w
  5029  0392  1283               	bcf	3,5	;RP0=0, select bank0
  5030  0393  1303               	bcf	3,6	;RP1=0, select bank0
  5031  0394  0750               	addwf	?___fttol,w
  5032  0395  00E8               	movwf	_ISR$238
  5033  0396  1683               	bsf	3,5	;RP0=1, select bank1
  5034  0397  1303               	bcf	3,6	;RP1=0, select bank1
  5035  0398  083B               	movf	(_pwm+1)^(0+128),w
  5036  0399  1803               	skipnc
  5037  039A  0A3B               	incf	(_pwm+1)^(0+128),w
  5038  039B  1283               	bcf	3,5	;RP0=0, select bank0
  5039  039C  1303               	bcf	3,6	;RP1=0, select bank0
  5040  039D  0751               	addwf	?___fttol+1,w
  5041  039E                     L6:	
  5042  039E  00E9               	movwf	_ISR$238+1
  5043  039F  0869               	movf	_ISR$238+1,w
  5044  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  5045  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  5046  03A2  01BB               	clrf	(_pwm+1)^(0+128)
  5047  03A3  07BB               	addwf	(_pwm+1)^(0+128),f
  5048  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  5049  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  5050  03A6  0868               	movf	_ISR$238,w
  5051  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  5052  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  5053  03A9  01BA               	clrf	_pwm^(0+128)
  5054  03AA  07BA               	addwf	_pwm^(0+128),f
  5055                           
  5056                           ;main.c: 188: } else {
  5057  03AB  2BAE               	goto	i1l2923
  5058  03AC                     i1l2921:	
  5059                           
  5060                           ;main.c: 189: pwm = 0;
  5061  03AC  01BA               	clrf	_pwm^(0+128)
  5062  03AD  01BB               	clrf	(_pwm+1)^(0+128)
  5063  03AE                     i1l2923:	
  5064                           
  5065                           ;main.c: 190: }
  5066                           ;main.c: 192: PWM_DutyCycle2(pwm);
  5067  03AE  083B               	movf	(_pwm+1)^(0+128),w
  5068  03AF  01F1               	clrf	i1PWM_DutyCycle2@valor+1
  5069  03B0  07F1               	addwf	i1PWM_DutyCycle2@valor+1,f
  5070  03B1  083A               	movf	_pwm^(0+128),w
  5071  03B2  01F0               	clrf	i1PWM_DutyCycle2@valor
  5072  03B3  07F0               	addwf	i1PWM_DutyCycle2@valor,f
  5073  03B4  120A  158A  2109  120A  118A  	fcall	i1_PWM_DutyCycle2
  5074                           
  5075                           ;main.c: 195: TMR1L = 0x00;
  5076  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  5077  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  5078  03BB  018E               	clrf	14	;volatile
  5079                           
  5080                           ;main.c: 196: TMR1H = 0x00;
  5081  03BC  018F               	clrf	15	;volatile
  5082                           
  5083                           ;main.c: 199: PORTBbits.RB6 = 0;
  5084  03BD  1306               	bcf	6,6	;volatile
  5085  03BE                     i1l2931:	
  5086                           
  5087                           ;main.c: 200: }
  5088                           ;main.c: 203: INTCONbits.T0IF = 0;
  5089  03BE  110B               	bcf	11,2	;volatile
  5090  03BF                     i1l2933:	
  5091                           
  5092                           ;main.c: 204: }
  5093                           ;main.c: 207: if (PIR1bits.TMR1IF)
  5094  03BF  180C               	btfsc	12,0	;volatile
  5095                           
  5096                           ;main.c: 208: {
  5097                           ;main.c: 212: PIR1bits.TMR1IF = 0;
  5098  03C0  100C               	bcf	12,0	;volatile
  5099                           
  5100                           ;main.c: 213: }
  5101                           ;main.c: 216: if (PIR1bits.SSPIF)
  5102  03C1  198C               	btfsc	12,3	;volatile
  5103                           
  5104                           ;main.c: 217: {
  5105                           ;main.c: 221: PIR1bits.SSPIF = 0;
  5106  03C2  118C               	bcf	12,3	;volatile
  5107  03C3  0863               	movf	??_ISR+5,w
  5108  03C4  00FF               	movwf	127
  5109  03C5  0862               	movf	??_ISR+4,w
  5110  03C6  008A               	movwf	10
  5111  03C7  0861               	movf	??_ISR+3,w
  5112  03C8  0084               	movwf	4
  5113  03C9  0E60               	swapf	(??_ISR+2)^0,w
  5114  03CA  0083               	movwf	3
  5115  03CB  0EFE               	swapf	126,f
  5116  03CC  0E7E               	swapf	126,w
  5117  03CD  0009               	retfie
  5118  03CE                     __end_of_ISR:	
  5119                           
  5120                           	psect	intentry
  5121  0004                     __pintentry:	
  5122                           ;incstack = 0
  5123                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5124                           
  5125  0004                     interrupt_function:	
  5126  007E                     saved_w	set	btemp
  5127  0004  00FE               	movwf	btemp
  5128  0005  0E03               	swapf	3,w
  5129  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5130  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5131  0008  00E0               	movwf	??_ISR+2
  5132  0009  0804               	movf	4,w
  5133  000A  00E1               	movwf	??_ISR+3
  5134  000B  080A               	movf	10,w
  5135  000C  00E2               	movwf	??_ISR+4
  5136  000D  087F               	movf	btemp+1,w
  5137  000E  00E3               	movwf	??_ISR+5
  5138  000F  120A  118A  2837   	ljmp	_ISR
  5139                           
  5140                           	psect	text21
  5141  09C3                     __ptext21:	
  5142 ;; *************** function i1___wmul *****************
  5143 ;; Defined at:
  5144 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  multiplier      2    0[COMMON] unsigned int 
  5147 ;;  multiplicand    2    2[COMMON] unsigned int 
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  __wmul          2    4[COMMON] unsigned int 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  2    0[COMMON] unsigned int 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         4       0       0       0       0
  5160 ;;      Locals:         2       0       0       0       0
  5161 ;;      Temps:          0       0       0       0       0
  5162 ;;      Totals:         6       0       0       0       0
  5163 ;;Total ram usage:        6 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_ISR
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function i1___wmul
  5174  09C3                     i1___wmul:	
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  5178  09C3  01F4               	clrf	i1___wmul@product
  5179  09C4  01F5               	clrf	i1___wmul@product+1
  5180  09C5                     i1l2797:	
  5181  09C5  1C70               	btfss	i1___wmul@multiplier,0
  5182  09C6  29CD               	goto	i1l563
  5183  09C7  0872               	movf	i1___wmul@multiplicand,w
  5184  09C8  07F4               	addwf	i1___wmul@product,f
  5185  09C9  1803               	skipnc
  5186  09CA  0AF5               	incf	i1___wmul@product+1,f
  5187  09CB  0873               	movf	i1___wmul@multiplicand+1,w
  5188  09CC  07F5               	addwf	i1___wmul@product+1,f
  5189  09CD                     i1l563:	
  5190  09CD  3001               	movlw	1
  5191  09CE                     u320_25:	
  5192  09CE  1003               	clrc
  5193  09CF  0DF2               	rlf	i1___wmul@multiplicand,f
  5194  09D0  0DF3               	rlf	i1___wmul@multiplicand+1,f
  5195  09D1  3EFF               	addlw	-1
  5196  09D2  1D03               	skipz
  5197  09D3  29CE               	goto	u320_25
  5198  09D4  3001               	movlw	1
  5199  09D5                     u321_25:	
  5200  09D5  1003               	clrc
  5201  09D6  0CF1               	rrf	i1___wmul@multiplier+1,f
  5202  09D7  0CF0               	rrf	i1___wmul@multiplier,f
  5203  09D8  3EFF               	addlw	-1
  5204  09D9  1D03               	skipz
  5205  09DA  29D5               	goto	u321_25
  5206  09DB  0871               	movf	i1___wmul@multiplier+1,w
  5207  09DC  0470               	iorwf	i1___wmul@multiplier,w
  5208  09DD  1D03               	skipz
  5209  09DE  29C5               	goto	i1l2797
  5210  09DF  0875               	movf	i1___wmul@product+1,w
  5211  09E0  01F1               	clrf	?i1___wmul+1
  5212  09E1  07F1               	addwf	?i1___wmul+1,f
  5213  09E2  0874               	movf	i1___wmul@product,w
  5214  09E3  01F0               	clrf	?i1___wmul
  5215  09E4  07F0               	addwf	?i1___wmul,f
  5216  09E5  0008               	return
  5217  09E6                     __end_ofi1___wmul:	
  5218                           
  5219                           	psect	text22
  5220  17FA                     __ptext22:	
  5221 ;; *************** function i1_TIMER0_Set *****************
  5222 ;; Defined at:
  5223 ;;		line 20 in file "C:\Users\332414\Desktop\FyzzySI\firmware\timers.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  contagens       1    wreg     unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  contagens       1    0[COMMON] unsigned char 
  5228 ;; Return value:  Size  Location     Type
  5229 ;;		None               void
  5230 ;; Registers used:
  5231 ;;		wreg
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5237 ;;      Params:         0       0       0       0       0
  5238 ;;      Locals:         1       0       0       0       0
  5239 ;;      Temps:          0       0       0       0       0
  5240 ;;      Totals:         1       0       0       0       0
  5241 ;;Total ram usage:        1 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_ISR
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function i1_TIMER0_Set
  5252  17FA                     i1_TIMER0_Set:	
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in i1_TIMER0_Set: [wreg]
  5256                           ;i1TIMER0_Set@contagens stored from wreg
  5257  17FA  00F0               	movwf	i1TIMER0_Set@contagens
  5258                           
  5259                           ;timers.c: 22: TMR0 = contagens;
  5260  17FB  0870               	movf	i1TIMER0_Set@contagens,w
  5261  17FC  1283               	bcf	3,5	;RP0=0, select bank0
  5262  17FD  1303               	bcf	3,6	;RP1=0, select bank0
  5263  17FE  0081               	movwf	1	;volatile
  5264  17FF  0008               	return
  5265  1800                     __end_ofi1_TIMER0_Set:	
  5266                           
  5267                           	psect	text23
  5268  0909                     __ptext23:	
  5269 ;; *************** function i1_PWM_DutyCycle2 *****************
  5270 ;; Defined at:
  5271 ;;		line 96 in file "C:\Users\332414\Desktop\FyzzySI\firmware\pwm.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  valor           2    0[COMMON] int 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, status,2, status,0
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5285 ;;      Params:         2       0       0       0       0
  5286 ;;      Locals:         0       0       0       0       0
  5287 ;;      Temps:          2       0       0       0       0
  5288 ;;      Totals:         4       0       0       0       0
  5289 ;;Total ram usage:        4 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_ISR
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function i1_PWM_DutyCycle2
  5300  0909                     i1_PWM_DutyCycle2:	
  5301                           
  5302                           ;pwm.c: 98: CCPR2L = valor >> 2;
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in i1_PWM_DutyCycle2: [wreg+status,2+status,0]
  5306  0909  0871               	movf	i1PWM_DutyCycle2@valor+1,w
  5307  090A  00F3               	movwf	??i1_PWM_DutyCycle2+1
  5308  090B  0870               	movf	i1PWM_DutyCycle2@valor,w
  5309  090C  00F2               	movwf	??i1_PWM_DutyCycle2
  5310  090D  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  5311  090E  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  5312  090F  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  5313  0910  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  5314  0911  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  5315  0912  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  5316  0913  0872               	movf	??i1_PWM_DutyCycle2,w
  5317  0914  1283               	bcf	3,5	;RP0=0, select bank0
  5318  0915  1303               	bcf	3,6	;RP1=0, select bank0
  5319  0916  009B               	movwf	27	;volatile
  5320                           
  5321                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  5322  0917  0870               	movf	i1PWM_DutyCycle2@valor,w
  5323  0918  00F2               	movwf	??i1_PWM_DutyCycle2
  5324  0919  3003               	movlw	3
  5325  091A                     u318_25:	
  5326  091A  1003               	clrc
  5327  091B  0DF2               	rlf	??i1_PWM_DutyCycle2,f
  5328  091C  3EFF               	addlw	-1
  5329  091D  1D03               	skipz
  5330  091E  291A               	goto	u318_25
  5331  091F  1003               	clrc
  5332  0920  0D72               	rlf	??i1_PWM_DutyCycle2,w
  5333  0921  380C               	iorlw	12
  5334  0922  009D               	movwf	29	;volatile
  5335  0923  0008               	return
  5336  0924                     __end_ofi1_PWM_DutyCycle2:	
  5337                           
  5338                           	psect	text24
  5339  0585                     __ptext24:	
  5340 ;; *************** function _trimf *****************
  5341 ;; Defined at:
  5342 ;;		line 59 in file "C:\Users\332414\Desktop\FyzzySI\firmware\main.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  x               3   32[BANK0 ] float 
  5345 ;;  a               3   35[BANK0 ] float 
  5346 ;;  b               3   38[BANK0 ] float 
  5347 ;;  c               3   41[BANK0 ] float 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  ua              3   44[BANK0 ] float 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  3   32[BANK0 ] float 
  5352 ;; Registers used:
  5353 ;;		wreg, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5359 ;;      Params:         0      12       0       0       0
  5360 ;;      Locals:         0       3       0       0       0
  5361 ;;      Temps:          0       0       0       0       0
  5362 ;;      Totals:         0      15       0       0       0
  5363 ;;Total ram usage:       15 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    2
  5366 ;; This function calls:
  5367 ;;		___ftadd
  5368 ;;		___ftdiv
  5369 ;;		___ftge
  5370 ;;		___ftneg
  5371 ;; This function is called by:
  5372 ;;		_ISR
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _trimf
  5378  0585                     _trimf:	
  5379                           
  5380                           ;main.c: 61: float ua = 0;
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _trimf: [wreg+status,2+status,0+pclath+cstack]
  5384  0585  3000               	movlw	0
  5385  0586  1283               	bcf	3,5	;RP0=0, select bank0
  5386  0587  1303               	bcf	3,6	;RP1=0, select bank0
  5387  0588  00CC               	movwf	trimf@ua
  5388  0589  3000               	movlw	0
  5389  058A  00CD               	movwf	trimf@ua+1
  5390  058B  3000               	movlw	0
  5391  058C  00CE               	movwf	trimf@ua+2
  5392                           
  5393                           ;main.c: 63: if (x <= a)
  5394  058D  0843               	movf	trimf@a,w
  5395  058E  00F0               	movwf	___ftge@ff1
  5396  058F  0844               	movf	trimf@a+1,w
  5397  0590  00F1               	movwf	___ftge@ff1+1
  5398  0591  0845               	movf	trimf@a+2,w
  5399  0592  00F2               	movwf	___ftge@ff1+2
  5400  0593  0840               	movf	trimf@x,w
  5401  0594  00F3               	movwf	___ftge@ff2
  5402  0595  0841               	movf	trimf@x+1,w
  5403  0596  00F4               	movwf	___ftge@ff2+1
  5404  0597  0842               	movf	trimf@x+2,w
  5405  0598  00F5               	movwf	___ftge@ff2+2
  5406  0599  120A  158A  2348  120A  118A  	fcall	___ftge
  5407  059E  1803               	btfsc	3,0
  5408  059F  2E98               	goto	L11
  5409                           
  5410                           ;main.c: 65: else if ((a < x) && (x <= b))
  5411                           
  5412                           ;main.c: 64: ua = 0;
  5413  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  5414  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  5415  05A2  0843               	movf	trimf@a,w
  5416  05A3  00F0               	movwf	___ftge@ff1
  5417  05A4  0844               	movf	trimf@a+1,w
  5418  05A5  00F1               	movwf	___ftge@ff1+1
  5419  05A6  0845               	movf	trimf@a+2,w
  5420  05A7  00F2               	movwf	___ftge@ff1+2
  5421  05A8  0840               	movf	trimf@x,w
  5422  05A9  00F3               	movwf	___ftge@ff2
  5423  05AA  0841               	movf	trimf@x+1,w
  5424  05AB  00F4               	movwf	___ftge@ff2+1
  5425  05AC  0842               	movf	trimf@x+2,w
  5426  05AD  00F5               	movwf	___ftge@ff2+2
  5427  05AE  120A  158A  2348  120A  118A  	fcall	___ftge
  5428  05B3  1803               	btfsc	3,0
  5429  05B4  2DFE               	goto	i1l2373
  5430  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  5431  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  5432  05B7  0846               	movf	trimf@b,w
  5433  05B8  00F0               	movwf	___ftge@ff1
  5434  05B9  0847               	movf	trimf@b+1,w
  5435  05BA  00F1               	movwf	___ftge@ff1+1
  5436  05BB  0848               	movf	trimf@b+2,w
  5437  05BC  00F2               	movwf	___ftge@ff1+2
  5438  05BD  0840               	movf	trimf@x,w
  5439  05BE  00F3               	movwf	___ftge@ff2
  5440  05BF  0841               	movf	trimf@x+1,w
  5441  05C0  00F4               	movwf	___ftge@ff2+1
  5442  05C1  0842               	movf	trimf@x+2,w
  5443  05C2  00F5               	movwf	___ftge@ff2+2
  5444  05C3  120A  158A  2348  120A  118A  	fcall	___ftge
  5445  05C8  1C03               	btfss	3,0
  5446  05C9  2DFE               	goto	i1l2373
  5447                           
  5448                           ;main.c: 66: ua = ((x - a) / (b - a));
  5449  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  5450  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  5451  05CC  0846               	movf	trimf@b,w
  5452  05CD  00A3               	movwf	___ftadd@f1
  5453  05CE  0847               	movf	trimf@b+1,w
  5454  05CF  00A4               	movwf	___ftadd@f1+1
  5455  05D0  0848               	movf	trimf@b+2,w
  5456  05D1  00A5               	movwf	___ftadd@f1+2
  5457  05D2  0843               	movf	trimf@a,w
  5458  05D3  00A0               	movwf	___ftneg@f1
  5459  05D4  0844               	movf	trimf@a+1,w
  5460  05D5  00A1               	movwf	___ftneg@f1+1
  5461  05D6  0845               	movf	trimf@a+2,w
  5462  05D7  00A2               	movwf	___ftneg@f1+2
  5463  05D8  120A  158A  2078  120A  118A  	fcall	___ftneg
  5464  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  5465  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  5466  05DF  0820               	movf	?___ftneg,w
  5467  05E0  00A6               	movwf	___ftadd@f2
  5468  05E1  0821               	movf	?___ftneg+1,w
  5469  05E2  00A7               	movwf	___ftadd@f2+1
  5470  05E3  0822               	movf	?___ftneg+2,w
  5471  05E4  00A8               	movwf	___ftadd@f2+2
  5472  05E5  120A  118A  26A9  120A  118A  	fcall	___ftadd
  5473  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  5474  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  5475  05EC  0823               	movf	?___ftadd,w
  5476  05ED  00B0               	movwf	___ftdiv@f2
  5477  05EE  0824               	movf	?___ftadd+1,w
  5478  05EF  00B1               	movwf	___ftdiv@f2+1
  5479  05F0  0825               	movf	?___ftadd+2,w
  5480  05F1  00B2               	movwf	___ftdiv@f2+2
  5481  05F2  0840               	movf	trimf@x,w
  5482  05F3  00A3               	movwf	___ftadd@f1
  5483  05F4  0841               	movf	trimf@x+1,w
  5484  05F5  00A4               	movwf	___ftadd@f1+1
  5485  05F6  0842               	movf	trimf@x+2,w
  5486  05F7  00A5               	movwf	___ftadd@f1+2
  5487  05F8  0843               	movf	trimf@a,w
  5488  05F9  00A0               	movwf	___ftneg@f1
  5489  05FA  0844               	movf	trimf@a+1,w
  5490  05FB  00A1               	movwf	___ftneg@f1+1
  5491  05FC  0845               	movf	trimf@a+2,w
  5492  05FD  2E5B               	goto	L12
  5493  05FE                     i1l2373:	
  5494                           
  5495                           ;main.c: 67: else if ((b < x) && (x <= c))
  5496  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  5497  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  5498  0600  0846               	movf	trimf@b,w
  5499  0601  00F0               	movwf	___ftge@ff1
  5500  0602  0847               	movf	trimf@b+1,w
  5501  0603  00F1               	movwf	___ftge@ff1+1
  5502  0604  0848               	movf	trimf@b+2,w
  5503  0605  00F2               	movwf	___ftge@ff1+2
  5504  0606  0840               	movf	trimf@x,w
  5505  0607  00F3               	movwf	___ftge@ff2
  5506  0608  0841               	movf	trimf@x+1,w
  5507  0609  00F4               	movwf	___ftge@ff2+1
  5508  060A  0842               	movf	trimf@x+2,w
  5509  060B  00F5               	movwf	___ftge@ff2+2
  5510  060C  120A  158A  2348  120A  118A  	fcall	___ftge
  5511  0611  1803               	btfsc	3,0
  5512  0612  2E83               	goto	i1l2379
  5513  0613  1283               	bcf	3,5	;RP0=0, select bank0
  5514  0614  1303               	bcf	3,6	;RP1=0, select bank0
  5515  0615  0849               	movf	trimf@c,w
  5516  0616  00F0               	movwf	___ftge@ff1
  5517  0617  084A               	movf	trimf@c+1,w
  5518  0618  00F1               	movwf	___ftge@ff1+1
  5519  0619  084B               	movf	trimf@c+2,w
  5520  061A  00F2               	movwf	___ftge@ff1+2
  5521  061B  0840               	movf	trimf@x,w
  5522  061C  00F3               	movwf	___ftge@ff2
  5523  061D  0841               	movf	trimf@x+1,w
  5524  061E  00F4               	movwf	___ftge@ff2+1
  5525  061F  0842               	movf	trimf@x+2,w
  5526  0620  00F5               	movwf	___ftge@ff2+2
  5527  0621  120A  158A  2348  120A  118A  	fcall	___ftge
  5528  0626  1C03               	btfss	3,0
  5529  0627  2E83               	goto	i1l2379
  5530                           
  5531                           ;main.c: 68: ua = ((x - c) / (b - c));
  5532  0628  1283               	bcf	3,5	;RP0=0, select bank0
  5533  0629  1303               	bcf	3,6	;RP1=0, select bank0
  5534  062A  0846               	movf	trimf@b,w
  5535  062B  00A3               	movwf	___ftadd@f1
  5536  062C  0847               	movf	trimf@b+1,w
  5537  062D  00A4               	movwf	___ftadd@f1+1
  5538  062E  0848               	movf	trimf@b+2,w
  5539  062F  00A5               	movwf	___ftadd@f1+2
  5540  0630  0849               	movf	trimf@c,w
  5541  0631  00A0               	movwf	___ftneg@f1
  5542  0632  084A               	movf	trimf@c+1,w
  5543  0633  00A1               	movwf	___ftneg@f1+1
  5544  0634  084B               	movf	trimf@c+2,w
  5545  0635  00A2               	movwf	___ftneg@f1+2
  5546  0636  120A  158A  2078  120A  118A  	fcall	___ftneg
  5547  063B  1283               	bcf	3,5	;RP0=0, select bank0
  5548  063C  1303               	bcf	3,6	;RP1=0, select bank0
  5549  063D  0820               	movf	?___ftneg,w
  5550  063E  00A6               	movwf	___ftadd@f2
  5551  063F  0821               	movf	?___ftneg+1,w
  5552  0640  00A7               	movwf	___ftadd@f2+1
  5553  0641  0822               	movf	?___ftneg+2,w
  5554  0642  00A8               	movwf	___ftadd@f2+2
  5555  0643  120A  118A  26A9  120A  118A  	fcall	___ftadd
  5556  0648  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0649  1303               	bcf	3,6	;RP1=0, select bank0
  5558  064A  0823               	movf	?___ftadd,w
  5559  064B  00B0               	movwf	___ftdiv@f2
  5560  064C  0824               	movf	?___ftadd+1,w
  5561  064D  00B1               	movwf	___ftdiv@f2+1
  5562  064E  0825               	movf	?___ftadd+2,w
  5563  064F  00B2               	movwf	___ftdiv@f2+2
  5564  0650  0840               	movf	trimf@x,w
  5565  0651  00A3               	movwf	___ftadd@f1
  5566  0652  0841               	movf	trimf@x+1,w
  5567  0653  00A4               	movwf	___ftadd@f1+1
  5568  0654  0842               	movf	trimf@x+2,w
  5569  0655  00A5               	movwf	___ftadd@f1+2
  5570  0656  0849               	movf	trimf@c,w
  5571  0657  00A0               	movwf	___ftneg@f1
  5572  0658  084A               	movf	trimf@c+1,w
  5573  0659  00A1               	movwf	___ftneg@f1+1
  5574  065A  084B               	movf	trimf@c+2,w
  5575  065B                     L12:	
  5576  065B  00A2               	movwf	___ftneg@f1+2
  5577  065C  120A  158A  2078  120A  118A  	fcall	___ftneg
  5578  0661  1283               	bcf	3,5	;RP0=0, select bank0
  5579  0662  1303               	bcf	3,6	;RP1=0, select bank0
  5580  0663  0820               	movf	?___ftneg,w
  5581  0664  00A6               	movwf	___ftadd@f2
  5582  0665  0821               	movf	?___ftneg+1,w
  5583  0666  00A7               	movwf	___ftadd@f2+1
  5584  0667  0822               	movf	?___ftneg+2,w
  5585  0668  00A8               	movwf	___ftadd@f2+2
  5586  0669  120A  118A  26A9  120A  118A  	fcall	___ftadd
  5587  066E  1283               	bcf	3,5	;RP0=0, select bank0
  5588  066F  1303               	bcf	3,6	;RP1=0, select bank0
  5589  0670  0823               	movf	?___ftadd,w
  5590  0671  00B3               	movwf	___ftdiv@f1
  5591  0672  0824               	movf	?___ftadd+1,w
  5592  0673  00B4               	movwf	___ftdiv@f1+1
  5593  0674  0825               	movf	?___ftadd+2,w
  5594  0675  00B5               	movwf	___ftdiv@f1+2
  5595  0676  120A  158A  2595  120A  118A  	fcall	___ftdiv
  5596  067B  1283               	bcf	3,5	;RP0=0, select bank0
  5597  067C  1303               	bcf	3,6	;RP1=0, select bank0
  5598  067D  0830               	movf	?___ftdiv,w
  5599  067E  00CC               	movwf	trimf@ua
  5600  067F  0831               	movf	?___ftdiv+1,w
  5601  0680  00CD               	movwf	trimf@ua+1
  5602  0681  0832               	movf	?___ftdiv+2,w
  5603  0682  2E9F               	goto	L9
  5604  0683                     i1l2379:	
  5605                           
  5606                           ;main.c: 69: else if (x > c)
  5607  0683  1283               	bcf	3,5	;RP0=0, select bank0
  5608  0684  1303               	bcf	3,6	;RP1=0, select bank0
  5609  0685  0849               	movf	trimf@c,w
  5610  0686  00F0               	movwf	___ftge@ff1
  5611  0687  084A               	movf	trimf@c+1,w
  5612  0688  00F1               	movwf	___ftge@ff1+1
  5613  0689  084B               	movf	trimf@c+2,w
  5614  068A  00F2               	movwf	___ftge@ff1+2
  5615  068B  0840               	movf	trimf@x,w
  5616  068C  00F3               	movwf	___ftge@ff2
  5617  068D  0841               	movf	trimf@x+1,w
  5618  068E  00F4               	movwf	___ftge@ff2+1
  5619  068F  0842               	movf	trimf@x+2,w
  5620  0690  00F5               	movwf	___ftge@ff2+2
  5621  0691  120A  158A  2348  120A  118A  	fcall	___ftge
  5622  0696  1803               	btfsc	3,0
  5623  0697  2EA0               	goto	i1l110
  5624  0698                     L11:	
  5625                           
  5626                           ;main.c: 70: ua = 0;
  5627  0698  3000               	movlw	0
  5628  0699  1283               	bcf	3,5	;RP0=0, select bank0
  5629  069A  1303               	bcf	3,6	;RP1=0, select bank0
  5630  069B  00CC               	movwf	trimf@ua
  5631  069C  3000               	movlw	0
  5632  069D  00CD               	movwf	trimf@ua+1
  5633  069E  3000               	movlw	0
  5634  069F                     L9:	
  5635  069F  00CE               	movwf	trimf@ua+2
  5636  06A0                     i1l110:	
  5637                           
  5638                           ;main.c: 72: return(ua);
  5639  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  5640  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  5641  06A2  084C               	movf	trimf@ua,w
  5642  06A3  00C0               	movwf	?_trimf
  5643  06A4  084D               	movf	trimf@ua+1,w
  5644  06A5  00C1               	movwf	?_trimf+1
  5645  06A6  084E               	movf	trimf@ua+2,w
  5646  06A7  00C2               	movwf	?_trimf+2
  5647  06A8  0008               	return
  5648  06A9                     __end_of_trimf:	
  5649                           
  5650                           	psect	text25
  5651  0878                     __ptext25:	
  5652 ;; *************** function ___ftneg *****************
  5653 ;; Defined at:
  5654 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  f1              3    0[BANK0 ] float 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  3    0[BANK0 ] float 
  5661 ;; Registers used:
  5662 ;;		wreg
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5668 ;;      Params:         0       3       0       0       0
  5669 ;;      Locals:         0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0
  5671 ;;      Totals:         0       3       0       0       0
  5672 ;;Total ram usage:        3 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_trimf
  5678 ;;		_ISR
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function ___ftneg
  5684  0878                     ___ftneg:	
  5685                           
  5686                           ;incstack = 0
  5687                           ; Regs used in ___ftneg: [wreg]
  5688  0878  1283               	bcf	3,5	;RP0=0, select bank0
  5689  0879  1303               	bcf	3,6	;RP1=0, select bank0
  5690  087A  0822               	movf	___ftneg@f1+2,w
  5691  087B  0421               	iorwf	___ftneg@f1+1,w
  5692  087C  0420               	iorwf	___ftneg@f1,w
  5693  087D  1903               	skipnz
  5694  087E  0008               	return
  5695  087F  3080               	movlw	128
  5696  0880  06A2               	xorwf	___ftneg@f1+2,f
  5697  0881  0008               	return
  5698  0882                     __end_of___ftneg:	
  5699                           
  5700                           	psect	text26
  5701  0B48                     __ptext26:	
  5702 ;; *************** function ___ftge *****************
  5703 ;; Defined at:
  5704 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  ff1             3    0[COMMON] float 
  5707 ;;  ff2             3    3[COMMON] float 
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;		None
  5710 ;; Return value:  Size  Location     Type
  5711 ;;		None               void
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5719 ;;      Params:         6       0       0       0       0
  5720 ;;      Locals:         0       0       0       0       0
  5721 ;;      Temps:          6       0       0       0       0
  5722 ;;      Totals:        12       0       0       0       0
  5723 ;;Total ram usage:       12 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_trimf
  5729 ;;		_ISR
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           
  5734                           ;psect for function ___ftge
  5735  0B48                     ___ftge:	
  5736                           
  5737                           ;incstack = 0
  5738                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5739  0B48  1FF2               	btfss	___ftge@ff1+2,7
  5740  0B49  2B6F               	goto	i1l2289
  5741  0B4A  3000               	movlw	0
  5742  0B4B  00F6               	movwf	??___ftge
  5743  0B4C  3000               	movlw	0
  5744  0B4D  00F7               	movwf	??___ftge+1
  5745  0B4E  3080               	movlw	128
  5746  0B4F  00F8               	movwf	??___ftge+2
  5747  0B50  0970               	comf	___ftge@ff1,w
  5748  0B51  00F9               	movwf	??___ftge+3
  5749  0B52  0971               	comf	___ftge@ff1+1,w
  5750  0B53  00FA               	movwf	??___ftge+4
  5751  0B54  0972               	comf	___ftge@ff1+2,w
  5752  0B55  00FB               	movwf	??___ftge+5
  5753  0B56  0AF9               	incf	??___ftge+3,f
  5754  0B57  1903               	skipnz
  5755  0B58  0AFA               	incf	??___ftge+4,f
  5756  0B59  1903               	skipnz
  5757  0B5A  0AFB               	incf	??___ftge+5,f
  5758  0B5B  0879               	movf	??___ftge+3,w
  5759  0B5C  07F6               	addwf	??___ftge,f
  5760  0B5D  087A               	movf	??___ftge+4,w
  5761  0B5E  1803               	skipnc
  5762  0B5F  0F7A               	incfsz	??___ftge+4,w
  5763  0B60  2B62               	goto	u242_21
  5764  0B61  2B63               	goto	u242_22
  5765  0B62                     u242_21:	
  5766  0B62  07F7               	addwf	??___ftge+1,f
  5767  0B63                     u242_22:	
  5768  0B63  087B               	movf	??___ftge+5,w
  5769  0B64  1803               	skipnc
  5770  0B65  0F7B               	incfsz	??___ftge+5,w
  5771  0B66  2B68               	goto	u242_23
  5772  0B67  2B69               	goto	u242_24
  5773  0B68                     u242_23:	
  5774  0B68  07F8               	addwf	??___ftge+2,f
  5775  0B69                     u242_24:	
  5776  0B69  0876               	movf	??___ftge,w
  5777  0B6A  00F0               	movwf	___ftge@ff1
  5778  0B6B  0877               	movf	??___ftge+1,w
  5779  0B6C  00F1               	movwf	___ftge@ff1+1
  5780  0B6D  0878               	movf	??___ftge+2,w
  5781  0B6E  00F2               	movwf	___ftge@ff1+2
  5782  0B6F                     i1l2289:	
  5783  0B6F  1FF5               	btfss	___ftge@ff2+2,7
  5784  0B70  2B96               	goto	i1l2293
  5785  0B71  3000               	movlw	0
  5786  0B72  00F6               	movwf	??___ftge
  5787  0B73  3000               	movlw	0
  5788  0B74  00F7               	movwf	??___ftge+1
  5789  0B75  3080               	movlw	128
  5790  0B76  00F8               	movwf	??___ftge+2
  5791  0B77  0973               	comf	___ftge@ff2,w
  5792  0B78  00F9               	movwf	??___ftge+3
  5793  0B79  0974               	comf	___ftge@ff2+1,w
  5794  0B7A  00FA               	movwf	??___ftge+4
  5795  0B7B  0975               	comf	___ftge@ff2+2,w
  5796  0B7C  00FB               	movwf	??___ftge+5
  5797  0B7D  0AF9               	incf	??___ftge+3,f
  5798  0B7E  1903               	skipnz
  5799  0B7F  0AFA               	incf	??___ftge+4,f
  5800  0B80  1903               	skipnz
  5801  0B81  0AFB               	incf	??___ftge+5,f
  5802  0B82  0879               	movf	??___ftge+3,w
  5803  0B83  07F6               	addwf	??___ftge,f
  5804  0B84  087A               	movf	??___ftge+4,w
  5805  0B85  1803               	skipnc
  5806  0B86  0F7A               	incfsz	??___ftge+4,w
  5807  0B87  2B89               	goto	u244_21
  5808  0B88  2B8A               	goto	u244_22
  5809  0B89                     u244_21:	
  5810  0B89  07F7               	addwf	??___ftge+1,f
  5811  0B8A                     u244_22:	
  5812  0B8A  087B               	movf	??___ftge+5,w
  5813  0B8B  1803               	skipnc
  5814  0B8C  0F7B               	incfsz	??___ftge+5,w
  5815  0B8D  2B8F               	goto	u244_23
  5816  0B8E  2B90               	goto	u244_24
  5817  0B8F                     u244_23:	
  5818  0B8F  07F8               	addwf	??___ftge+2,f
  5819  0B90                     u244_24:	
  5820  0B90  0876               	movf	??___ftge,w
  5821  0B91  00F3               	movwf	___ftge@ff2
  5822  0B92  0877               	movf	??___ftge+1,w
  5823  0B93  00F4               	movwf	___ftge@ff2+1
  5824  0B94  0878               	movf	??___ftge+2,w
  5825  0B95  00F5               	movwf	___ftge@ff2+2
  5826  0B96                     i1l2293:	
  5827  0B96  3080               	movlw	128
  5828  0B97  06F2               	xorwf	___ftge@ff1+2,f
  5829  0B98  3080               	movlw	128
  5830  0B99  06F5               	xorwf	___ftge@ff2+2,f
  5831  0B9A  0875               	movf	___ftge@ff2+2,w
  5832  0B9B  0272               	subwf	___ftge@ff1+2,w
  5833  0B9C  1D03               	skipz
  5834  0B9D  0008               	return
  5835  0B9E  0874               	movf	___ftge@ff2+1,w
  5836  0B9F  0271               	subwf	___ftge@ff1+1,w
  5837  0BA0  1D03               	skipz
  5838  0BA1  0008               	return
  5839  0BA2  0873               	movf	___ftge@ff2,w
  5840  0BA3  0270               	subwf	___ftge@ff1,w
  5841  0BA4  0008               	return
  5842  0BA5                     __end_of___ftge:	
  5843                           
  5844                           	psect	text27
  5845  0D95                     __ptext27:	
  5846 ;; *************** function ___ftdiv *****************
  5847 ;; Defined at:
  5848 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  f2              3   16[BANK0 ] float 
  5851 ;;  f1              3   19[BANK0 ] float 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  f3              3   27[BANK0 ] float 
  5854 ;;  sign            1   31[BANK0 ] unsigned char 
  5855 ;;  exp             1   30[BANK0 ] unsigned char 
  5856 ;;  cntr            1   26[BANK0 ] unsigned char 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  3   16[BANK0 ] float 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, pclath, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5866 ;;      Params:         0       6       0       0       0
  5867 ;;      Locals:         0       6       0       0       0
  5868 ;;      Temps:          0       4       0       0       0
  5869 ;;      Totals:         0      16       0       0       0
  5870 ;;Total ram usage:       16 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    1
  5873 ;; This function calls:
  5874 ;;		___ftpack
  5875 ;; This function is called by:
  5876 ;;		_trimf
  5877 ;;		_ISR
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function ___ftdiv
  5883  0D95                     ___ftdiv:	
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5887  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5888  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5889  0D97  0833               	movf	___ftdiv@f1,w
  5890  0D98  00B6               	movwf	??___ftdiv
  5891  0D99  0834               	movf	___ftdiv@f1+1,w
  5892  0D9A  00B7               	movwf	??___ftdiv+1
  5893  0D9B  0835               	movf	___ftdiv@f1+2,w
  5894  0D9C  00B8               	movwf	??___ftdiv+2
  5895  0D9D  1003               	clrc
  5896  0D9E  0D37               	rlf	??___ftdiv+1,w
  5897  0D9F  0D38               	rlf	??___ftdiv+2,w
  5898  0DA0  00B9               	movwf	??___ftdiv+3
  5899  0DA1  0839               	movf	??___ftdiv+3,w
  5900  0DA2  00BE               	movwf	___ftdiv@exp
  5901  0DA3  08BE               	movf	___ftdiv@exp,f
  5902  0DA4  1D03               	skipz
  5903  0DA5  2DAD               	goto	i1l2249
  5904  0DA6  3000               	movlw	0
  5905  0DA7  00B0               	movwf	?___ftdiv
  5906  0DA8  3000               	movlw	0
  5907  0DA9  00B1               	movwf	?___ftdiv+1
  5908  0DAA  3000               	movlw	0
  5909  0DAB  00B2               	movwf	?___ftdiv+2
  5910  0DAC  0008               	return
  5911  0DAD                     i1l2249:	
  5912  0DAD  0830               	movf	___ftdiv@f2,w
  5913  0DAE  00B6               	movwf	??___ftdiv
  5914  0DAF  0831               	movf	___ftdiv@f2+1,w
  5915  0DB0  00B7               	movwf	??___ftdiv+1
  5916  0DB1  0832               	movf	___ftdiv@f2+2,w
  5917  0DB2  00B8               	movwf	??___ftdiv+2
  5918  0DB3  1003               	clrc
  5919  0DB4  0D37               	rlf	??___ftdiv+1,w
  5920  0DB5  0D38               	rlf	??___ftdiv+2,w
  5921  0DB6  00B9               	movwf	??___ftdiv+3
  5922  0DB7  0839               	movf	??___ftdiv+3,w
  5923  0DB8  00BF               	movwf	___ftdiv@sign
  5924  0DB9  08BF               	movf	___ftdiv@sign,f
  5925  0DBA  1D03               	skipz
  5926  0DBB  2DC3               	goto	i1l2255
  5927  0DBC  3000               	movlw	0
  5928  0DBD  00B0               	movwf	?___ftdiv
  5929  0DBE  3000               	movlw	0
  5930  0DBF  00B1               	movwf	?___ftdiv+1
  5931  0DC0  3000               	movlw	0
  5932  0DC1  00B2               	movwf	?___ftdiv+2
  5933  0DC2  0008               	return
  5934  0DC3                     i1l2255:	
  5935  0DC3  3000               	movlw	0
  5936  0DC4  00BB               	movwf	___ftdiv@f3
  5937  0DC5  3000               	movlw	0
  5938  0DC6  00BC               	movwf	___ftdiv@f3+1
  5939  0DC7  3000               	movlw	0
  5940  0DC8  00BD               	movwf	___ftdiv@f3+2
  5941  0DC9  3089               	movlw	137
  5942  0DCA  073F               	addwf	___ftdiv@sign,w
  5943  0DCB  00B6               	movwf	??___ftdiv
  5944  0DCC  0836               	movf	??___ftdiv,w
  5945  0DCD  02BE               	subwf	___ftdiv@exp,f
  5946  0DCE  0833               	movf	___ftdiv@f1,w
  5947  0DCF  00B6               	movwf	??___ftdiv
  5948  0DD0  0834               	movf	___ftdiv@f1+1,w
  5949  0DD1  00B7               	movwf	??___ftdiv+1
  5950  0DD2  0835               	movf	___ftdiv@f1+2,w
  5951  0DD3  00B8               	movwf	??___ftdiv+2
  5952  0DD4  3010               	movlw	16
  5953  0DD5                     u235_25:	
  5954  0DD5  1003               	clrc
  5955  0DD6  0CB8               	rrf	??___ftdiv+2,f
  5956  0DD7  0CB7               	rrf	??___ftdiv+1,f
  5957  0DD8  0CB6               	rrf	??___ftdiv,f
  5958  0DD9  3EFF               	addlw	-1
  5959  0DDA  1D03               	skipz
  5960  0DDB  2DD5               	goto	u235_25
  5961  0DDC  0836               	movf	??___ftdiv,w
  5962  0DDD  00B9               	movwf	??___ftdiv+3
  5963  0DDE  0839               	movf	??___ftdiv+3,w
  5964  0DDF  00BF               	movwf	___ftdiv@sign
  5965  0DE0  0830               	movf	___ftdiv@f2,w
  5966  0DE1  00B6               	movwf	??___ftdiv
  5967  0DE2  0831               	movf	___ftdiv@f2+1,w
  5968  0DE3  00B7               	movwf	??___ftdiv+1
  5969  0DE4  0832               	movf	___ftdiv@f2+2,w
  5970  0DE5  00B8               	movwf	??___ftdiv+2
  5971  0DE6  3010               	movlw	16
  5972  0DE7                     u236_25:	
  5973  0DE7  1003               	clrc
  5974  0DE8  0CB8               	rrf	??___ftdiv+2,f
  5975  0DE9  0CB7               	rrf	??___ftdiv+1,f
  5976  0DEA  0CB6               	rrf	??___ftdiv,f
  5977  0DEB  3EFF               	addlw	-1
  5978  0DEC  1D03               	skipz
  5979  0DED  2DE7               	goto	u236_25
  5980  0DEE  0836               	movf	??___ftdiv,w
  5981  0DEF  00B9               	movwf	??___ftdiv+3
  5982  0DF0  0839               	movf	??___ftdiv+3,w
  5983  0DF1  06BF               	xorwf	___ftdiv@sign,f
  5984  0DF2  3080               	movlw	128
  5985  0DF3  00B6               	movwf	??___ftdiv
  5986  0DF4  0836               	movf	??___ftdiv,w
  5987  0DF5  05BF               	andwf	___ftdiv@sign,f
  5988  0DF6  17B4               	bsf	___ftdiv@f1+1,7
  5989  0DF7  30FF               	movlw	255
  5990  0DF8  05B3               	andwf	___ftdiv@f1,f
  5991  0DF9  30FF               	movlw	255
  5992  0DFA  05B4               	andwf	___ftdiv@f1+1,f
  5993  0DFB  3000               	movlw	0
  5994  0DFC  05B5               	andwf	___ftdiv@f1+2,f
  5995  0DFD  17B1               	bsf	___ftdiv@f2+1,7
  5996  0DFE  30FF               	movlw	255
  5997  0DFF  05B0               	andwf	___ftdiv@f2,f
  5998  0E00  30FF               	movlw	255
  5999  0E01  05B1               	andwf	___ftdiv@f2+1,f
  6000  0E02  3000               	movlw	0
  6001  0E03  05B2               	andwf	___ftdiv@f2+2,f
  6002  0E04  3018               	movlw	24
  6003  0E05  00B6               	movwf	??___ftdiv
  6004  0E06  0836               	movf	??___ftdiv,w
  6005  0E07  00BA               	movwf	___ftdiv@cntr
  6006  0E08                     i1l2269:	
  6007  0E08  3001               	movlw	1
  6008  0E09                     u237_25:	
  6009  0E09  1003               	clrc
  6010  0E0A  0DBB               	rlf	___ftdiv@f3,f
  6011  0E0B  0DBC               	rlf	___ftdiv@f3+1,f
  6012  0E0C  0DBD               	rlf	___ftdiv@f3+2,f
  6013  0E0D  3EFF               	addlw	-1
  6014  0E0E  1D03               	skipz
  6015  0E0F  2E09               	goto	u237_25
  6016  0E10  0832               	movf	___ftdiv@f2+2,w
  6017  0E11  0235               	subwf	___ftdiv@f1+2,w
  6018  0E12  1D03               	skipz
  6019  0E13  2E1A               	goto	u238_25
  6020  0E14  0831               	movf	___ftdiv@f2+1,w
  6021  0E15  0234               	subwf	___ftdiv@f1+1,w
  6022  0E16  1D03               	skipz
  6023  0E17  2E1A               	goto	u238_25
  6024  0E18  0830               	movf	___ftdiv@f2,w
  6025  0E19  0233               	subwf	___ftdiv@f1,w
  6026  0E1A                     u238_25:	
  6027  0E1A  1C03               	skipc
  6028  0E1B  2E27               	goto	i1l2277
  6029  0E1C  0830               	movf	___ftdiv@f2,w
  6030  0E1D  02B3               	subwf	___ftdiv@f1,f
  6031  0E1E  0831               	movf	___ftdiv@f2+1,w
  6032  0E1F  1C03               	skipc
  6033  0E20  0F31               	incfsz	___ftdiv@f2+1,w
  6034  0E21  02B4               	subwf	___ftdiv@f1+1,f
  6035  0E22  0832               	movf	___ftdiv@f2+2,w
  6036  0E23  1C03               	skipc
  6037  0E24  0A32               	incf	___ftdiv@f2+2,w
  6038  0E25  02B5               	subwf	___ftdiv@f1+2,f
  6039  0E26  143B               	bsf	___ftdiv@f3,0
  6040  0E27                     i1l2277:	
  6041  0E27  3001               	movlw	1
  6042  0E28                     u239_25:	
  6043  0E28  1003               	clrc
  6044  0E29  0DB3               	rlf	___ftdiv@f1,f
  6045  0E2A  0DB4               	rlf	___ftdiv@f1+1,f
  6046  0E2B  0DB5               	rlf	___ftdiv@f1+2,f
  6047  0E2C  3EFF               	addlw	-1
  6048  0E2D  1D03               	skipz
  6049  0E2E  2E28               	goto	u239_25
  6050  0E2F  3001               	movlw	1
  6051  0E30  02BA               	subwf	___ftdiv@cntr,f
  6052  0E31  1D03               	btfss	3,2
  6053  0E32  2E08               	goto	i1l2269
  6054  0E33  083B               	movf	___ftdiv@f3,w
  6055  0E34  00F0               	movwf	___ftpack@arg
  6056  0E35  083C               	movf	___ftdiv@f3+1,w
  6057  0E36  00F1               	movwf	___ftpack@arg+1
  6058  0E37  083D               	movf	___ftdiv@f3+2,w
  6059  0E38  00F2               	movwf	___ftpack@arg+2
  6060  0E39  083E               	movf	___ftdiv@exp,w
  6061  0E3A  00B6               	movwf	??___ftdiv
  6062  0E3B  0836               	movf	??___ftdiv,w
  6063  0E3C  00F3               	movwf	___ftpack@exp
  6064  0E3D  083F               	movf	___ftdiv@sign,w
  6065  0E3E  00B7               	movwf	??___ftdiv+1
  6066  0E3F  0837               	movf	??___ftdiv+1,w
  6067  0E40  00F4               	movwf	___ftpack@sign
  6068  0E41  120A  158A  23A5   	fcall	___ftpack
  6069  0E44  0870               	movf	?___ftpack,w
  6070  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  6071  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  6072  0E47  00B0               	movwf	?___ftdiv
  6073  0E48  0871               	movf	?___ftpack+1,w
  6074  0E49  00B1               	movwf	?___ftdiv+1
  6075  0E4A  0872               	movf	?___ftpack+2,w
  6076  0E4B  00B2               	movwf	?___ftdiv+2
  6077  0E4C  0008               	return
  6078  0E4D                     __end_of___ftdiv:	
  6079                           
  6080                           	psect	text28
  6081  06A9                     __ptext28:	
  6082 ;; *************** function ___ftadd *****************
  6083 ;; Defined at:
  6084 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;  f1              3    3[BANK0 ] float 
  6087 ;;  f2              3    6[BANK0 ] float 
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;  exp1            1   15[BANK0 ] unsigned char 
  6090 ;;  exp2            1   14[BANK0 ] unsigned char 
  6091 ;;  sign            1   13[BANK0 ] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  3    3[BANK0 ] float 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0, pclath, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6101 ;;      Params:         0       6       0       0       0
  6102 ;;      Locals:         0       3       0       0       0
  6103 ;;      Temps:          0       4       0       0       0
  6104 ;;      Totals:         0      13       0       0       0
  6105 ;;Total ram usage:       13 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    1
  6108 ;; This function calls:
  6109 ;;		___ftpack
  6110 ;; This function is called by:
  6111 ;;		_trimf
  6112 ;;		_ISR
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           
  6117                           ;psect for function ___ftadd
  6118  06A9                     ___ftadd:	
  6119                           
  6120                           ;incstack = 0
  6121                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6122  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  6123  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  6124  06AB  0823               	movf	___ftadd@f1,w
  6125  06AC  00A9               	movwf	??___ftadd
  6126  06AD  0824               	movf	___ftadd@f1+1,w
  6127  06AE  00AA               	movwf	??___ftadd+1
  6128  06AF  0825               	movf	___ftadd@f1+2,w
  6129  06B0  00AB               	movwf	??___ftadd+2
  6130  06B1  1003               	clrc
  6131  06B2  0D2A               	rlf	??___ftadd+1,w
  6132  06B3  0D2B               	rlf	??___ftadd+2,w
  6133  06B4  00AC               	movwf	??___ftadd+3
  6134  06B5  082C               	movf	??___ftadd+3,w
  6135  06B6  00AF               	movwf	___ftadd@exp1
  6136  06B7  0826               	movf	___ftadd@f2,w
  6137  06B8  00A9               	movwf	??___ftadd
  6138  06B9  0827               	movf	___ftadd@f2+1,w
  6139  06BA  00AA               	movwf	??___ftadd+1
  6140  06BB  0828               	movf	___ftadd@f2+2,w
  6141  06BC  00AB               	movwf	??___ftadd+2
  6142  06BD  1003               	clrc
  6143  06BE  0D2A               	rlf	??___ftadd+1,w
  6144  06BF  0D2B               	rlf	??___ftadd+2,w
  6145  06C0  00AC               	movwf	??___ftadd+3
  6146  06C1  082C               	movf	??___ftadd+3,w
  6147  06C2  00AE               	movwf	___ftadd@exp2
  6148  06C3  082F               	movf	___ftadd@exp1,w
  6149  06C4  1903               	btfsc	3,2
  6150  06C5  2ED2               	goto	i1l2179
  6151  06C6  082E               	movf	___ftadd@exp2,w
  6152  06C7  022F               	subwf	___ftadd@exp1,w
  6153  06C8  1803               	skipnc
  6154  06C9  2ED9               	goto	i1l2183
  6155  06CA  032F               	decf	___ftadd@exp1,w
  6156  06CB  3AFF               	xorlw	255
  6157  06CC  072E               	addwf	___ftadd@exp2,w
  6158  06CD  00A9               	movwf	??___ftadd
  6159  06CE  3019               	movlw	25
  6160  06CF  0229               	subwf	??___ftadd,w
  6161  06D0  1C03               	skipc
  6162  06D1  2ED9               	goto	i1l2183
  6163  06D2                     i1l2179:	
  6164  06D2  0826               	movf	___ftadd@f2,w
  6165  06D3  00A3               	movwf	?___ftadd
  6166  06D4  0827               	movf	___ftadd@f2+1,w
  6167  06D5  00A4               	movwf	?___ftadd+1
  6168  06D6  0828               	movf	___ftadd@f2+2,w
  6169  06D7  00A5               	movwf	?___ftadd+2
  6170  06D8  0008               	return
  6171  06D9                     i1l2183:	
  6172  06D9  082E               	movf	___ftadd@exp2,w
  6173  06DA  1903               	btfsc	3,2
  6174  06DB  0008               	return
  6175  06DC  082F               	movf	___ftadd@exp1,w
  6176  06DD  022E               	subwf	___ftadd@exp2,w
  6177  06DE  1803               	skipnc
  6178  06DF  2EE8               	goto	i1l2189
  6179  06E0  032E               	decf	___ftadd@exp2,w
  6180  06E1  3AFF               	xorlw	255
  6181  06E2  072F               	addwf	___ftadd@exp1,w
  6182  06E3  00A9               	movwf	??___ftadd
  6183  06E4  3019               	movlw	25
  6184  06E5  0229               	subwf	??___ftadd,w
  6185  06E6  1803               	btfsc	3,0
  6186  06E7  0008               	return
  6187  06E8                     i1l2189:	
  6188  06E8  3006               	movlw	6
  6189  06E9  00A9               	movwf	??___ftadd
  6190  06EA  0829               	movf	??___ftadd,w
  6191  06EB  00AD               	movwf	___ftadd@sign
  6192  06EC  1BA5               	btfsc	___ftadd@f1+2,7
  6193  06ED  17AD               	bsf	___ftadd@sign,7
  6194  06EE  1BA8               	btfsc	___ftadd@f2+2,7
  6195  06EF  172D               	bsf	___ftadd@sign,6
  6196  06F0  17A4               	bsf	___ftadd@f1+1,7
  6197  06F1  30FF               	movlw	255
  6198  06F2  05A3               	andwf	___ftadd@f1,f
  6199  06F3  30FF               	movlw	255
  6200  06F4  05A4               	andwf	___ftadd@f1+1,f
  6201  06F5  3000               	movlw	0
  6202  06F6  05A5               	andwf	___ftadd@f1+2,f
  6203  06F7  17A7               	bsf	___ftadd@f2+1,7
  6204  06F8  30FF               	movlw	255
  6205  06F9  05A6               	andwf	___ftadd@f2,f
  6206  06FA  30FF               	movlw	255
  6207  06FB  05A7               	andwf	___ftadd@f2+1,f
  6208  06FC  3000               	movlw	0
  6209  06FD  05A8               	andwf	___ftadd@f2+2,f
  6210  06FE  082E               	movf	___ftadd@exp2,w
  6211  06FF  022F               	subwf	___ftadd@exp1,w
  6212  0700  1803               	skipnc
  6213  0701  2F28               	goto	i1l2211
  6214  0702                     i1l2201:	
  6215  0702  3001               	movlw	1
  6216  0703                     u218_25:	
  6217  0703  1003               	clrc
  6218  0704  0DA6               	rlf	___ftadd@f2,f
  6219  0705  0DA7               	rlf	___ftadd@f2+1,f
  6220  0706  0DA8               	rlf	___ftadd@f2+2,f
  6221  0707  3EFF               	addlw	-1
  6222  0708  1D03               	skipz
  6223  0709  2F03               	goto	u218_25
  6224  070A  3001               	movlw	1
  6225  070B  02AE               	subwf	___ftadd@exp2,f
  6226  070C  082E               	movf	___ftadd@exp2,w
  6227  070D  062F               	xorwf	___ftadd@exp1,w
  6228  070E  1903               	skipnz
  6229  070F  2F23               	goto	i1l2209
  6230  0710  3001               	movlw	1
  6231  0711  02AD               	subwf	___ftadd@sign,f
  6232  0712  082D               	movf	___ftadd@sign,w
  6233  0713  3907               	andlw	7
  6234  0714  1903               	btfsc	3,2
  6235  0715  2F23               	goto	i1l2209
  6236  0716  2F02               	goto	i1l2201
  6237  0717                     i1l2207:	
  6238  0717  3001               	movlw	1
  6239  0718                     u221_25:	
  6240  0718  1003               	clrc
  6241  0719  0CA5               	rrf	___ftadd@f1+2,f
  6242  071A  0CA4               	rrf	___ftadd@f1+1,f
  6243  071B  0CA3               	rrf	___ftadd@f1,f
  6244  071C  3EFF               	addlw	-1
  6245  071D  1D03               	skipz
  6246  071E  2F18               	goto	u221_25
  6247  071F  3001               	movlw	1
  6248  0720  00A9               	movwf	??___ftadd
  6249  0721  0829               	movf	??___ftadd,w
  6250  0722  07AF               	addwf	___ftadd@exp1,f
  6251  0723                     i1l2209:	
  6252  0723  082F               	movf	___ftadd@exp1,w
  6253  0724  062E               	xorwf	___ftadd@exp2,w
  6254  0725  1903               	btfsc	3,2
  6255  0726  2F51               	goto	i1l753
  6256  0727  2F17               	goto	i1l2207
  6257  0728                     i1l2211:	
  6258  0728  082F               	movf	___ftadd@exp1,w
  6259  0729  022E               	subwf	___ftadd@exp2,w
  6260  072A  1803               	skipnc
  6261  072B  2F51               	goto	i1l753
  6262  072C                     i1l2213:	
  6263  072C  3001               	movlw	1
  6264  072D                     u224_25:	
  6265  072D  1003               	clrc
  6266  072E  0DA3               	rlf	___ftadd@f1,f
  6267  072F  0DA4               	rlf	___ftadd@f1+1,f
  6268  0730  0DA5               	rlf	___ftadd@f1+2,f
  6269  0731  3EFF               	addlw	-1
  6270  0732  1D03               	skipz
  6271  0733  2F2D               	goto	u224_25
  6272  0734  3001               	movlw	1
  6273  0735  02AF               	subwf	___ftadd@exp1,f
  6274  0736  082E               	movf	___ftadd@exp2,w
  6275  0737  062F               	xorwf	___ftadd@exp1,w
  6276  0738  1903               	skipnz
  6277  0739  2F4D               	goto	i1l2221
  6278  073A  3001               	movlw	1
  6279  073B  02AD               	subwf	___ftadd@sign,f
  6280  073C  082D               	movf	___ftadd@sign,w
  6281  073D  3907               	andlw	7
  6282  073E  1903               	btfsc	3,2
  6283  073F  2F4D               	goto	i1l2221
  6284  0740  2F2C               	goto	i1l2213
  6285  0741                     i1l2219:	
  6286  0741  3001               	movlw	1
  6287  0742                     u227_25:	
  6288  0742  1003               	clrc
  6289  0743  0CA8               	rrf	___ftadd@f2+2,f
  6290  0744  0CA7               	rrf	___ftadd@f2+1,f
  6291  0745  0CA6               	rrf	___ftadd@f2,f
  6292  0746  3EFF               	addlw	-1
  6293  0747  1D03               	skipz
  6294  0748  2F42               	goto	u227_25
  6295  0749  3001               	movlw	1
  6296  074A  00A9               	movwf	??___ftadd
  6297  074B  0829               	movf	??___ftadd,w
  6298  074C  07AE               	addwf	___ftadd@exp2,f
  6299  074D                     i1l2221:	
  6300  074D  082F               	movf	___ftadd@exp1,w
  6301  074E  062E               	xorwf	___ftadd@exp2,w
  6302  074F  1D03               	skipz
  6303  0750  2F41               	goto	i1l2219
  6304  0751                     i1l753:	
  6305  0751  1FAD               	btfss	___ftadd@sign,7
  6306  0752  2F63               	goto	i1l2225
  6307  0753  30FF               	movlw	255
  6308  0754  06A3               	xorwf	___ftadd@f1,f
  6309  0755  30FF               	movlw	255
  6310  0756  06A4               	xorwf	___ftadd@f1+1,f
  6311  0757  30FF               	movlw	255
  6312  0758  06A5               	xorwf	___ftadd@f1+2,f
  6313  0759  3001               	movlw	1
  6314  075A  07A3               	addwf	___ftadd@f1,f
  6315  075B  3000               	movlw	0
  6316  075C  1803               	skipnc
  6317  075D  3001               	movlw	1
  6318  075E  07A4               	addwf	___ftadd@f1+1,f
  6319  075F  3000               	movlw	0
  6320  0760  1803               	skipnc
  6321  0761  3001               	movlw	1
  6322  0762  07A5               	addwf	___ftadd@f1+2,f
  6323  0763                     i1l2225:	
  6324  0763  1F2D               	btfss	___ftadd@sign,6
  6325  0764  2F75               	goto	i1l2229
  6326  0765  30FF               	movlw	255
  6327  0766  06A6               	xorwf	___ftadd@f2,f
  6328  0767  30FF               	movlw	255
  6329  0768  06A7               	xorwf	___ftadd@f2+1,f
  6330  0769  30FF               	movlw	255
  6331  076A  06A8               	xorwf	___ftadd@f2+2,f
  6332  076B  3001               	movlw	1
  6333  076C  07A6               	addwf	___ftadd@f2,f
  6334  076D  3000               	movlw	0
  6335  076E  1803               	skipnc
  6336  076F  3001               	movlw	1
  6337  0770  07A7               	addwf	___ftadd@f2+1,f
  6338  0771  3000               	movlw	0
  6339  0772  1803               	skipnc
  6340  0773  3001               	movlw	1
  6341  0774  07A8               	addwf	___ftadd@f2+2,f
  6342  0775                     i1l2229:	
  6343  0775  01AD               	clrf	___ftadd@sign
  6344  0776  0823               	movf	___ftadd@f1,w
  6345  0777  07A6               	addwf	___ftadd@f2,f
  6346  0778  0824               	movf	___ftadd@f1+1,w
  6347  0779  1103               	clrz
  6348  077A  1803               	skipnc
  6349  077B  0A24               	incf	___ftadd@f1+1,w
  6350  077C  1D03               	btfss	3,2
  6351  077D  07A7               	addwf	___ftadd@f2+1,f
  6352  077E  0825               	movf	___ftadd@f1+2,w
  6353  077F  1103               	clrz
  6354  0780  1803               	skipnc
  6355  0781  0A25               	incf	___ftadd@f1+2,w
  6356  0782  1D03               	btfss	3,2
  6357  0783  07A8               	addwf	___ftadd@f2+2,f
  6358  0784  1FA8               	btfss	___ftadd@f2+2,7
  6359  0785  2F98               	goto	i1l2239
  6360  0786  30FF               	movlw	255
  6361  0787  06A6               	xorwf	___ftadd@f2,f
  6362  0788  30FF               	movlw	255
  6363  0789  06A7               	xorwf	___ftadd@f2+1,f
  6364  078A  30FF               	movlw	255
  6365  078B  06A8               	xorwf	___ftadd@f2+2,f
  6366  078C  3001               	movlw	1
  6367  078D  07A6               	addwf	___ftadd@f2,f
  6368  078E  3000               	movlw	0
  6369  078F  1803               	skipnc
  6370  0790  3001               	movlw	1
  6371  0791  07A7               	addwf	___ftadd@f2+1,f
  6372  0792  3000               	movlw	0
  6373  0793  1803               	skipnc
  6374  0794  3001               	movlw	1
  6375  0795  07A8               	addwf	___ftadd@f2+2,f
  6376  0796  01AD               	clrf	___ftadd@sign
  6377  0797  0AAD               	incf	___ftadd@sign,f
  6378  0798                     i1l2239:	
  6379  0798  0826               	movf	___ftadd@f2,w
  6380  0799  00F0               	movwf	___ftpack@arg
  6381  079A  0827               	movf	___ftadd@f2+1,w
  6382  079B  00F1               	movwf	___ftpack@arg+1
  6383  079C  0828               	movf	___ftadd@f2+2,w
  6384  079D  00F2               	movwf	___ftpack@arg+2
  6385  079E  082F               	movf	___ftadd@exp1,w
  6386  079F  00A9               	movwf	??___ftadd
  6387  07A0  0829               	movf	??___ftadd,w
  6388  07A1  00F3               	movwf	___ftpack@exp
  6389  07A2  082D               	movf	___ftadd@sign,w
  6390  07A3  00AA               	movwf	??___ftadd+1
  6391  07A4  082A               	movf	??___ftadd+1,w
  6392  07A5  00F4               	movwf	___ftpack@sign
  6393  07A6  120A  158A  23A5   	fcall	___ftpack
  6394  07A9  0870               	movf	?___ftpack,w
  6395  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  6396  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  6397  07AC  00A3               	movwf	?___ftadd
  6398  07AD  0871               	movf	?___ftpack+1,w
  6399  07AE  00A4               	movwf	?___ftadd+1
  6400  07AF  0872               	movf	?___ftpack+2,w
  6401  07B0  00A5               	movwf	?___ftadd+2
  6402  07B1  0008               	return
  6403  07B2                     __end_of___ftadd:	
  6404                           
  6405                           	psect	text29
  6406  07B2                     __ptext29:	
  6407 ;; *************** function _send *****************
  6408 ;; Defined at:
  6409 ;;		line 76 in file "C:\Users\332414\Desktop\FyzzySI\firmware\main.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;  index           1    3[COMMON] unsigned char 
  6414 ;;  checksum        1    2[COMMON] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6424 ;;      Params:         0       0       0       0       0
  6425 ;;      Locals:         2       0       0       0       0
  6426 ;;      Temps:          1       0       0       0       0
  6427 ;;      Totals:         3       0       0       0       0
  6428 ;;Total ram usage:        3 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    1
  6431 ;; This function calls:
  6432 ;;		_USART_WriteChar
  6433 ;; This function is called by:
  6434 ;;		_ISR
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _send
  6440  07B2                     _send:	
  6441                           
  6442                           ;main.c: 80: buffer[0] = '#';
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _send: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6446  07B2  3023               	movlw	35
  6447  07B3  00F1               	movwf	??_send
  6448  07B4  0871               	movf	??_send,w
  6449  07B5  1683               	bsf	3,5	;RP0=1, select bank3
  6450  07B6  1703               	bsf	3,6	;RP1=1, select bank3
  6451  07B7  0090               	movwf	_buffer^(0+384)
  6452                           
  6453                           ;main.c: 81: buffer[1] = '$';
  6454  07B8  3024               	movlw	36
  6455  07B9  00F1               	movwf	??_send
  6456  07BA  0871               	movf	??_send,w
  6457  07BB  0091               	movwf	(_buffer^(0+384)+1)
  6458                           
  6459                           ;main.c: 82: buffer[2] = ':';
  6460  07BC  303A               	movlw	58
  6461  07BD  00F1               	movwf	??_send
  6462  07BE  0871               	movf	??_send,w
  6463  07BF  0092               	movwf	(_buffer^(0+384)+2)
  6464                           
  6465                           ;main.c: 85: buffer[3] = (rpm >> 8) & 0xFF;
  6466  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  6467  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  6468  07C2  083F               	movf	(_rpm+1)^(0+128),w
  6469  07C3  00F1               	movwf	??_send
  6470  07C4  0871               	movf	??_send,w
  6471  07C5  1683               	bsf	3,5	;RP0=1, select bank3
  6472  07C6  1703               	bsf	3,6	;RP1=1, select bank3
  6473  07C7  0093               	movwf	(_buffer^(0+384)+3)
  6474                           
  6475                           ;main.c: 86: buffer[4] = rpm & 0xFF;
  6476  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  6477  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  6478  07CA  083E               	movf	_rpm^(0+128),w
  6479  07CB  00F1               	movwf	??_send
  6480  07CC  0871               	movf	??_send,w
  6481  07CD  1683               	bsf	3,5	;RP0=1, select bank3
  6482  07CE  1703               	bsf	3,6	;RP1=1, select bank3
  6483  07CF  0094               	movwf	(_buffer^(0+384)+4)
  6484                           
  6485                           ;main.c: 87: buffer[5] = 0;
  6486  07D0  0195               	clrf	(_buffer^(0+384)+5)
  6487                           
  6488                           ;main.c: 89: unsigned char checksum = 0x00;
  6489  07D1  01F2               	clrf	send@checksum
  6490                           
  6491                           ;main.c: 90: for (unsigned char index = 0; index < 6; index++)
  6492  07D2  01F3               	clrf	send@index
  6493  07D3  3006               	movlw	6
  6494  07D4  0273               	subwf	send@index,w
  6495  07D5  1803               	btfsc	3,0
  6496  07D6  2FF1               	goto	i1l2407
  6497  07D7                     i1l2399:	
  6498                           
  6499                           ;main.c: 91: {
  6500                           ;main.c: 92: USART_WriteChar(buffer[index]);
  6501  07D7  0873               	movf	send@index,w
  6502  07D8  3E90               	addlw	_buffer& (0+255)
  6503  07D9  0084               	movwf	4
  6504  07DA  1783               	bsf	3,7	;select IRP bank3
  6505  07DB  0800               	movf	0,w
  6506  07DC  120A  158A  2060  120A  118A  	fcall	_USART_WriteChar
  6507                           
  6508                           ;main.c: 93: checksum ^= buffer[index];
  6509  07E1  0873               	movf	send@index,w
  6510  07E2  3E90               	addlw	_buffer& (0+255)
  6511  07E3  0084               	movwf	4
  6512  07E4  1783               	bsf	3,7	;select IRP bank3
  6513  07E5  0800               	movf	0,w
  6514  07E6  00F1               	movwf	??_send
  6515  07E7  0871               	movf	??_send,w
  6516  07E8  06F2               	xorwf	send@checksum,f
  6517  07E9  3001               	movlw	1
  6518  07EA  00F1               	movwf	??_send
  6519  07EB  0871               	movf	??_send,w
  6520  07EC  07F3               	addwf	send@index,f
  6521  07ED  3006               	movlw	6
  6522  07EE  0273               	subwf	send@index,w
  6523  07EF  1C03               	skipc
  6524  07F0  2FD7               	goto	i1l2399
  6525  07F1                     i1l2407:	
  6526                           
  6527                           ;main.c: 94: }
  6528                           ;main.c: 95: buffer[6] = checksum;
  6529  07F1  0872               	movf	send@checksum,w
  6530  07F2  00F1               	movwf	??_send
  6531  07F3  0871               	movf	??_send,w
  6532  07F4  1683               	bsf	3,5	;RP0=1, select bank3
  6533  07F5  1703               	bsf	3,6	;RP1=1, select bank3
  6534  07F6  0096               	movwf	(_buffer^(0+384)+6)
  6535                           
  6536                           ;main.c: 96: USART_WriteChar(buffer[6]);
  6537  07F7  0816               	movf	(_buffer^(0+384)+6),w
  6538  07F8  120A  158A  2060   	fcall	_USART_WriteChar
  6539  07FB  0008               	return
  6540  07FC                     __end_of_send:	
  6541                           
  6542                           	psect	text30
  6543  08AF                     __ptext30:	
  6544 ;; *************** function ___lwtoft *****************
  6545 ;; Defined at:
  6546 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  c               2    8[COMMON] unsigned int 
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  3    8[COMMON] float 
  6553 ;; Registers used:
  6554 ;;		wreg, status,2, status,0, pclath, cstack
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6560 ;;      Params:         3       0       0       0       0
  6561 ;;      Locals:         0       0       0       0       0
  6562 ;;      Temps:          1       0       0       0       0
  6563 ;;      Totals:         4       0       0       0       0
  6564 ;;Total ram usage:        4 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    1
  6567 ;; This function calls:
  6568 ;;		___ftpack
  6569 ;; This function is called by:
  6570 ;;		_ISR
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           
  6575                           ;psect for function ___lwtoft
  6576  08AF                     ___lwtoft:	
  6577                           
  6578                           ;incstack = 0
  6579                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6580  08AF  0878               	movf	___lwtoft@c,w
  6581  08B0  00F0               	movwf	___ftpack@arg
  6582  08B1  0879               	movf	___lwtoft@c+1,w
  6583  08B2  00F1               	movwf	___ftpack@arg+1
  6584  08B3  01F2               	clrf	___ftpack@arg+2
  6585  08B4  308E               	movlw	142
  6586  08B5  00FB               	movwf	??___lwtoft
  6587  08B6  087B               	movf	??___lwtoft,w
  6588  08B7  00F3               	movwf	___ftpack@exp
  6589  08B8  01F4               	clrf	___ftpack@sign
  6590  08B9  120A  158A  23A5   	fcall	___ftpack
  6591  08BC  0870               	movf	?___ftpack,w
  6592  08BD  00F8               	movwf	?___lwtoft
  6593  08BE  0871               	movf	?___ftpack+1,w
  6594  08BF  00F9               	movwf	?___lwtoft+1
  6595  08C0  0872               	movf	?___ftpack+2,w
  6596  08C1  00FA               	movwf	?___lwtoft+2
  6597  08C2  0008               	return
  6598  08C3                     __end_of___lwtoft:	
  6599                           
  6600                           	psect	text31
  6601  0C78                     __ptext31:	
  6602 ;; *************** function ___fttol *****************
  6603 ;; Defined at:
  6604 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  f1              3   48[BANK0 ] float 
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  lval            4   57[BANK0 ] unsigned long 
  6609 ;;  exp1            1   61[BANK0 ] unsigned char 
  6610 ;;  sign1           1   56[BANK0 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  4   48[BANK0 ] long 
  6613 ;; Registers used:
  6614 ;;		wreg, status,2, status,0
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6620 ;;      Params:         0       4       0       0       0
  6621 ;;      Locals:         0       6       0       0       0
  6622 ;;      Temps:          0       4       0       0       0
  6623 ;;      Totals:         0      14       0       0       0
  6624 ;;Total ram usage:       14 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_ISR
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function ___fttol
  6635  0C78                     ___fttol:	
  6636                           
  6637                           ;incstack = 0
  6638                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6639  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  6640  0C79  1303               	bcf	3,6	;RP1=0, select bank0
  6641  0C7A  0850               	movf	___fttol@f1,w
  6642  0C7B  00D4               	movwf	??___fttol
  6643  0C7C  0851               	movf	___fttol@f1+1,w
  6644  0C7D  00D5               	movwf	??___fttol+1
  6645  0C7E  0852               	movf	___fttol@f1+2,w
  6646  0C7F  00D6               	movwf	??___fttol+2
  6647  0C80  1003               	clrc
  6648  0C81  0D55               	rlf	??___fttol+1,w
  6649  0C82  0D56               	rlf	??___fttol+2,w
  6650  0C83  00D7               	movwf	??___fttol+3
  6651  0C84  0857               	movf	??___fttol+3,w
  6652  0C85  00DD               	movwf	___fttol@exp1
  6653  0C86  08DD               	movf	___fttol@exp1,f
  6654  0C87  1D03               	skipz
  6655  0C88  2C92               	goto	i1l2747
  6656  0C89  3000               	movlw	0
  6657  0C8A  00D3               	movwf	?___fttol+3
  6658  0C8B  3000               	movlw	0
  6659  0C8C  00D2               	movwf	?___fttol+2
  6660  0C8D  3000               	movlw	0
  6661  0C8E  00D1               	movwf	?___fttol+1
  6662  0C8F  3000               	movlw	0
  6663  0C90  00D0               	movwf	?___fttol
  6664  0C91  0008               	return
  6665  0C92                     i1l2747:	
  6666  0C92  0850               	movf	___fttol@f1,w
  6667  0C93  00D4               	movwf	??___fttol
  6668  0C94  0851               	movf	___fttol@f1+1,w
  6669  0C95  00D5               	movwf	??___fttol+1
  6670  0C96  0852               	movf	___fttol@f1+2,w
  6671  0C97  00D6               	movwf	??___fttol+2
  6672  0C98  3017               	movlw	23
  6673  0C99                     u309_25:	
  6674  0C99  1003               	clrc
  6675  0C9A  0CD6               	rrf	??___fttol+2,f
  6676  0C9B  0CD5               	rrf	??___fttol+1,f
  6677  0C9C  0CD4               	rrf	??___fttol,f
  6678  0C9D  3EFF               	addlw	-1
  6679  0C9E  1D03               	skipz
  6680  0C9F  2C99               	goto	u309_25
  6681  0CA0  0854               	movf	??___fttol,w
  6682  0CA1  00D7               	movwf	??___fttol+3
  6683  0CA2  0857               	movf	??___fttol+3,w
  6684  0CA3  00D8               	movwf	___fttol@sign1
  6685  0CA4  17D1               	bsf	___fttol@f1+1,7
  6686  0CA5  30FF               	movlw	255
  6687  0CA6  05D0               	andwf	___fttol@f1,f
  6688  0CA7  30FF               	movlw	255
  6689  0CA8  05D1               	andwf	___fttol@f1+1,f
  6690  0CA9  3000               	movlw	0
  6691  0CAA  05D2               	andwf	___fttol@f1+2,f
  6692  0CAB  0850               	movf	___fttol@f1,w
  6693  0CAC  00D9               	movwf	___fttol@lval
  6694  0CAD  0851               	movf	___fttol@f1+1,w
  6695  0CAE  00DA               	movwf	___fttol@lval+1
  6696  0CAF  0852               	movf	___fttol@f1+2,w
  6697  0CB0  00DB               	movwf	___fttol@lval+2
  6698  0CB1  01DC               	clrf	___fttol@lval+3
  6699  0CB2  308E               	movlw	142
  6700  0CB3  02DD               	subwf	___fttol@exp1,f
  6701  0CB4  1FDD               	btfss	___fttol@exp1,7
  6702  0CB5  2CD4               	goto	i1l2767
  6703  0CB6  085D               	movf	___fttol@exp1,w
  6704  0CB7  3A80               	xorlw	128
  6705  0CB8  3E8F               	addlw	143
  6706  0CB9  1803               	skipnc
  6707  0CBA  2CC4               	goto	i1l2765
  6708  0CBB  3000               	movlw	0
  6709  0CBC  00D3               	movwf	?___fttol+3
  6710  0CBD  3000               	movlw	0
  6711  0CBE  00D2               	movwf	?___fttol+2
  6712  0CBF  3000               	movlw	0
  6713  0CC0  00D1               	movwf	?___fttol+1
  6714  0CC1  3000               	movlw	0
  6715  0CC2  00D0               	movwf	?___fttol
  6716  0CC3  0008               	return
  6717  0CC4                     i1l2765:	
  6718  0CC4  3001               	movlw	1
  6719  0CC5                     u312_25:	
  6720  0CC5  1003               	clrc
  6721  0CC6  0CDC               	rrf	___fttol@lval+3,f
  6722  0CC7  0CDB               	rrf	___fttol@lval+2,f
  6723  0CC8  0CDA               	rrf	___fttol@lval+1,f
  6724  0CC9  0CD9               	rrf	___fttol@lval,f
  6725  0CCA  3EFF               	addlw	-1
  6726  0CCB  1D03               	skipz
  6727  0CCC  2CC5               	goto	u312_25
  6728  0CCD  3001               	movlw	1
  6729  0CCE  00D4               	movwf	??___fttol
  6730  0CCF  0854               	movf	??___fttol,w
  6731  0CD0  07DD               	addwf	___fttol@exp1,f
  6732  0CD1  1903               	btfsc	3,2
  6733  0CD2  2CEF               	goto	i1l2777
  6734  0CD3  2CC4               	goto	i1l2765
  6735  0CD4                     i1l2767:	
  6736  0CD4  3018               	movlw	24
  6737  0CD5  025D               	subwf	___fttol@exp1,w
  6738  0CD6  1C03               	skipc
  6739  0CD7  2CEC               	goto	i1l2775
  6740  0CD8  3000               	movlw	0
  6741  0CD9  00D3               	movwf	?___fttol+3
  6742  0CDA  3000               	movlw	0
  6743  0CDB  00D2               	movwf	?___fttol+2
  6744  0CDC  3000               	movlw	0
  6745  0CDD  00D1               	movwf	?___fttol+1
  6746  0CDE  3000               	movlw	0
  6747  0CDF  00D0               	movwf	?___fttol
  6748  0CE0  0008               	return
  6749  0CE1                     i1l2773:	
  6750  0CE1  3001               	movlw	1
  6751  0CE2  00D4               	movwf	??___fttol
  6752  0CE3                     u315_25:	
  6753  0CE3  1003               	clrc
  6754  0CE4  0DD9               	rlf	___fttol@lval,f
  6755  0CE5  0DDA               	rlf	___fttol@lval+1,f
  6756  0CE6  0DDB               	rlf	___fttol@lval+2,f
  6757  0CE7  0DDC               	rlf	___fttol@lval+3,f
  6758  0CE8  0BD4               	decfsz	??___fttol,f
  6759  0CE9  2CE3               	goto	u315_25
  6760  0CEA  3001               	movlw	1
  6761  0CEB  02DD               	subwf	___fttol@exp1,f
  6762  0CEC                     i1l2775:	
  6763  0CEC  08DD               	movf	___fttol@exp1,f
  6764  0CED  1D03               	skipz
  6765  0CEE  2CE1               	goto	i1l2773
  6766  0CEF                     i1l2777:	
  6767  0CEF  0858               	movf	___fttol@sign1,w
  6768  0CF0  1903               	btfsc	3,2
  6769  0CF1  2CFD               	goto	i1l2781
  6770  0CF2  09D9               	comf	___fttol@lval,f
  6771  0CF3  09DA               	comf	___fttol@lval+1,f
  6772  0CF4  09DB               	comf	___fttol@lval+2,f
  6773  0CF5  09DC               	comf	___fttol@lval+3,f
  6774  0CF6  0AD9               	incf	___fttol@lval,f
  6775  0CF7  1903               	skipnz
  6776  0CF8  0ADA               	incf	___fttol@lval+1,f
  6777  0CF9  1903               	skipnz
  6778  0CFA  0ADB               	incf	___fttol@lval+2,f
  6779  0CFB  1903               	skipnz
  6780  0CFC  0ADC               	incf	___fttol@lval+3,f
  6781  0CFD                     i1l2781:	
  6782  0CFD  085C               	movf	___fttol@lval+3,w
  6783  0CFE  00D3               	movwf	?___fttol+3
  6784  0CFF  085B               	movf	___fttol@lval+2,w
  6785  0D00  00D2               	movwf	?___fttol+2
  6786  0D01  085A               	movf	___fttol@lval+1,w
  6787  0D02  00D1               	movwf	?___fttol+1
  6788  0D03  0859               	movf	___fttol@lval,w
  6789  0D04  00D0               	movwf	?___fttol
  6790  0D05  0008               	return
  6791  0D06                     __end_of___fttol:	
  6792                           
  6793                           	psect	text32
  6794  0E4D                     __ptext32:	
  6795 ;; *************** function ___ftmul *****************
  6796 ;; Defined at:
  6797 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  f1              3   32[BANK0 ] float 
  6800 ;;  f2              3   35[BANK0 ] float 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  f3_as_produc    3   43[BANK0 ] unsigned um
  6803 ;;  sign            1   47[BANK0 ] unsigned char 
  6804 ;;  cntr            1   46[BANK0 ] unsigned char 
  6805 ;;  exp             1   42[BANK0 ] unsigned char 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  3   32[BANK0 ] float 
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0, pclath, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6815 ;;      Params:         0       6       0       0       0
  6816 ;;      Locals:         0       6       0       0       0
  6817 ;;      Temps:          0       4       0       0       0
  6818 ;;      Totals:         0      16       0       0       0
  6819 ;;Total ram usage:       16 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    1
  6822 ;; This function calls:
  6823 ;;		___ftpack
  6824 ;; This function is called by:
  6825 ;;		_ISR
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           
  6830                           ;psect for function ___ftmul
  6831  0E4D                     ___ftmul:	
  6832                           
  6833                           ;incstack = 0
  6834                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6835  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  6836  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  6837  0E4F  0840               	movf	___ftmul@f1,w
  6838  0E50  00C6               	movwf	??___ftmul
  6839  0E51  0841               	movf	___ftmul@f1+1,w
  6840  0E52  00C7               	movwf	??___ftmul+1
  6841  0E53  0842               	movf	___ftmul@f1+2,w
  6842  0E54  00C8               	movwf	??___ftmul+2
  6843  0E55  1003               	clrc
  6844  0E56  0D47               	rlf	??___ftmul+1,w
  6845  0E57  0D48               	rlf	??___ftmul+2,w
  6846  0E58  00C9               	movwf	??___ftmul+3
  6847  0E59  0849               	movf	??___ftmul+3,w
  6848  0E5A  00CA               	movwf	___ftmul@exp
  6849  0E5B  08CA               	movf	___ftmul@exp,f
  6850  0E5C  1D03               	skipz
  6851  0E5D  2E65               	goto	i1l2697
  6852  0E5E  3000               	movlw	0
  6853  0E5F  00C0               	movwf	?___ftmul
  6854  0E60  3000               	movlw	0
  6855  0E61  00C1               	movwf	?___ftmul+1
  6856  0E62  3000               	movlw	0
  6857  0E63  00C2               	movwf	?___ftmul+2
  6858  0E64  0008               	return
  6859  0E65                     i1l2697:	
  6860  0E65  0843               	movf	___ftmul@f2,w
  6861  0E66  00C6               	movwf	??___ftmul
  6862  0E67  0844               	movf	___ftmul@f2+1,w
  6863  0E68  00C7               	movwf	??___ftmul+1
  6864  0E69  0845               	movf	___ftmul@f2+2,w
  6865  0E6A  00C8               	movwf	??___ftmul+2
  6866  0E6B  1003               	clrc
  6867  0E6C  0D47               	rlf	??___ftmul+1,w
  6868  0E6D  0D48               	rlf	??___ftmul+2,w
  6869  0E6E  00C9               	movwf	??___ftmul+3
  6870  0E6F  0849               	movf	??___ftmul+3,w
  6871  0E70  00CF               	movwf	___ftmul@sign
  6872  0E71  08CF               	movf	___ftmul@sign,f
  6873  0E72  1D03               	skipz
  6874  0E73  2E7B               	goto	i1l2703
  6875  0E74  3000               	movlw	0
  6876  0E75  00C0               	movwf	?___ftmul
  6877  0E76  3000               	movlw	0
  6878  0E77  00C1               	movwf	?___ftmul+1
  6879  0E78  3000               	movlw	0
  6880  0E79  00C2               	movwf	?___ftmul+2
  6881  0E7A  0008               	return
  6882  0E7B                     i1l2703:	
  6883  0E7B  084F               	movf	___ftmul@sign,w
  6884  0E7C  3E7B               	addlw	123
  6885  0E7D  00C6               	movwf	??___ftmul
  6886  0E7E  0846               	movf	??___ftmul,w
  6887  0E7F  07CA               	addwf	___ftmul@exp,f
  6888  0E80  0840               	movf	___ftmul@f1,w
  6889  0E81  00C6               	movwf	??___ftmul
  6890  0E82  0841               	movf	___ftmul@f1+1,w
  6891  0E83  00C7               	movwf	??___ftmul+1
  6892  0E84  0842               	movf	___ftmul@f1+2,w
  6893  0E85  00C8               	movwf	??___ftmul+2
  6894  0E86  3010               	movlw	16
  6895  0E87                     u296_25:	
  6896  0E87  1003               	clrc
  6897  0E88  0CC8               	rrf	??___ftmul+2,f
  6898  0E89  0CC7               	rrf	??___ftmul+1,f
  6899  0E8A  0CC6               	rrf	??___ftmul,f
  6900  0E8B  3EFF               	addlw	-1
  6901  0E8C  1D03               	skipz
  6902  0E8D  2E87               	goto	u296_25
  6903  0E8E  0846               	movf	??___ftmul,w
  6904  0E8F  00C9               	movwf	??___ftmul+3
  6905  0E90  0849               	movf	??___ftmul+3,w
  6906  0E91  00CF               	movwf	___ftmul@sign
  6907  0E92  0843               	movf	___ftmul@f2,w
  6908  0E93  00C6               	movwf	??___ftmul
  6909  0E94  0844               	movf	___ftmul@f2+1,w
  6910  0E95  00C7               	movwf	??___ftmul+1
  6911  0E96  0845               	movf	___ftmul@f2+2,w
  6912  0E97  00C8               	movwf	??___ftmul+2
  6913  0E98  3010               	movlw	16
  6914  0E99                     u297_25:	
  6915  0E99  1003               	clrc
  6916  0E9A  0CC8               	rrf	??___ftmul+2,f
  6917  0E9B  0CC7               	rrf	??___ftmul+1,f
  6918  0E9C  0CC6               	rrf	??___ftmul,f
  6919  0E9D  3EFF               	addlw	-1
  6920  0E9E  1D03               	skipz
  6921  0E9F  2E99               	goto	u297_25
  6922  0EA0  0846               	movf	??___ftmul,w
  6923  0EA1  00C9               	movwf	??___ftmul+3
  6924  0EA2  0849               	movf	??___ftmul+3,w
  6925  0EA3  06CF               	xorwf	___ftmul@sign,f
  6926  0EA4  3080               	movlw	128
  6927  0EA5  00C6               	movwf	??___ftmul
  6928  0EA6  0846               	movf	??___ftmul,w
  6929  0EA7  05CF               	andwf	___ftmul@sign,f
  6930  0EA8  17C1               	bsf	___ftmul@f1+1,7
  6931  0EA9  17C4               	bsf	___ftmul@f2+1,7
  6932  0EAA  30FF               	movlw	255
  6933  0EAB  05C3               	andwf	___ftmul@f2,f
  6934  0EAC  30FF               	movlw	255
  6935  0EAD  05C4               	andwf	___ftmul@f2+1,f
  6936  0EAE  3000               	movlw	0
  6937  0EAF  05C5               	andwf	___ftmul@f2+2,f
  6938  0EB0  3000               	movlw	0
  6939  0EB1  00CB               	movwf	___ftmul@f3_as_product
  6940  0EB2  3000               	movlw	0
  6941  0EB3  00CC               	movwf	___ftmul@f3_as_product+1
  6942  0EB4  3000               	movlw	0
  6943  0EB5  00CD               	movwf	___ftmul@f3_as_product+2
  6944  0EB6  3007               	movlw	7
  6945  0EB7  00C6               	movwf	??___ftmul
  6946  0EB8  0846               	movf	??___ftmul,w
  6947  0EB9  00CE               	movwf	___ftmul@cntr
  6948  0EBA                     i1l2715:	
  6949  0EBA  1C40               	btfss	___ftmul@f1,0
  6950  0EBB  2ECA               	goto	i1l2719
  6951  0EBC  0843               	movf	___ftmul@f2,w
  6952  0EBD  07CB               	addwf	___ftmul@f3_as_product,f
  6953  0EBE  0844               	movf	___ftmul@f2+1,w
  6954  0EBF  1103               	clrz
  6955  0EC0  1803               	skipnc
  6956  0EC1  0A44               	incf	___ftmul@f2+1,w
  6957  0EC2  1D03               	btfss	3,2
  6958  0EC3  07CC               	addwf	___ftmul@f3_as_product+1,f
  6959  0EC4  0845               	movf	___ftmul@f2+2,w
  6960  0EC5  1103               	clrz
  6961  0EC6  1803               	skipnc
  6962  0EC7  0A45               	incf	___ftmul@f2+2,w
  6963  0EC8  1D03               	btfss	3,2
  6964  0EC9  07CD               	addwf	___ftmul@f3_as_product+2,f
  6965  0ECA                     i1l2719:	
  6966  0ECA  3001               	movlw	1
  6967  0ECB                     u300_25:	
  6968  0ECB  1003               	clrc
  6969  0ECC  0CC2               	rrf	___ftmul@f1+2,f
  6970  0ECD  0CC1               	rrf	___ftmul@f1+1,f
  6971  0ECE  0CC0               	rrf	___ftmul@f1,f
  6972  0ECF  3EFF               	addlw	-1
  6973  0ED0  1D03               	skipz
  6974  0ED1  2ECB               	goto	u300_25
  6975  0ED2  3001               	movlw	1
  6976  0ED3                     u301_25:	
  6977  0ED3  1003               	clrc
  6978  0ED4  0DC3               	rlf	___ftmul@f2,f
  6979  0ED5  0DC4               	rlf	___ftmul@f2+1,f
  6980  0ED6  0DC5               	rlf	___ftmul@f2+2,f
  6981  0ED7  3EFF               	addlw	-1
  6982  0ED8  1D03               	skipz
  6983  0ED9  2ED3               	goto	u301_25
  6984  0EDA  3001               	movlw	1
  6985  0EDB  02CE               	subwf	___ftmul@cntr,f
  6986  0EDC  1D03               	btfss	3,2
  6987  0EDD  2EBA               	goto	i1l2715
  6988  0EDE  3009               	movlw	9
  6989  0EDF  00C6               	movwf	??___ftmul
  6990  0EE0  0846               	movf	??___ftmul,w
  6991  0EE1  00CE               	movwf	___ftmul@cntr
  6992  0EE2                     i1l2727:	
  6993  0EE2  1C40               	btfss	___ftmul@f1,0
  6994  0EE3  2EF2               	goto	i1l2731
  6995  0EE4  0843               	movf	___ftmul@f2,w
  6996  0EE5  07CB               	addwf	___ftmul@f3_as_product,f
  6997  0EE6  0844               	movf	___ftmul@f2+1,w
  6998  0EE7  1103               	clrz
  6999  0EE8  1803               	skipnc
  7000  0EE9  0A44               	incf	___ftmul@f2+1,w
  7001  0EEA  1D03               	btfss	3,2
  7002  0EEB  07CC               	addwf	___ftmul@f3_as_product+1,f
  7003  0EEC  0845               	movf	___ftmul@f2+2,w
  7004  0EED  1103               	clrz
  7005  0EEE  1803               	skipnc
  7006  0EEF  0A45               	incf	___ftmul@f2+2,w
  7007  0EF0  1D03               	btfss	3,2
  7008  0EF1  07CD               	addwf	___ftmul@f3_as_product+2,f
  7009  0EF2                     i1l2731:	
  7010  0EF2  3001               	movlw	1
  7011  0EF3                     u305_25:	
  7012  0EF3  1003               	clrc
  7013  0EF4  0CC2               	rrf	___ftmul@f1+2,f
  7014  0EF5  0CC1               	rrf	___ftmul@f1+1,f
  7015  0EF6  0CC0               	rrf	___ftmul@f1,f
  7016  0EF7  3EFF               	addlw	-1
  7017  0EF8  1D03               	skipz
  7018  0EF9  2EF3               	goto	u305_25
  7019  0EFA  3001               	movlw	1
  7020  0EFB                     u306_25:	
  7021  0EFB  1003               	clrc
  7022  0EFC  0CCD               	rrf	___ftmul@f3_as_product+2,f
  7023  0EFD  0CCC               	rrf	___ftmul@f3_as_product+1,f
  7024  0EFE  0CCB               	rrf	___ftmul@f3_as_product,f
  7025  0EFF  3EFF               	addlw	-1
  7026  0F00  1D03               	skipz
  7027  0F01  2EFB               	goto	u306_25
  7028  0F02  3001               	movlw	1
  7029  0F03  02CE               	subwf	___ftmul@cntr,f
  7030  0F04  1D03               	btfss	3,2
  7031  0F05  2EE2               	goto	i1l2727
  7032  0F06  084B               	movf	___ftmul@f3_as_product,w
  7033  0F07  00F0               	movwf	___ftpack@arg
  7034  0F08  084C               	movf	___ftmul@f3_as_product+1,w
  7035  0F09  00F1               	movwf	___ftpack@arg+1
  7036  0F0A  084D               	movf	___ftmul@f3_as_product+2,w
  7037  0F0B  00F2               	movwf	___ftpack@arg+2
  7038  0F0C  084A               	movf	___ftmul@exp,w
  7039  0F0D  00C6               	movwf	??___ftmul
  7040  0F0E  0846               	movf	??___ftmul,w
  7041  0F0F  00F3               	movwf	___ftpack@exp
  7042  0F10  084F               	movf	___ftmul@sign,w
  7043  0F11  00C7               	movwf	??___ftmul+1
  7044  0F12  0847               	movf	??___ftmul+1,w
  7045  0F13  00F4               	movwf	___ftpack@sign
  7046  0F14  120A  158A  23A5   	fcall	___ftpack
  7047  0F17  0870               	movf	?___ftpack,w
  7048  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  7049  0F19  1303               	bcf	3,6	;RP1=0, select bank0
  7050  0F1A  00C0               	movwf	?___ftmul
  7051  0F1B  0871               	movf	?___ftpack+1,w
  7052  0F1C  00C1               	movwf	?___ftmul+1
  7053  0F1D  0872               	movf	?___ftpack+2,w
  7054  0F1E  00C2               	movwf	?___ftmul+2
  7055  0F1F  0008               	return
  7056  0F20                     __end_of___ftmul:	
  7057                           
  7058                           	psect	text33
  7059  0960                     __ptext33:	
  7060 ;; *************** function ___awtoft *****************
  7061 ;; Defined at:
  7062 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  c               2    8[COMMON] int 
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  sign            1   13[COMMON] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  3    8[COMMON] float 
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0, pclath, cstack
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7076 ;;      Params:         3       0       0       0       0
  7077 ;;      Locals:         1       0       0       0       0
  7078 ;;      Temps:          2       0       0       0       0
  7079 ;;      Totals:         6       0       0       0       0
  7080 ;;Total ram usage:        6 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    1
  7083 ;; This function calls:
  7084 ;;		___ftpack
  7085 ;; This function is called by:
  7086 ;;		_ISR
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           
  7091                           ;psect for function ___awtoft
  7092  0960                     ___awtoft:	
  7093                           
  7094                           ;incstack = 0
  7095                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7096  0960  01FD               	clrf	___awtoft@sign
  7097  0961  1FF9               	btfss	___awtoft@c+1,7
  7098  0962  296A               	goto	i1l2687
  7099  0963  09F8               	comf	___awtoft@c,f
  7100  0964  09F9               	comf	___awtoft@c+1,f
  7101  0965  0AF8               	incf	___awtoft@c,f
  7102  0966  1903               	skipnz
  7103  0967  0AF9               	incf	___awtoft@c+1,f
  7104  0968  01FD               	clrf	___awtoft@sign
  7105  0969  0AFD               	incf	___awtoft@sign,f
  7106  096A                     i1l2687:	
  7107  096A  0878               	movf	___awtoft@c,w
  7108  096B  00F0               	movwf	___ftpack@arg
  7109  096C  0879               	movf	___awtoft@c+1,w
  7110  096D  00F1               	movwf	___ftpack@arg+1
  7111  096E  01F2               	clrf	___ftpack@arg+2
  7112  096F  308E               	movlw	142
  7113  0970  00FB               	movwf	??___awtoft
  7114  0971  087B               	movf	??___awtoft,w
  7115  0972  00F3               	movwf	___ftpack@exp
  7116  0973  087D               	movf	___awtoft@sign,w
  7117  0974  00FC               	movwf	??___awtoft+1
  7118  0975  087C               	movf	??___awtoft+1,w
  7119  0976  00F4               	movwf	___ftpack@sign
  7120  0977  120A  158A  23A5   	fcall	___ftpack
  7121  097A  0870               	movf	?___ftpack,w
  7122  097B  00F8               	movwf	?___awtoft
  7123  097C  0871               	movf	?___ftpack+1,w
  7124  097D  00F9               	movwf	?___awtoft+1
  7125  097E  0872               	movf	?___ftpack+2,w
  7126  097F  00FA               	movwf	?___awtoft+2
  7127  0980  0008               	return
  7128  0981                     __end_of___awtoft:	
  7129                           
  7130                           	psect	text34
  7131  0BA5                     __ptext34:	
  7132 ;; *************** function ___ftpack *****************
  7133 ;; Defined at:
  7134 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  arg             3    0[COMMON] unsigned um
  7137 ;;  exp             1    3[COMMON] unsigned char 
  7138 ;;  sign            1    4[COMMON] unsigned char 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;		None
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  3    0[COMMON] float 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7150 ;;      Params:         5       0       0       0       0
  7151 ;;      Locals:         0       0       0       0       0
  7152 ;;      Temps:          3       0       0       0       0
  7153 ;;      Totals:         8       0       0       0       0
  7154 ;;Total ram usage:        8 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; This function calls:
  7157 ;;		Nothing
  7158 ;; This function is called by:
  7159 ;;		___awtoft
  7160 ;;		___ftadd
  7161 ;;		___ftdiv
  7162 ;;		___ftmul
  7163 ;;		___lwtoft
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           
  7168                           ;psect for function ___ftpack
  7169  0BA5                     ___ftpack:	
  7170                           
  7171                           ;incstack = 0
  7172                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7173  0BA5  0873               	movf	___ftpack@exp,w
  7174  0BA6  1903               	btfsc	3,2
  7175  0BA7  2BAD               	goto	i1l2057
  7176  0BA8  0872               	movf	___ftpack@arg+2,w
  7177  0BA9  0471               	iorwf	___ftpack@arg+1,w
  7178  0BAA  0470               	iorwf	___ftpack@arg,w
  7179  0BAB  1D03               	skipz
  7180  0BAC  2BC0               	goto	i1l2063
  7181  0BAD                     i1l2057:	
  7182  0BAD  3000               	movlw	0
  7183  0BAE  00F0               	movwf	?___ftpack
  7184  0BAF  3000               	movlw	0
  7185  0BB0  00F1               	movwf	?___ftpack+1
  7186  0BB1  3000               	movlw	0
  7187  0BB2  00F2               	movwf	?___ftpack+2
  7188  0BB3  0008               	return
  7189  0BB4                     i1l2061:	
  7190  0BB4  3001               	movlw	1
  7191  0BB5  00F5               	movwf	??___ftpack
  7192  0BB6  0875               	movf	??___ftpack,w
  7193  0BB7  07F3               	addwf	___ftpack@exp,f
  7194  0BB8  3001               	movlw	1
  7195  0BB9                     u183_25:	
  7196  0BB9  1003               	clrc
  7197  0BBA  0CF2               	rrf	___ftpack@arg+2,f
  7198  0BBB  0CF1               	rrf	___ftpack@arg+1,f
  7199  0BBC  0CF0               	rrf	___ftpack@arg,f
  7200  0BBD  3EFF               	addlw	-1
  7201  0BBE  1D03               	skipz
  7202  0BBF  2BB9               	goto	u183_25
  7203  0BC0                     i1l2063:	
  7204  0BC0  30FE               	movlw	254
  7205  0BC1  0572               	andwf	___ftpack@arg+2,w
  7206  0BC2  1903               	btfsc	3,2
  7207  0BC3  2BDB               	goto	i1l724
  7208  0BC4  2BB4               	goto	i1l2061
  7209  0BC5                     i1l2065:	
  7210  0BC5  3001               	movlw	1
  7211  0BC6  00F5               	movwf	??___ftpack
  7212  0BC7  0875               	movf	??___ftpack,w
  7213  0BC8  07F3               	addwf	___ftpack@exp,f
  7214  0BC9  3001               	movlw	1
  7215  0BCA  07F0               	addwf	___ftpack@arg,f
  7216  0BCB  3000               	movlw	0
  7217  0BCC  1803               	skipnc
  7218  0BCD  3001               	movlw	1
  7219  0BCE  07F1               	addwf	___ftpack@arg+1,f
  7220  0BCF  3000               	movlw	0
  7221  0BD0  1803               	skipnc
  7222  0BD1  3001               	movlw	1
  7223  0BD2  07F2               	addwf	___ftpack@arg+2,f
  7224  0BD3  3001               	movlw	1
  7225  0BD4                     u185_25:	
  7226  0BD4  1003               	clrc
  7227  0BD5  0CF2               	rrf	___ftpack@arg+2,f
  7228  0BD6  0CF1               	rrf	___ftpack@arg+1,f
  7229  0BD7  0CF0               	rrf	___ftpack@arg,f
  7230  0BD8  3EFF               	addlw	-1
  7231  0BD9  1D03               	skipz
  7232  0BDA  2BD4               	goto	u185_25
  7233  0BDB                     i1l724:	
  7234  0BDB  30FF               	movlw	255
  7235  0BDC  0572               	andwf	___ftpack@arg+2,w
  7236  0BDD  1903               	btfsc	3,2
  7237  0BDE  2BEA               	goto	i1l2073
  7238  0BDF  2BC5               	goto	i1l2065
  7239  0BE0                     i1l2071:	
  7240  0BE0  3001               	movlw	1
  7241  0BE1  02F3               	subwf	___ftpack@exp,f
  7242  0BE2  3001               	movlw	1
  7243  0BE3                     u187_25:	
  7244  0BE3  1003               	clrc
  7245  0BE4  0DF0               	rlf	___ftpack@arg,f
  7246  0BE5  0DF1               	rlf	___ftpack@arg+1,f
  7247  0BE6  0DF2               	rlf	___ftpack@arg+2,f
  7248  0BE7  3EFF               	addlw	-1
  7249  0BE8  1D03               	skipz
  7250  0BE9  2BE3               	goto	u187_25
  7251  0BEA                     i1l2073:	
  7252  0BEA  1FF1               	btfss	___ftpack@arg+1,7
  7253  0BEB  2BE0               	goto	i1l2071
  7254  0BEC  1873               	btfsc	___ftpack@exp,0
  7255  0BED  2BF4               	goto	i1l730
  7256  0BEE  30FF               	movlw	255
  7257  0BEF  05F0               	andwf	___ftpack@arg,f
  7258  0BF0  307F               	movlw	127
  7259  0BF1  05F1               	andwf	___ftpack@arg+1,f
  7260  0BF2  30FF               	movlw	255
  7261  0BF3  05F2               	andwf	___ftpack@arg+2,f
  7262  0BF4                     i1l730:	
  7263  0BF4  1003               	clrc
  7264  0BF5  0CF3               	rrf	___ftpack@exp,f
  7265  0BF6  0873               	movf	___ftpack@exp,w
  7266  0BF7  00F5               	movwf	??___ftpack
  7267  0BF8  01F6               	clrf	??___ftpack+1
  7268  0BF9  01F7               	clrf	??___ftpack+2
  7269  0BFA  3010               	movlw	16
  7270  0BFB                     u190_25:	
  7271  0BFB  1003               	clrc
  7272  0BFC  0DF5               	rlf	??___ftpack,f
  7273  0BFD  0DF6               	rlf	??___ftpack+1,f
  7274  0BFE  0DF7               	rlf	??___ftpack+2,f
  7275  0BFF  3EFF               	addlw	-1
  7276  0C00  1D03               	skipz
  7277  0C01  2BFB               	goto	u190_25
  7278  0C02  0875               	movf	??___ftpack,w
  7279  0C03  04F0               	iorwf	___ftpack@arg,f
  7280  0C04  0876               	movf	??___ftpack+1,w
  7281  0C05  04F1               	iorwf	___ftpack@arg+1,f
  7282  0C06  0877               	movf	??___ftpack+2,w
  7283  0C07  04F2               	iorwf	___ftpack@arg+2,f
  7284  0C08  0874               	movf	___ftpack@sign,w
  7285  0C09  1903               	btfsc	3,2
  7286  0C0A  0008               	return
  7287  0C0B  17F2               	bsf	___ftpack@arg+2,7
  7288  0C0C  0008               	return
  7289  0C0D                     __end_of___ftpack:	
  7290                           
  7291                           	psect	text35
  7292  08F1                     __ptext35:	
  7293 ;; *************** function _USART_ReceiveChar *****************
  7294 ;; Defined at:
  7295 ;;		line 63 in file "C:\Users\332414\Desktop\FyzzySI\firmware\usart.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;  byte            1    4[COMMON] unsigned char 
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      unsigned char 
  7302 ;; Registers used:
  7303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7309 ;;      Params:         0       0       0       0       0
  7310 ;;      Locals:         1       0       0       0       0
  7311 ;;      Temps:          1       0       0       0       0
  7312 ;;      Totals:         2       0       0       0       0
  7313 ;;Total ram usage:        2 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    2
  7316 ;; This function calls:
  7317 ;;		_USART_WriteString
  7318 ;; This function is called by:
  7319 ;;		_ISR
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _USART_ReceiveChar
  7325  08F1                     _USART_ReceiveChar:	
  7326                           
  7327                           ;usart.c: 65: unsigned char byte;
  7328                           ;usart.c: 67: if (!OERR)
  7329                           
  7330                           ;incstack = 0
  7331                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7332  08F1  1283               	bcf	3,5	;RP0=0, select bank0
  7333  08F2  1303               	bcf	3,6	;RP1=0, select bank0
  7334  08F3  1898               	btfsc	24,1	;volatile
  7335  08F4  28FA               	goto	i1l2417
  7336                           
  7337                           ;usart.c: 68: {
  7338                           ;usart.c: 69: byte = RCREG;
  7339  08F5  081A               	movf	26,w	;volatile
  7340  08F6  00F3               	movwf	??_USART_ReceiveChar
  7341  08F7  0873               	movf	??_USART_ReceiveChar,w
  7342  08F8  00F4               	movwf	USART_ReceiveChar@byte
  7343  08F9  2906               	goto	i1l2425
  7344  08FA                     i1l2417:	
  7345                           ;usart.c: 71: }
  7346                           
  7347                           ;usart.c: 70: PIR1bits.RCIF = 0;
  7348                           
  7349                           
  7350                           ;usart.c: 72: else
  7351                           ;usart.c: 73: {
  7352                           ;usart.c: 74: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  7353  08FA  300B               	movlw	(STR_4-__stringbase)& (0+255)
  7354  08FB  120A  158A  2124   	fcall	_USART_WriteString
  7355                           
  7356                           ;usart.c: 76: RCSTAbits.CREN = 0;
  7357  08FE  1283               	bcf	3,5	;RP0=0, select bank0
  7358  08FF  1303               	bcf	3,6	;RP1=0, select bank0
  7359  0900  1218               	bcf	24,4	;volatile
  7360                           
  7361                           ;usart.c: 77: byte = RCREG;
  7362  0901  081A               	movf	26,w	;volatile
  7363  0902  00F3               	movwf	??_USART_ReceiveChar
  7364  0903  0873               	movf	??_USART_ReceiveChar,w
  7365  0904  00F4               	movwf	USART_ReceiveChar@byte
  7366                           
  7367                           ;usart.c: 78: RCSTAbits.CREN = 1;
  7368  0905  1618               	bsf	24,4	;volatile
  7369  0906                     i1l2425:	
  7370                           
  7371                           ;usart.c: 79: PIR1bits.RCIF = 0;
  7372  0906  128C               	bcf	12,5	;volatile
  7373                           
  7374                           ;usart.c: 80: }
  7375                           ;usart.c: 82: return(byte);
  7376  0907  0874               	movf	USART_ReceiveChar@byte,w
  7377  0908  0008               	return
  7378  0909                     __end_of_USART_ReceiveChar:	
  7379                           
  7380                           	psect	text36
  7381  0924                     __ptext36:	
  7382 ;; *************** function _USART_WriteString *****************
  7383 ;; Defined at:
  7384 ;;		line 52 in file "C:\Users\332414\Desktop\FyzzySI\firmware\usart.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  str             1    wreg     PTR const unsigned char 
  7387 ;;		 -> STR_4(40), 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  str             1    2[COMMON] PTR const unsigned char 
  7390 ;;		 -> STR_4(40), 
  7391 ;; Return value:  Size  Location     Type
  7392 ;;		None               void
  7393 ;; Registers used:
  7394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7400 ;;      Params:         0       0       0       0       0
  7401 ;;      Locals:         1       0       0       0       0
  7402 ;;      Temps:          1       0       0       0       0
  7403 ;;      Totals:         2       0       0       0       0
  7404 ;;Total ram usage:        2 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:    1
  7407 ;; This function calls:
  7408 ;;		_USART_WriteChar
  7409 ;; This function is called by:
  7410 ;;		_USART_ReceiveChar
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           
  7415                           ;psect for function _USART_WriteString
  7416  0924                     _USART_WriteString:	
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7420                           ;USART_WriteString@str stored from wreg
  7421  0924  00F2               	movwf	USART_WriteString@str
  7422  0925                     i1l2089:	
  7423                           ;usart.c: 54: while(*str != '\0')
  7424                           
  7425  0925  0872               	movf	USART_WriteString@str,w
  7426  0926  0084               	movwf	4
  7427  0927  120A  158A  200A  120A  158A  	fcall	stringdir
  7428  092C  3800               	iorlw	0
  7429  092D  1903               	btfsc	3,2
  7430  092E  0008               	return
  7431                           
  7432                           ;usart.c: 55: {
  7433                           ;usart.c: 56: USART_WriteChar(*str);
  7434  092F  0872               	movf	USART_WriteString@str,w
  7435  0930  0084               	movwf	4
  7436  0931  120A  158A  200A  120A  158A  	fcall	stringdir
  7437  0936  120A  158A  2060  120A  158A  	fcall	_USART_WriteChar
  7438                           
  7439                           ;usart.c: 57: str++;
  7440  093B  3001               	movlw	1
  7441  093C  00F1               	movwf	??_USART_WriteString
  7442  093D  0871               	movf	??_USART_WriteString,w
  7443  093E  07F2               	addwf	USART_WriteString@str,f
  7444  093F  2925               	goto	i1l2089
  7445  0940                     __end_of_USART_WriteString:	
  7446                           
  7447                           	psect	text37
  7448  0860                     __ptext37:	
  7449 ;; *************** function _USART_WriteChar *****************
  7450 ;; Defined at:
  7451 ;;		line 44 in file "C:\Users\332414\Desktop\FyzzySI\firmware\usart.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  byte            1    wreg     unsigned char 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  byte            1    0[COMMON] unsigned char 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;		None               void
  7458 ;; Registers used:
  7459 ;;		wreg
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7465 ;;      Params:         0       0       0       0       0
  7466 ;;      Locals:         1       0       0       0       0
  7467 ;;      Temps:          0       0       0       0       0
  7468 ;;      Totals:         1       0       0       0       0
  7469 ;;Total ram usage:        1 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; This function calls:
  7472 ;;		Nothing
  7473 ;; This function is called by:
  7474 ;;		_send
  7475 ;;		_USART_WriteString
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           
  7480                           ;psect for function _USART_WriteChar
  7481  0860                     _USART_WriteChar:	
  7482                           
  7483                           ;incstack = 0
  7484                           ; Regs used in _USART_WriteChar: [wreg]
  7485                           ;USART_WriteChar@byte stored from wreg
  7486  0860  00F0               	movwf	USART_WriteChar@byte
  7487  0861                     i1l192:	
  7488                           ;usart.c: 46: while(!PIR1bits.TXIF);
  7489                           
  7490  0861  1283               	bcf	3,5	;RP0=0, select bank0
  7491  0862  1303               	bcf	3,6	;RP1=0, select bank0
  7492  0863  1E0C               	btfss	12,4	;volatile
  7493  0864  2861               	goto	i1l192
  7494                           
  7495                           ;usart.c: 47: TXREG = byte;
  7496  0865  0870               	movf	USART_WriteChar@byte,w
  7497  0866  0099               	movwf	25	;volatile
  7498  0867  0008               	return
  7499  0868                     __end_of_USART_WriteChar:	
  7500  007E                     btemp	set	126	;btemp
  7501  007E                     wtemp	set	126
  7502  007E                     wtemp0	set	126
  7503  0080                     wtemp1	set	128
  7504  0082                     wtemp2	set	130
  7505  0084                     wtemp3	set	132
  7506  0086                     wtemp4	set	134
  7507  0088                     wtemp5	set	136
  7508  007F                     wtemp6	set	127
  7509  007E                     ttemp	set	126
  7510  007E                     ttemp0	set	126
  7511  0081                     ttemp1	set	129
  7512  0084                     ttemp2	set	132
  7513  0087                     ttemp3	set	135
  7514  007F                     ttemp4	set	127
  7515  007E                     ltemp	set	126
  7516  007E                     ltemp0	set	126
  7517  0082                     ltemp1	set	130
  7518  0086                     ltemp2	set	134
  7519  0080                     ltemp3	set	128


Data Sizes:
    Strings     68
    Constant    10
    Data        2
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     34      77
    BANK3            96      0      24
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> display(BANK3[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S1218$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_WriteString@Str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[6]), display(BANK3[10]), STR_1(CODE[17]), 

    USART_WriteString@str	PTR const unsigned char  size(1) Largest target is 40
		 -> STR_4(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___awtoft
    _trimf->___awtoft
    ___ftneg->___awtoft
    ___ftadd->___awtoft
    _send->_USART_WriteChar
    ___lwtoft->___ftpack
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _USART_ReceiveChar->_USART_WriteString
    _USART_WriteString->_USART_WriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->___fttol
    _trimf->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftneg
    ___fttol->___ftmul
    ___ftmul->___ftdiv

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USART_Init->___aldiv
    _LCD_WriteString->_LCD_WriteData
    _LCD_Init->_LCD_WriteCmd
    _LCD_Clear->_LCD_WriteCmd

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3302
                                             31 BANK1      3     3      0
                           _ADC_Init
                          _LCD_Clear
                         _LCD_Cursor
                           _LCD_Init
                    _LCD_WriteString
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                           _PWM_Init
                        _TIMER0_Init
                         _TIMER0_Set
                         _USART_Init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             17    14      3    1951
                                             14 BANK1     17    14      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     296
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     514
                                             15 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     428
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Set                                           1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       4     2      2     146
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       4     2      2     108
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     0      2     259
                                              2 BANK1      2     0      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      22
                                              2 BANK1      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor                                           3     2      1     258
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      22
                                              2 BANK1      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteCmd                                         2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 21    21      0   25575
                                             62 BANK0     18    18      0
                  _USART_ReceiveChar
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                               _send
                              _trimf
                   i1_PWM_DutyCycle2
                       i1_TIMER0_Set
                           i1___wmul
 ---------------------------------------------------------------------------------
 (4) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) i1_TIMER0_Set                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) i1_PWM_DutyCycle2                                     4     2      2      70
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _trimf                                               15     3     12    8988
                                             32 BANK0     15     3     12
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     429
                                              0 BANK0      3     0      3
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6    1032
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    2751
                                             16 BANK0     16    10      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    3797
                                              3 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _send                                                 3     3      0     136
                                              1 COMMON     3     3      0
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2173
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     572
                                             48 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2669
                                             32 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             6     3      3    2370
                                              8 COMMON     6     3      3
                           ___ftpack
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2087
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     121
                                              3 COMMON     2     2      0
                  _USART_WriteString
 ---------------------------------------------------------------------------------
 (5) _USART_WriteString                                    2     2      0      97
                                              1 COMMON     2     2      0
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) _USART_WriteChar                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Clear
     _LCD_WriteCmd
   _LCD_Cursor
   _LCD_Init
     _LCD_WriteCmd
   _LCD_WriteString
     _LCD_WriteData
   _PWM_DutyCycle1
   _PWM_DutyCycle2
   _PWM_Init
   _TIMER0_Init
   _TIMER0_Set
   _USART_Init
     ___aldiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   _USART_ReceiveChar
     _USART_WriteString
       _USART_WriteChar
   ___awtoft
     ___ftpack
     i1___wmul (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
       i1___wmul (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         i1___wmul (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
         i1___wmul (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         i1___wmul (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftge
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
       i1___wmul (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             i1___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     i1___wmul (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftpack
       i1___wmul (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             i1___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
         i1___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             i1___wmul (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               i1___wmul (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             i1___wmul (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       i1___wmul (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _send
     _USART_WriteChar
   _trimf
     ___awtoft (ARG)
       ___ftpack
       i1___wmul (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
         i1___wmul (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             i1___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           i1___wmul (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftge (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         i1___wmul (ARG)
   i1_PWM_DutyCycle2
   i1_TIMER0_Set
   i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      18       9       25.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C3      12        0.0%
ABS                  0      0      C3       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May 12 19:40:11 2022

         ?i1_PWM_DutyCycle2 0070                           pc 0002                 ?_LCD_Cursor 00C9  
   __size_of_PWM_DutyCycle1 0021     __size_of_PWM_DutyCycle2 0021                 __CFG_CP$OFF 0000  
               _SSPSTATbits 0094                          fsr 0004         ___wmul@multiplicand 00CB  
        ??i1_PWM_DutyCycle2 0072            i1___wmul@product 0074                ___ftadd@exp1 002F  
              ___ftadd@exp2 002E               _contagens_tm0 00B0                ___ftadd@sign 002D  
                       l167 0FAF                         l444 03FB                         l462 04C0  
                       l618 0D18                         l563 0A16                         _PR2 0092  
              __CFG_CPD$OFF 0000                         _ISR 0037                         _rpm 00BE  
                       fsr0 0004                         _pwm 00BA  __size_of_USART_WriteString 001C  
                       indf 0000                __CFG_FOSC$HS 0000           ??_LCD_WriteString 00CD  
              __CFG_LVP$OFF 0000                        ?_ISR 0070                ___ftdiv@cntr 003A  
              ___ftdiv@sign 003F                        l2121 0A0E                        l2115 089B  
                      l2141 0D29          LCD_WriteString@Str 00CB                        l2151 0D49  
                      l2163 0D7E                        l2331 0AED                        l2323 0AC9  
                      l2149 0D39                        l2325 0AD7                        l2167 0D8C  
                      l2159 0D71                        l2335 0AF8                        l2353 0AAD  
                      l2601 048B                        l2347 0A91                        l2349 0A9F  
                      l2357 0AB8                        l2621 04DF                        l2613 04B2  
                      l2605 0491                        l2631 04F4                        l2623 04E3  
                      l2553 0A58                        l2641 050E                        l2539 094E  
                      l2661 0536                        l2653 0532                        l2573 0400  
                      l2647 0523                        l2639 050A                        l2591 0472  
                      l2575 040B                        l2567 03F7                        l2663 03D5  
                      l2665 057E                        l2579 041D                        l2589 045B  
                      STR_1 0842                        STR_2 0859                        STR_3 0853  
                      STR_4 081A                        u2025 0D3D                        u2045 0D4B  
                      u2055 0D60                        u2065 0D72                        u2505 0AD8  
                      u2515 0AE4                        u2525 0AEE                        u2705 0B0A  
                      u3507 0C27                        u2555 0A94                        u3517 0C35  
                      u2485 0ACC                        u3607 0A55                        u3527 0C41  
                      u2735 0996                        u2575 0AA5                        u3617 08D4  
                      u3537 0C4D                        u2585 0AAE                        u3547 0C5B  
                      u2835 04CF                        u3467 0FA8                        u3557 0C69  
                      u1965 0A17                        u3477 0FF9                        u3567 0C75  
                      u3487 08EB                        u2695 09B7                        u1975 0A1E  
                      u3577 095A                        u3497 0C17                        u3587 0A3B  
                      u2795 04A8                        u3597 0A49                        _OERR 00C1  
                      _TMR0 0001                        _TMR1 000E                        _main 0F20  
              ___ftpack@arg 0070          __size_of_LCD_Clear 0029                ___ftpack@exp 0073  
                      _send 07B2                        btemp 007E            __end_of_ADC_Init 08AF  
                      ltemp 007E                        start 0012                        ttemp 007E  
                      wtemp 007E               ?_LCD_WriteCmd 0070               _LCD_WriteData 08DA  
              ___ftmul@cntr 004E                ___ftmul@sign 004F     __end_of_USART_WriteChar 0868  
                     ??_ISR 005E                ___fttol@exp1 005D                ___fttol@lval 0059  
               ?_TIMER0_Set 0070            __end_of_LCD_Init 0C78             __end_of___aldiv 0D95  
                     ?_main 0070                       _EEADR 010D             __end_of___ftadd 07B2  
                     ?_send 0070               __CFG_WDTE$OFF 0000             __end_of___ftdiv 0E4D  
           __end_of___ftneg 0882             __end_of___ftmul 0F20                       _T1CON 0010  
           __end_of___fttol 0D06             __end_of___lwdiv 0AFF                       i1l110 06A0  
                     i1l192 0861             __end_of___lwmod 0ABF                       i1l730 0BF4  
                     i1l563 09CD                       i1l724 0BDB                       i1l753 0751  
                     _RCREG 001A                       _TMR1H 000F                       _TMR1L 000E  
                     _SPBRG 0099                       _PORTA 0005                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _PORTE 0009  
                     _TRISA 0085                       _TRISB 0086                       _TRISC 0087  
                     _TRISD 0088                       _TRISE 0089                       _TXREG 0019  
             __CFG_PWRTE$ON 0000               ___awtoft@sign 007D                       _delta 00B2  
           __end_of_dpowers 081A             __end_of_isdigit 089D                       _fuzzy 00C6  
             ___ftpack@sign 0074                       _trimf 0585              __CFG_BOREN$OFF 0000  
       __size_of_LCD_Cursor 0020                       pclath 000A            __end_of_PWM_Init 0A0A  
          __end_ofi1___wmul 09E6                       ltemp0 007E                       ltemp1 0082  
                     ltemp2 0086                       ltemp3 0080                       ttemp0 007E  
                     ttemp1 0081                       ttemp2 0084                       ttemp3 0087  
                     ttemp4 007F                       status 0003         i1___wmul@multiplier 0070  
                     wtemp0 007E                       wtemp1 0080                       wtemp2 0082  
                     wtemp3 0084                       wtemp4 0086                       wtemp5 0088  
                     wtemp6 007F             __end_of_sprintf 0585              ??_LCD_WriteCmd 00C9  
            ?_LCD_WriteData 0070                 ?_USART_Init 00D8       i1TIMER0_Set@contagens 0070  
           __initialization 0015                __end_of_main 1000                __end_of_send 07FC  
                    ??_main 00E8               ___fttol@sign1 0058                      ??_send 0071  
              ?_TIMER0_Init 0070           __end_of_LCD_Clear 0A58                      _ADRESH 001E  
                    _ADRESL 009E                      _EEDATA 010C                      _CCPR1L 0015  
                    _CCPR2L 001B                      _EECON2 018D            __end_of___awtoft 0981  
          __end_of___ftpack 0C0D                      ?_trimf 0040                      i1l2201 0702  
                    i1l2211 0728                      i1l2061 0BB4                      i1l2221 074D  
                    i1l2213 072C                      i1l2071 0BE0                      i1l2063 0BC0  
                    i1l2207 0717                      i1l2073 0BEA                      i1l2065 0BC5  
                    i1l2057 0BAD                      i1l2225 0763                      i1l2209 0723  
                    i1l2219 0741                      i1l2229 0775                      i1l2407 07F1  
                    i1l2239 0798                      i1l2183 06D9                      i1l2255 0DC3  
                    i1l2089 0925                      i1l2425 0906                      i1l2417 08FA  
                    i1l2249 0DAD                      i1l2179 06D2                      i1l2189 06E8  
                    i1l2277 0E27                      i1l2269 0E08                      i1l2293 0B96  
                    i1l2373 05FE                      i1l2703 0E7B                      i1l2289 0B6F  
                    i1l2731 0EF2                      i1l2715 0EBA                      i1l2379 0683  
                    i1l2727 0EE2                      i1l2719 0ECA                      i1l2399 07D7  
                    i1l2831 0087                      i1l2815 004C                      i1l2913 0346  
                    i1l2921 03AC                      i1l2817 0054                      i1l2747 0C92  
                    i1l2923 03AE                      i1l2907 0318                      i1l2931 03BE  
                    i1l2843 009D                      i1l2781 0CFD                      i1l2773 0CE1  
                    i1l2765 0CC4                      i1l2917 0378                      i1l2933 03BF  
                    i1l2829 0081                      i1l2853 00D1                      i1l2687 096A  
                    i1l2775 0CEC                      i1l2767 0CD4                      i1l2855 00D4  
                    i1l2697 0E65                      i1l2777 0CEF                      i1l2849 00AD  
                    i1l2891 027A                      i1l2867 00F1                      u300_25 0ECB  
                    i1l2797 09C5                      i1l2897 0293                      u301_25 0ED3  
                    u221_25 0718                      u312_25 0CC5                      u224_25 072D  
                    u320_25 09CE                      u305_25 0EF3                      u321_25 09D5  
                    u242_21 0B62                      u242_22 0B63                      u242_23 0B68  
                    u242_24 0B69                      u306_25 0EFB                      u218_25 0703  
                    u315_25 0CE3                      u227_25 0742                      u235_25 0DD5  
                    u244_21 0B89                      u244_22 0B8A                      u244_23 0B8F  
                    u244_24 0B90                      u236_25 0DE7                      u309_25 0C99  
                    u237_25 0E09                      u325_25 006D                      u190_25 0BFB  
                    u238_25 0E1A                      u318_25 091A                      u183_25 0BB9  
                    u239_25 0E28                      u185_25 0BD4            __end_of___lwtoft 08C3  
                    u187_25 0BE3                      u339_25 028B         __size_of_TIMER0_Set 0008  
                    u296_25 0E87                      u297_25 0E99                      _SSPADD 0093  
                    _SSPBUF 0013            LCD_WriteCmd@Byte 00CA                      ___ftge 0B48  
                 ??___aldiv 00D1                      ___wmul 0A0A                   ??___ftadd 0029  
            _PWM_DutyCycle1 0981              _PWM_DutyCycle2 09A2            ?_USART_WriteChar 0070  
                 ??___ftdiv 0036                   ??___ftneg 007E                   ??___ftmul 0046  
                 ??___fttol 0054                   ??___lwdiv 00CD                   ??___lwmod 00D5  
                    _buffer 0190                      _ligado 00EB       USART_ReceiveChar@byte 0074  
                    _pulsos 00B8                      _status 00C2       ___ftmul@f3_as_product 004B  
                 ??_isdigit 00C9                   ?_ADC_Init 0070                      saved_w 007E  
       __size_of_USART_Init 0049                      trimf@a 0043                      trimf@b 0046  
                    trimf@c 0049                      trimf@x 0040                   ??_sprintf 00DA  
             ?i1_TIMER0_Set 0070     __end_of__initialization 0033                   ?_LCD_Init 0070  
                ___ftadd@f1 0023                  ___ftadd@f2 0026             ??_LCD_WriteData 00C9  
                ___ftge@ff1 0070                  ___ftge@ff2 0073                  ___ftdiv@f1 0033  
                ___ftdiv@f2 0030                  ___ftdiv@f3 003B                  ___ftneg@f1 0020  
                ___awtoft@c 0078      __end_of_PWM_DutyCycle1 09A2      __end_of_PWM_DutyCycle2 09C3  
                ___ftmul@f1 0040                  ___ftmul@f2 0043                  ___fttol@f1 0050  
            __pcstackCOMMON 0070                 ISR@checksum 006A                __pidataBANK1 07FC  
             LCD_Cursor@Col 00C9               _erro_anterior 00B4               LCD_Cursor@Row 00CB  
              ??_LCD_Cursor 00CA             _LCD_WriteString 0A58               __end_of_trimf 06A9  
                ___lwtoft@c 0078                   ?_PWM_Init 0070                   ?i1___wmul 0070  
            _OPTION_REGbits 0081                  ??_ADC_Init 00C9        __end_of_LCD_WriteCmd 08DA  
 __size_ofi1_PWM_DutyCycle2 001B              ??i1_TIMER0_Set 0070                sprintf@width 00E4  
                   ??_trimf 007E                  __pbssBANK1 00A0                  __pbssBANK3 0190  
        __end_of_LCD_Cursor 0960                  ??_LCD_Init 00CB                     ISR@byte 006E  
           ?_PWM_DutyCycle1 00C9             ?_PWM_DutyCycle2 00C9                  __pmaintext 0F20  
                   ?___ftge 0070                     ?___wmul 00C9                  __pintentry 0004  
              ??_TIMER0_Set 00C9                     _CCP1CON 0017                     _CCP2CON 001D  
                 ?___awtoft 0078                   ?___ftpack 0070                  ??_PWM_Init 00C9  
                ??i1___wmul 0074                   ?___lwtoft 0078                     _ISR$236 0064  
                   _ISR$237 0066                     _ISR$238 0068        __size_of_TIMER0_Init 000B  
                   _SSPCON2 0091                  __stringtab 0800          __end_of_TIMER0_Set 0870  
   __end_of_LCD_WriteString 0A89                   _ADCResult 00AC                ??_USART_Init 00DC  
         LCD_WriteData@Byte 00CA                     ___aldiv 0D06             __size_of___ftge 005D  
                   ___ftadd 06A9                     ___ftdiv 0D95                     ___ftneg 0878  
           __size_of___wmul 0025                     ___ftmul 0E4D                     ___fttol 0C78  
                _erro_atual 00B6                     ___lwdiv 0ABF                     ___lwmod 0A89  
                ??___awtoft 007B                  ??___ftpack 0075                     __ptext1 03CE  
                   __ptext2 088D                     __ptext3 0A0A                     __ptext4 0A89  
                   __ptext5 0ABF                     __ptext6 0AFF                     __ptext7 0D06  
                   __ptext8 0868                     __ptext9 0882                  ??___lwtoft 007B  
                   _display 019E                __size_of_ISR 0397                   _T1CONbits 0010  
                   _dpowers 0810                   _T2CONbits 0012                     _isdigit 088D  
          ___aldiv@dividend 00CD                   _LCD_Clear 0A2F          __end_of_USART_Init 0B48  
                   _sprintf 03CE                     clrloop0 0871        end_of_initialization 0033  
                 _RCSTAbits 0018            ___aldiv@quotient 00D4                  _fuzzy_erro 00A3  
                   trimf@ua 004C        __end_ofi1_TIMER0_Set 1800       i1___wmul@multiplicand 0072  
     __size_of_LCD_WriteCmd 0017                   _PORTBbits 0006                   _PORTEbits 0009  
                ?_LCD_Clear 0070            i1_PWM_DutyCycle2 0909           __size_of_ADC_Init 0012  
              _contador_rb6 00AE         PWM_DutyCycle1@valor 00C9         PWM_DutyCycle2@valor 00C9  
               _CCP1CONbits 0017                 ___ftdiv@exp 003E                 _CCP2CONbits 001D  
                 _TXSTAbits 0098            ?_LCD_WriteString 00CB           __size_of_LCD_Init 006B  
              _LCD_WriteCmd 08C3                 ___ftmul@exp 004A              __end_of___ftge 0BA5  
            __end_of___wmul 0A2F    __size_of_USART_WriteChar 0008           __size_of_PWM_Init 0024  
       start_initialization 0015           __size_ofi1___wmul 0023                 __end_of_ISR 03CE  
          ??_PWM_DutyCycle1 00CB            ??_PWM_DutyCycle2 00CB              _variacao_fuzzy 00A9  
     __end_of_LCD_WriteData 08F1           _USART_ReceiveChar 08F1                    ??___ftge 0076  
        ?_USART_ReceiveChar 0070                    ??___wmul 00CD                 __pdataBANK1 00EB  
              send@checksum 0072         ??_USART_ReceiveChar 0073           __size_of___awtoft 0021  
         __size_of___ftpack 0068                   ___latbits 0002           __size_of___lwtoft 0014  
             __pcstackBANK0 0020               __pcstackBANK1 00C9                 ??_LCD_Clear 00CB  
       __end_of__stringdata 085E                _isdigit$1414 00C9                 sprintf@_val 00DF  
               sprintf@flag 00E3                 sprintf@prec 00DE   __end_of_USART_ReceiveChar 0909  
                  ISR@index 006F       __size_ofi1_TIMER0_Set 0006            ___lwdiv@dividend 00CB  
       TIMER0_Set@contagens 00C9                    ?___aldiv 00C9                    ?___ftadd 0023  
                  ?___ftdiv 0030                    ?___ftneg 0020                    ?___ftmul 0040  
                  ?___fttol 0050                    ?___lwdiv 00C9                    ?___lwmod 00D1  
                 __pstrings 0800               ??_TIMER0_Init 00C9          USART_Init@BaudRate 00D8  
                  ?_isdigit 0070                    _ADC_Init 089D            ___lwdiv@quotient 00CE  
                  ?_sprintf 00D7              __size_of_trimf 0124           ??_USART_WriteChar 0070  
                  _ISR$1677 006B                i1_TIMER0_Set 17FA                _receiveIndex 00BC  
           ___aldiv@divisor 00C9           interrupt_function 0004             ___aldiv@counter 00D2  
                  _LCD_Init 0C0D              ___wmul@product 00CD                   clear_ram0 0870  
                  _PIE1bits 008C                    _PIE2bits 008D                    _PIR1bits 000C  
                  _PIR2bits 000D                   _temp_lida 00A6    __end_ofi1_PWM_DutyCycle2 0924  
                 _tempo_rb6 00C4                  _ADCON0bits 001F                 __stringbase 080F  
                _ADCON1bits 009F                 __stringdata 081A                    _PWM_Init 09E6  
         ___wmul@multiplier 00C9                    i1___wmul 09C3         __end_of_TIMER0_Init 088D  
__size_of_USART_ReceiveChar 0018                  _EECON1bits 018C            __size_of___aldiv 008F  
          __size_of___ftadd 0109            __size_of___ftdiv 00B8            __size_of___ftneg 000A  
          __size_of___ftmul 00D3            __size_of___fttol 008E            __size_of___lwdiv 0040  
          __size_of___lwmod 0036                    ___awtoft 0960                    ___ftpack 0BA5  
        __end_of__stringtab 0810                    ___lwtoft 08AF                   send@index 0073  
          __size_of_isdigit 0010             ___lwdiv@divisor 00C9             ___lwdiv@counter 00D0  
         _USART_WriteString 0924                    __ptext10 09E6                    __ptext11 09A2  
                  __ptext20 0037                    __ptext12 0981                    __ptext21 09C3  
                  __ptext13 0A58                    __ptext30 08AF                    __ptext22 17FA  
                  __ptext14 08DA                    __ptext31 0C78                    __ptext23 0909  
                  __ptext15 0C0D                    __ptext32 0E4D                    __ptext24 0585  
                  __ptext16 0940                    __ptext33 0960                    __ptext25 0878  
                  __ptext17 0A2F                    __ptext34 0BA5                    __ptext26 0B48  
                  __ptext18 08C3                    __ptext35 08F1                    __ptext27 0D95  
                  __ptext19 089D                    __ptext36 0924                    __ptext28 06A9  
                  __ptext37 0860                    __ptext29 07B2          ?_USART_WriteString 0070  
          __size_of_sprintf 01B7               __size_of_main 00E0               __size_of_send 004A  
       USART_WriteChar@byte 0070         ??_USART_WriteString 0071              _receivedBuffer 0197  
                  _setpoint 00C0                  _LCD_Cursor 0940    __size_of_LCD_WriteString 0031  
               _TIMER0_Init 0882                  _INTCONbits 000B   __end_of_USART_WriteString 0940  
                  isdigit@c 00CA                    intlevel1 0000                   sprintf@ap 00DD  
                 sprintf@sp 00E6            ___lwmod@dividend 00D3                   stringcode 080A  
               _fuzzy_delta 00A0        USART_WriteString@str 0072                  _TIMER0_Set 0868  
           _USART_WriteChar 0860                    sprintf@c 00E7                    sprintf@f 00D7  
           ___lwmod@divisor 00D1             ___lwmod@counter 00D6                    stringdir 080A  
                  stringtab 0800                ___aldiv@sign 00D3      __size_of_LCD_WriteData 0017  
               _SSPCON2bits 0091       i1PWM_DutyCycle2@valor 0070                  _SSPCONbits 0014  
                _USART_Init 0AFF  
