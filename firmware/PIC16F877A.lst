

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue May 24 21:31:34 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     	;# 
    46  0001                     	;# 
    47  0002                     	;# 
    48  0003                     	;# 
    49  0004                     	;# 
    50  0005                     	;# 
    51  0006                     	;# 
    52  0007                     	;# 
    53  0008                     	;# 
    54  0009                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000D                     	;# 
    59  000E                     	;# 
    60  000E                     	;# 
    61  000F                     	;# 
    62  0010                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0013                     	;# 
    66  0014                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001B                     	;# 
    75  001B                     	;# 
    76  001C                     	;# 
    77  001D                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  0081                     	;# 
    81  0085                     	;# 
    82  0086                     	;# 
    83  0087                     	;# 
    84  0088                     	;# 
    85  0089                     	;# 
    86  008C                     	;# 
    87  008D                     	;# 
    88  008E                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0094                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009E                     	;# 
    98  009F                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  010E                     	;# 
   102  010F                     	;# 
   103  018C                     	;# 
   104  018D                     	;# 
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  0008                     	;# 
   114  0009                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000D                     	;# 
   119  000E                     	;# 
   120  000E                     	;# 
   121  000F                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0014                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0017                     	;# 
   131  0018                     	;# 
   132  0019                     	;# 
   133  001A                     	;# 
   134  001B                     	;# 
   135  001B                     	;# 
   136  001C                     	;# 
   137  001D                     	;# 
   138  001E                     	;# 
   139  001F                     	;# 
   140  0081                     	;# 
   141  0085                     	;# 
   142  0086                     	;# 
   143  0087                     	;# 
   144  0088                     	;# 
   145  0089                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  010F                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0094                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  009F                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  010F                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0008                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0088                     	;# 
   265  0089                     	;# 
   266  008C                     	;# 
   267  008D                     	;# 
   268  008E                     	;# 
   269  0091                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009C                     	;# 
   276  009D                     	;# 
   277  009E                     	;# 
   278  009F                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  018C                     	;# 
   284  018D                     	;# 
   285  0000                     	;# 
   286  0001                     	;# 
   287  0002                     	;# 
   288  0003                     	;# 
   289  0004                     	;# 
   290  0005                     	;# 
   291  0006                     	;# 
   292  0007                     	;# 
   293  0008                     	;# 
   294  0009                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000D                     	;# 
   299  000E                     	;# 
   300  000E                     	;# 
   301  000F                     	;# 
   302  0010                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  001D                     	;# 
   318  001E                     	;# 
   319  001F                     	;# 
   320  0081                     	;# 
   321  0085                     	;# 
   322  0086                     	;# 
   323  0087                     	;# 
   324  0088                     	;# 
   325  0089                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0098                     	;# 
   334  0099                     	;# 
   335  009C                     	;# 
   336  009D                     	;# 
   337  009E                     	;# 
   338  009F                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  010F                     	;# 
   343  018C                     	;# 
   344  018D                     	;# 
   345  0000                     	;# 
   346  0001                     	;# 
   347  0002                     	;# 
   348  0003                     	;# 
   349  0004                     	;# 
   350  0005                     	;# 
   351  0006                     	;# 
   352  0007                     	;# 
   353  0008                     	;# 
   354  0009                     	;# 
   355  000A                     	;# 
   356  000B                     	;# 
   357  000C                     	;# 
   358  000D                     	;# 
   359  000E                     	;# 
   360  000E                     	;# 
   361  000F                     	;# 
   362  0010                     	;# 
   363  0011                     	;# 
   364  0012                     	;# 
   365  0013                     	;# 
   366  0014                     	;# 
   367  0015                     	;# 
   368  0015                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001B                     	;# 
   376  001C                     	;# 
   377  001D                     	;# 
   378  001E                     	;# 
   379  001F                     	;# 
   380  0081                     	;# 
   381  0085                     	;# 
   382  0086                     	;# 
   383  0087                     	;# 
   384  0088                     	;# 
   385  0089                     	;# 
   386  008C                     	;# 
   387  008D                     	;# 
   388  008E                     	;# 
   389  0091                     	;# 
   390  0092                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0098                     	;# 
   394  0099                     	;# 
   395  009C                     	;# 
   396  009D                     	;# 
   397  009E                     	;# 
   398  009F                     	;# 
   399  010C                     	;# 
   400  010D                     	;# 
   401  010E                     	;# 
   402  010F                     	;# 
   403  018C                     	;# 
   404  018D                     	;# 
   405  0000                     	;# 
   406  0001                     	;# 
   407  0002                     	;# 
   408  0003                     	;# 
   409  0004                     	;# 
   410  0005                     	;# 
   411  0006                     	;# 
   412  0007                     	;# 
   413  0008                     	;# 
   414  0009                     	;# 
   415  000A                     	;# 
   416  000B                     	;# 
   417  000C                     	;# 
   418  000D                     	;# 
   419  000E                     	;# 
   420  000E                     	;# 
   421  000F                     	;# 
   422  0010                     	;# 
   423  0011                     	;# 
   424  0012                     	;# 
   425  0013                     	;# 
   426  0014                     	;# 
   427  0015                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0017                     	;# 
   431  0018                     	;# 
   432  0019                     	;# 
   433  001A                     	;# 
   434  001B                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001D                     	;# 
   438  001E                     	;# 
   439  001F                     	;# 
   440  0081                     	;# 
   441  0085                     	;# 
   442  0086                     	;# 
   443  0087                     	;# 
   444  0088                     	;# 
   445  0089                     	;# 
   446  008C                     	;# 
   447  008D                     	;# 
   448  008E                     	;# 
   449  0091                     	;# 
   450  0092                     	;# 
   451  0093                     	;# 
   452  0094                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009C                     	;# 
   456  009D                     	;# 
   457  009E                     	;# 
   458  009F                     	;# 
   459  010C                     	;# 
   460  010D                     	;# 
   461  010E                     	;# 
   462  010F                     	;# 
   463  018C                     	;# 
   464  018D                     	;# 
   465  0000                     	;# 
   466  0001                     	;# 
   467  0002                     	;# 
   468  0003                     	;# 
   469  0004                     	;# 
   470  0005                     	;# 
   471  0006                     	;# 
   472  0007                     	;# 
   473  0008                     	;# 
   474  0009                     	;# 
   475  000A                     	;# 
   476  000B                     	;# 
   477  000C                     	;# 
   478  000D                     	;# 
   479  000E                     	;# 
   480  000E                     	;# 
   481  000F                     	;# 
   482  0010                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0013                     	;# 
   486  0014                     	;# 
   487  0015                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  001A                     	;# 
   494  001B                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  001D                     	;# 
   498  001E                     	;# 
   499  001F                     	;# 
   500  0081                     	;# 
   501  0085                     	;# 
   502  0086                     	;# 
   503  0087                     	;# 
   504  0088                     	;# 
   505  0089                     	;# 
   506  008C                     	;# 
   507  008D                     	;# 
   508  008E                     	;# 
   509  0091                     	;# 
   510  0092                     	;# 
   511  0093                     	;# 
   512  0094                     	;# 
   513  0098                     	;# 
   514  0099                     	;# 
   515  009C                     	;# 
   516  009D                     	;# 
   517  009E                     	;# 
   518  009F                     	;# 
   519  010C                     	;# 
   520  010D                     	;# 
   521  010E                     	;# 
   522  010F                     	;# 
   523  018C                     	;# 
   524  018D                     	;# 
   525  0000                     	;# 
   526  0001                     	;# 
   527  0002                     	;# 
   528  0003                     	;# 
   529  0004                     	;# 
   530  0005                     	;# 
   531  0006                     	;# 
   532  0007                     	;# 
   533  0008                     	;# 
   534  0009                     	;# 
   535  000A                     	;# 
   536  000B                     	;# 
   537  000C                     	;# 
   538  000D                     	;# 
   539  000E                     	;# 
   540  000E                     	;# 
   541  000F                     	;# 
   542  0010                     	;# 
   543  0011                     	;# 
   544  0012                     	;# 
   545  0013                     	;# 
   546  0014                     	;# 
   547  0015                     	;# 
   548  0015                     	;# 
   549  0016                     	;# 
   550  0017                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  001B                     	;# 
   555  001B                     	;# 
   556  001C                     	;# 
   557  001D                     	;# 
   558  001E                     	;# 
   559  001F                     	;# 
   560  0081                     	;# 
   561  0085                     	;# 
   562  0086                     	;# 
   563  0087                     	;# 
   564  0088                     	;# 
   565  0089                     	;# 
   566  008C                     	;# 
   567  008D                     	;# 
   568  008E                     	;# 
   569  0091                     	;# 
   570  0092                     	;# 
   571  0093                     	;# 
   572  0094                     	;# 
   573  0098                     	;# 
   574  0099                     	;# 
   575  009C                     	;# 
   576  009D                     	;# 
   577  009E                     	;# 
   578  009F                     	;# 
   579  010C                     	;# 
   580  010D                     	;# 
   581  010E                     	;# 
   582  010F                     	;# 
   583  018C                     	;# 
   584  018D                     	;# 
   585                           
   586                           	psect	idataBANK0
   587  07FE                     __pidataBANK0:	
   588                           
   589                           ;initializer for _ligado
   590  07FE  3401               	retlw	1
   591  07FF  3400               	retlw	0
   592                           
   593                           	psect	strings
   594  0700                     __pstrings:	
   595  0700                     stringtab:	
   596  0700                     __stringtab:	
   597                           
   598                           ;	String table - string pointers are 1 byte each
   599  0700  1BFF               	btfsc	btemp+1,7
   600  0701  2F0A               	ljmp	stringcode
   601  0702  1383               	bcf	3,7
   602  0703  187F               	btfsc	btemp+1,0
   603  0704  1783               	bsf	3,7
   604  0705  0800               	movf	0,w
   605  0706  0A84               	incf	4,f
   606  0707  1903               	skipnz
   607  0708  0AFF               	incf	btemp+1,f
   608  0709  0008               	return
   609  070A                     stringcode:	
   610  070A                     stringdir:	
   611  070A  3007               	movlw	high stringdir
   612  070B  008A               	movwf	10
   613  070C  0804               	movf	4,w
   614  070D  0A84               	incf	4,f
   615  070E  0782               	addwf	2,f
   616  070F                     __stringbase:	
   617  070F  3400               	retlw	0
   618  0710                     __end_of__stringtab:	
   619  0710                     _dpowers:	
   620  0710  3401               	retlw	1
   621  0711  3400               	retlw	0
   622  0712  340A               	retlw	10
   623  0713  3400               	retlw	0
   624  0714  3464               	retlw	100
   625  0715  3400               	retlw	0
   626  0716  34E8               	retlw	232
   627  0717  3403               	retlw	3
   628  0718  3410               	retlw	16
   629  0719  3427               	retlw	39
   630  071A                     __end_of_dpowers:	
   631  000E                     _TMR1	set	14
   632  001F                     _ADCON0bits	set	31
   633  001E                     _ADRESH	set	30
   634  0017                     _CCP1CON	set	23
   635  0017                     _CCP1CONbits	set	23
   636  001D                     _CCP2CON	set	29
   637  001D                     _CCP2CONbits	set	29
   638  0015                     _CCPR1L	set	21
   639  001B                     _CCPR2L	set	27
   640  000B                     _INTCONbits	set	11
   641  000C                     _PIR1bits	set	12
   642  000D                     _PIR2bits	set	13
   643  0005                     _PORTA	set	5
   644  0006                     _PORTB	set	6
   645  0006                     _PORTBbits	set	6
   646  0007                     _PORTC	set	7
   647  0008                     _PORTD	set	8
   648  0009                     _PORTE	set	9
   649  0009                     _PORTEbits	set	9
   650  001A                     _RCREG	set	26
   651  0018                     _RCSTAbits	set	24
   652  0013                     _SSPBUF	set	19
   653  0014                     _SSPCONbits	set	20
   654  0010                     _T1CON	set	16
   655  0010                     _T1CONbits	set	16
   656  0012                     _T2CONbits	set	18
   657  0001                     _TMR0	set	1
   658  000F                     _TMR1H	set	15
   659  000E                     _TMR1L	set	14
   660  0019                     _TXREG	set	25
   661  00C1                     _OERR	set	193
   662  009F                     _ADCON1bits	set	159
   663  009E                     _ADRESL	set	158
   664  0081                     _OPTION_REGbits	set	129
   665  008C                     _PIE1bits	set	140
   666  008D                     _PIE2bits	set	141
   667  0092                     _PR2	set	146
   668  0099                     _SPBRG	set	153
   669  0093                     _SSPADD	set	147
   670  0091                     _SSPCON2	set	145
   671  0091                     _SSPCON2bits	set	145
   672  0094                     _SSPSTATbits	set	148
   673  0085                     _TRISA	set	133
   674  0086                     _TRISB	set	134
   675  0087                     _TRISC	set	135
   676  0088                     _TRISD	set	136
   677  0089                     _TRISE	set	137
   678  0098                     _TXSTAbits	set	152
   679  010D                     _EEADR	set	269
   680  010C                     _EEDATA	set	268
   681  018C                     _EECON1bits	set	396
   682  018D                     _EECON2	set	397
   683  071A                     __stringdata:	
   684  071A                     STR_4:	
   685  071A  340A               	retlw	10
   686  071B  340D               	retlw	13
   687  071C  3420               	retlw	32	;' '
   688  071D  342D               	retlw	45	;'-'
   689  071E  342D               	retlw	45	;'-'
   690  071F  342D               	retlw	45	;'-'
   691  0720  342D               	retlw	45	;'-'
   692  0721  342D               	retlw	45	;'-'
   693  0722  342D               	retlw	45	;'-'
   694  0723  342D               	retlw	45	;'-'
   695  0724  3420               	retlw	32	;' '
   696  0725  3445               	retlw	69	;'E'
   697  0726  3453               	retlw	83	;'S'
   698  0727  3454               	retlw	84	;'T'
   699  0728  344F               	retlw	79	;'O'
   700  0729  3455               	retlw	85	;'U'
   701  072A  3452               	retlw	82	;'R'
   702  072B  344F               	retlw	79	;'O'
   703  072C  3420               	retlw	32	;' '
   704  072D  3444               	retlw	68	;'D'
   705  072E  3445               	retlw	69	;'E'
   706  072F  3420               	retlw	32	;' '
   707  0730  3450               	retlw	80	;'P'
   708  0731  3449               	retlw	73	;'I'
   709  0732  344C               	retlw	76	;'L'
   710  0733  3448               	retlw	72	;'H'
   711  0734  3441               	retlw	65	;'A'
   712  0735  3420               	retlw	32	;' '
   713  0736  342D               	retlw	45	;'-'
   714  0737  342D               	retlw	45	;'-'
   715  0738  342D               	retlw	45	;'-'
   716  0739  342D               	retlw	45	;'-'
   717  073A  342D               	retlw	45	;'-'
   718  073B  342D               	retlw	45	;'-'
   719  073C  342D               	retlw	45	;'-'
   720  073D  3420               	retlw	32	;' '
   721  073E  340A               	retlw	10
   722  073F  340D               	retlw	13
   723  0740  3420               	retlw	32	;' '
   724  0741  3400               	retlw	0
   725  0742                     STR_1:	
   726  0742  3449               	retlw	73	;'I'
   727  0743  346E               	retlw	110	;'n'
   728  0744  3469               	retlw	105	;'i'
   729  0745  3463               	retlw	99	;'c'
   730  0746  3469               	retlw	105	;'i'
   731  0747  3461               	retlw	97	;'a'
   732  0748  346C               	retlw	108	;'l'
   733  0749  3469               	retlw	105	;'i'
   734  074A  347A               	retlw	122	;'z'
   735  074B  3461               	retlw	97	;'a'
   736  074C  346E               	retlw	110	;'n'
   737  074D  3464               	retlw	100	;'d'
   738  074E  346F               	retlw	111	;'o'
   739  074F  342E               	retlw	46	;'.'
   740  0750  342E               	retlw	46	;'.'
   741  0751  342E               	retlw	46	;'.'
   742  0752  3400               	retlw	0
   743  0753                     STR_3:	
   744  0753  3452               	retlw	82	;'R'
   745  0754  3450               	retlw	80	;'P'
   746  0755  344D               	retlw	77	;'M'
   747  0756  343A               	retlw	58	;':'
   748  0757  3420               	retlw	32	;' '
   749  0758  3400               	retlw	0
   750  0759                     STR_2:	
   751  0759  3425               	retlw	37	;'%'
   752  075A  3430               	retlw	48	;'0'
   753  075B  3434               	retlw	52	;'4'
   754  075C  3464               	retlw	100	;'d'
   755  075D  3400               	retlw	0
   756  075E                     __end_of__stringdata:	
   757                           
   758                           ; #config settings
   759  0000                     
   760                           	psect	cinit
   761  0015                     start_initialization:	
   762  0015                     __initialization:	
   763                           
   764                           ; Clear objects allocated to COMMON
   765  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   766  0016  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   767                           
   768                           ; Clear objects allocated to BANK0
   769  0017  1383               	bcf	3,7	;select IRP bank0
   770  0018  3054               	movlw	low __pbssBANK0
   771  0019  0084               	movwf	4
   772  001A  3069               	movlw	low (__pbssBANK0+21)
   773  001B  120A  158A  266A  120A  118A  	fcall	clear_ram0
   774                           
   775                           ; Clear objects allocated to BANK1
   776  0020  30C2               	movlw	low __pbssBANK1
   777  0021  0084               	movwf	4
   778  0022  30DA               	movlw	low (__pbssBANK1+24)
   779  0023  120A  158A  266A  120A  118A  	fcall	clear_ram0
   780                           
   781                           ; Initialize objects allocated to BANK0
   782  0028  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   783  002D  00E9               	movwf	__pdataBANK0& (0+127)
   784  002E  120A  118A  27FF   	fcall	__pidataBANK0+1	;fetch initializer
   785  0031  00EA               	movwf	(__pdataBANK0+1)& (0+127)
   786  0032                     end_of_initialization:	
   787                           ;End of C runtime variable initialization code
   788                           
   789  0032                     __end_of__initialization:	
   790  0032  0183               	clrf	3
   791  0033  120A  118A  29ED   	ljmp	_main	;jump to C main() function
   792                           
   793                           	psect	bssCOMMON
   794  007C                     __pbssCOMMON:	
   795  007C                     _rpm:	
   796  007C                     	ds	2
   797                           
   798                           	psect	bssBANK0
   799  0054                     __pbssBANK0:	
   800  0054                     _temp_lida:	
   801  0054                     	ds	3
   802  0057                     _ADCResult:	
   803  0057                     	ds	2
   804  0059                     _contador_rb6:	
   805  0059                     	ds	2
   806  005B                     _contagens_tm0:	
   807  005B                     	ds	2
   808  005D                     _erro_atual:	
   809  005D                     	ds	2
   810  005F                     _pulsos:	
   811  005F                     	ds	2
   812  0061                     _receiveIndex:	
   813  0061                     	ds	2
   814  0063                     _setpoint:	
   815  0063                     	ds	2
   816  0065                     _status:	
   817  0065                     	ds	2
   818  0067                     _tempo_rb6:	
   819  0067                     	ds	2
   820                           
   821                           	psect	dataBANK0
   822  0069                     __pdataBANK0:	
   823  0069                     _ligado:	
   824  0069                     	ds	2
   825                           
   826                           	psect	bssBANK1
   827  00C2                     __pbssBANK1:	
   828  00C2                     _buffer:	
   829  00C2                     	ds	7
   830  00C9                     _receivedBuffer:	
   831  00C9                     	ds	7
   832  00D0                     _display:	
   833  00D0                     	ds	10
   834                           
   835                           	psect	clrtext
   836  0E6A                     clear_ram0:	
   837                           ;	Called with FSR containing the base address, and
   838                           ;	W with the last address+1
   839                           
   840  0E6A  0064               	clrwdt	;clear the watchdog before getting into this loop
   841  0E6B                     clrloop0:	
   842  0E6B  0180               	clrf	0	;clear RAM location pointed to by FSR
   843  0E6C  0A84               	incf	4,f	;increment pointer
   844  0E6D  0604               	xorwf	4,w	;XOR with final address
   845  0E6E  1903               	btfsc	3,2	;have we reached the end yet?
   846  0E6F  3400               	retlw	0	;all done for this memory range, return
   847  0E70  0604               	xorwf	4,w	;XOR again to restore value
   848  0E71  2E6B               	goto	clrloop0	;do the next byte
   849                           
   850                           	psect	cstackBANK1
   851  00A0                     __pcstackBANK1:	
   852  00A0                     ??_TIMER0_Set:	
   853  00A0                     ?_PWM_DutyCycle2:	
   854                           ; 0 bytes @ 0x0
   855                           
   856  00A0                     ??_TIMER0_Init:	
   857                           ; 0 bytes @ 0x0
   858                           
   859  00A0                     ??_ADC_Init:	
   860                           ; 0 bytes @ 0x0
   861                           
   862  00A0                     ??_PWM_Init:	
   863                           ; 0 bytes @ 0x0
   864                           
   865  00A0                     ?_LCD_Cursor:	
   866                           ; 0 bytes @ 0x0
   867                           
   868  00A0                     ?_PWM_DutyCycle1:	
   869                           ; 0 bytes @ 0x0
   870                           
   871  00A0                     ??_isdigit:	
   872                           ; 0 bytes @ 0x0
   873                           
   874  00A0                     ??_LCD_WriteCmd:	
   875                           ; 0 bytes @ 0x0
   876                           
   877  00A0                     ??_LCD_WriteData:	
   878                           ; 0 bytes @ 0x0
   879                           
   880  00A0                     ?___wmul:	
   881                           ; 0 bytes @ 0x0
   882                           
   883  00A0                     ?___lwdiv:	
   884                           ; 2 bytes @ 0x0
   885                           
   886  00A0                     ?___aldiv:	
   887                           ; 2 bytes @ 0x0
   888                           
   889  00A0                     TIMER0_Set@contagens:	
   890                           ; 4 bytes @ 0x0
   891                           
   892  00A0                     LCD_Cursor@Col:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  00A0                     _isdigit$1395:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  00A0                     PWM_DutyCycle1@valor:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  00A0                     PWM_DutyCycle2@valor:	
   902                           ; 2 bytes @ 0x0
   903                           
   904  00A0                     ___wmul@multiplier:	
   905                           ; 2 bytes @ 0x0
   906                           
   907  00A0                     ___lwdiv@divisor:	
   908                           ; 2 bytes @ 0x0
   909                           
   910  00A0                     ___aldiv@divisor:	
   911                           ; 2 bytes @ 0x0
   912                           
   913                           
   914                           ; 4 bytes @ 0x0
   915  00A0                     	ds	1
   916  00A1                     ??_LCD_Cursor:	
   917  00A1                     LCD_WriteCmd@Byte:	
   918                           ; 0 bytes @ 0x1
   919                           
   920  00A1                     LCD_WriteData@Byte:	
   921                           ; 1 bytes @ 0x1
   922                           
   923  00A1                     isdigit@c:	
   924                           ; 1 bytes @ 0x1
   925                           
   926                           
   927                           ; 1 bytes @ 0x1
   928  00A1                     	ds	1
   929  00A2                     ??_PWM_DutyCycle2:	
   930  00A2                     ??_LCD_Init:	
   931                           ; 0 bytes @ 0x2
   932                           
   933  00A2                     ?_LCD_WriteString:	
   934                           ; 0 bytes @ 0x2
   935                           
   936  00A2                     ??_PWM_DutyCycle1:	
   937                           ; 0 bytes @ 0x2
   938                           
   939  00A2                     ??_LCD_Clear:	
   940                           ; 0 bytes @ 0x2
   941                           
   942  00A2                     LCD_Cursor@Row:	
   943                           ; 0 bytes @ 0x2
   944                           
   945  00A2                     LCD_WriteString@Str:	
   946                           ; 1 bytes @ 0x2
   947                           
   948  00A2                     ___wmul@multiplicand:	
   949                           ; 2 bytes @ 0x2
   950                           
   951  00A2                     ___lwdiv@dividend:	
   952                           ; 2 bytes @ 0x2
   953                           
   954                           
   955                           ; 2 bytes @ 0x2
   956  00A2                     	ds	2
   957  00A4                     ??_LCD_WriteString:	
   958  00A4                     ??___wmul:	
   959                           ; 0 bytes @ 0x4
   960                           
   961  00A4                     ??___lwdiv:	
   962                           ; 0 bytes @ 0x4
   963                           
   964  00A4                     ___wmul@product:	
   965                           ; 0 bytes @ 0x4
   966                           
   967  00A4                     ___aldiv@dividend:	
   968                           ; 2 bytes @ 0x4
   969                           
   970                           
   971                           ; 4 bytes @ 0x4
   972  00A4                     	ds	1
   973  00A5                     ___lwdiv@quotient:	
   974                           
   975                           ; 2 bytes @ 0x5
   976  00A5                     	ds	2
   977  00A7                     ___lwdiv@counter:	
   978                           
   979                           ; 1 bytes @ 0x7
   980  00A7                     	ds	1
   981  00A8                     ??___aldiv:	
   982  00A8                     ?___lwmod:	
   983                           ; 0 bytes @ 0x8
   984                           
   985  00A8                     ___lwmod@divisor:	
   986                           ; 2 bytes @ 0x8
   987                           
   988                           
   989                           ; 2 bytes @ 0x8
   990  00A8                     	ds	1
   991  00A9                     ___aldiv@counter:	
   992                           
   993                           ; 1 bytes @ 0x9
   994  00A9                     	ds	1
   995  00AA                     ___aldiv@sign:	
   996  00AA                     ___lwmod@dividend:	
   997                           ; 1 bytes @ 0xA
   998                           
   999                           
  1000                           ; 2 bytes @ 0xA
  1001  00AA                     	ds	1
  1002  00AB                     ___aldiv@quotient:	
  1003                           
  1004                           ; 4 bytes @ 0xB
  1005  00AB                     	ds	1
  1006  00AC                     ??___lwmod:	
  1007                           
  1008                           ; 0 bytes @ 0xC
  1009  00AC                     	ds	1
  1010  00AD                     ___lwmod@counter:	
  1011                           
  1012                           ; 1 bytes @ 0xD
  1013  00AD                     	ds	1
  1014  00AE                     ?_sprintf:	
  1015  00AE                     sprintf@f:	
  1016                           ; 2 bytes @ 0xE
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0xE
  1020  00AE                     	ds	1
  1021  00AF                     ?_USART_Init:	
  1022  00AF                     USART_Init@BaudRate:	
  1023                           ; 0 bytes @ 0xF
  1024                           
  1025                           
  1026                           ; 4 bytes @ 0xF
  1027  00AF                     	ds	2
  1028  00B1                     ??_sprintf:	
  1029                           
  1030                           ; 0 bytes @ 0x11
  1031  00B1                     	ds	2
  1032  00B3                     ??_USART_Init:	
  1033                           
  1034                           ; 0 bytes @ 0x13
  1035  00B3                     	ds	1
  1036  00B4                     sprintf@ap:	
  1037                           
  1038                           ; 1 bytes @ 0x14
  1039  00B4                     	ds	1
  1040  00B5                     sprintf@prec:	
  1041                           
  1042                           ; 1 bytes @ 0x15
  1043  00B5                     	ds	1
  1044  00B6                     sprintf@_val:	
  1045                           
  1046                           ; 4 bytes @ 0x16
  1047  00B6                     	ds	4
  1048  00BA                     sprintf@flag:	
  1049                           
  1050                           ; 1 bytes @ 0x1A
  1051  00BA                     	ds	1
  1052  00BB                     sprintf@width:	
  1053                           
  1054                           ; 2 bytes @ 0x1B
  1055  00BB                     	ds	2
  1056  00BD                     sprintf@sp:	
  1057                           
  1058                           ; 1 bytes @ 0x1D
  1059  00BD                     	ds	1
  1060  00BE                     sprintf@c:	
  1061                           
  1062                           ; 1 bytes @ 0x1E
  1063  00BE                     	ds	1
  1064  00BF                     ??_main:	
  1065                           
  1066                           ; 0 bytes @ 0x1F
  1067  00BF                     	ds	3
  1068                           
  1069                           	psect	cstackCOMMON
  1070  0070                     __pcstackCOMMON:	
  1071  0070                     ?_TIMER0_Set:	
  1072  0070                     ?_TIMER0_Init:	
  1073                           ; 0 bytes @ 0x0
  1074                           
  1075  0070                     ?_ADC_Init:	
  1076                           ; 0 bytes @ 0x0
  1077                           
  1078  0070                     ?_PWM_Init:	
  1079                           ; 0 bytes @ 0x0
  1080                           
  1081  0070                     ?_LCD_Init:	
  1082                           ; 0 bytes @ 0x0
  1083                           
  1084  0070                     ?_LCD_Clear:	
  1085                           ; 0 bytes @ 0x0
  1086                           
  1087  0070                     ?_isdigit:	
  1088                           ; 0 bytes @ 0x0
  1089                           
  1090  0070                     ?_ISR:	
  1091                           ; 1 bit 
  1092                           
  1093  0070                     ?_main:	
  1094                           ; 0 bytes @ 0x0
  1095                           
  1096  0070                     ?_LCD_WriteCmd:	
  1097                           ; 0 bytes @ 0x0
  1098                           
  1099  0070                     ?_LCD_WriteData:	
  1100                           ; 0 bytes @ 0x0
  1101                           
  1102  0070                     ?i1_TIMER0_Set:	
  1103                           ; 0 bytes @ 0x0
  1104                           
  1105  0070                     ??i1_TIMER0_Set:	
  1106                           ; 0 bytes @ 0x0
  1107                           
  1108  0070                     ?i1_PWM_DutyCycle2:	
  1109                           ; 0 bytes @ 0x0
  1110                           
  1111  0070                     ?___ftpack:	
  1112                           ; 0 bytes @ 0x0
  1113                           
  1114  0070                     i1TIMER0_Set@contagens:	
  1115                           ; 3 bytes @ 0x0
  1116                           
  1117  0070                     i1PWM_DutyCycle2@valor:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ___ftpack@arg:	
  1121                           ; 2 bytes @ 0x0
  1122                           
  1123                           
  1124                           ; 3 bytes @ 0x0
  1125  0070                     	ds	2
  1126  0072                     ??i1_PWM_DutyCycle2:	
  1127                           
  1128                           ; 0 bytes @ 0x2
  1129  0072                     	ds	1
  1130  0073                     ___ftpack@exp:	
  1131                           
  1132                           ; 1 bytes @ 0x3
  1133  0073                     	ds	1
  1134  0074                     ___ftpack@sign:	
  1135                           
  1136                           ; 1 bytes @ 0x4
  1137  0074                     	ds	1
  1138  0075                     ??___ftpack:	
  1139                           
  1140                           ; 0 bytes @ 0x5
  1141  0075                     	ds	3
  1142  0078                     ?___lwtoft:	
  1143  0078                     ___lwtoft@c:	
  1144                           ; 3 bytes @ 0x8
  1145                           
  1146                           
  1147                           ; 2 bytes @ 0x8
  1148  0078                     	ds	3
  1149  007B                     ??___lwtoft:	
  1150                           
  1151                           ; 0 bytes @ 0xB
  1152  007B                     	ds	1
  1153                           
  1154                           	psect	cstackBANK0
  1155  0020                     __pcstackBANK0:	
  1156  0020                     ?___ftdiv:	
  1157  0020                     ___ftdiv@f2:	
  1158                           ; 3 bytes @ 0x0
  1159                           
  1160                           
  1161                           ; 3 bytes @ 0x0
  1162  0020                     	ds	3
  1163  0023                     ___ftdiv@f1:	
  1164                           
  1165                           ; 3 bytes @ 0x3
  1166  0023                     	ds	3
  1167  0026                     ??___ftdiv:	
  1168                           
  1169                           ; 0 bytes @ 0x6
  1170  0026                     	ds	4
  1171  002A                     ___ftdiv@cntr:	
  1172                           
  1173                           ; 1 bytes @ 0xA
  1174  002A                     	ds	1
  1175  002B                     ___ftdiv@f3:	
  1176                           
  1177                           ; 3 bytes @ 0xB
  1178  002B                     	ds	3
  1179  002E                     ___ftdiv@exp:	
  1180                           
  1181                           ; 1 bytes @ 0xE
  1182  002E                     	ds	1
  1183  002F                     ___ftdiv@sign:	
  1184                           
  1185                           ; 1 bytes @ 0xF
  1186  002F                     	ds	1
  1187  0030                     ?___ftmul:	
  1188  0030                     ___ftmul@f1:	
  1189                           ; 3 bytes @ 0x10
  1190                           
  1191                           
  1192                           ; 3 bytes @ 0x10
  1193  0030                     	ds	3
  1194  0033                     ___ftmul@f2:	
  1195                           
  1196                           ; 3 bytes @ 0x13
  1197  0033                     	ds	3
  1198  0036                     ??___ftmul:	
  1199                           
  1200                           ; 0 bytes @ 0x16
  1201  0036                     	ds	4
  1202  003A                     ___ftmul@exp:	
  1203                           
  1204                           ; 1 bytes @ 0x1A
  1205  003A                     	ds	1
  1206  003B                     ___ftmul@f3_as_product:	
  1207                           
  1208                           ; 3 bytes @ 0x1B
  1209  003B                     	ds	3
  1210  003E                     ___ftmul@cntr:	
  1211                           
  1212                           ; 1 bytes @ 0x1E
  1213  003E                     	ds	1
  1214  003F                     ___ftmul@sign:	
  1215                           
  1216                           ; 1 bytes @ 0x1F
  1217  003F                     	ds	1
  1218  0040                     ?___fttol:	
  1219  0040                     ___fttol@f1:	
  1220                           ; 4 bytes @ 0x20
  1221                           
  1222                           
  1223                           ; 3 bytes @ 0x20
  1224  0040                     	ds	4
  1225  0044                     ??___fttol:	
  1226                           
  1227                           ; 0 bytes @ 0x24
  1228  0044                     	ds	4
  1229  0048                     ___fttol@sign1:	
  1230                           
  1231                           ; 1 bytes @ 0x28
  1232  0048                     	ds	1
  1233  0049                     ___fttol@lval:	
  1234                           
  1235                           ; 4 bytes @ 0x29
  1236  0049                     	ds	4
  1237  004D                     ___fttol@exp1:	
  1238                           
  1239                           ; 1 bytes @ 0x2D
  1240  004D                     	ds	1
  1241  004E                     ??_ISR:	
  1242                           
  1243                           ; 0 bytes @ 0x2E
  1244  004E                     	ds	6
  1245                           
  1246                           	psect	maintext
  1247  01ED                     __pmaintext:	
  1248 ;;
  1249 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1250 ;;
  1251 ;; *************** function _main *****************
  1252 ;; Defined at:
  1253 ;;		line 176 in file "C:\Users\332414\Desktop\FuzzySI\firmware\main.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;		None               void
  1260 ;; Registers used:
  1261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 17F/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1267 ;;      Params:         0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0
  1269 ;;      Temps:          0       0       3       0       0
  1270 ;;      Totals:         0       0       3       0       0
  1271 ;;Total ram usage:        3 bytes
  1272 ;; Hardware stack levels required when called:    5
  1273 ;; This function calls:
  1274 ;;		_ADC_Init
  1275 ;;		_LCD_Clear
  1276 ;;		_LCD_Cursor
  1277 ;;		_LCD_Init
  1278 ;;		_LCD_WriteString
  1279 ;;		_PWM_DutyCycle1
  1280 ;;		_PWM_DutyCycle2
  1281 ;;		_PWM_Init
  1282 ;;		_TIMER0_Init
  1283 ;;		_TIMER0_Set
  1284 ;;		_USART_Init
  1285 ;;		_sprintf
  1286 ;; This function is called by:
  1287 ;;		Startup code after reset
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function _main
  1293  01ED                     _main:	
  1294                           
  1295                           ;main.c: 178: TRISA = 0b00000001;
  1296                           
  1297                           ;incstack = 0
  1298                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1299  01ED  3001               	movlw	1
  1300  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  1301  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  1302  01F0  0085               	movwf	5	;volatile
  1303                           
  1304                           ;main.c: 179: PORTA = 0b00000001;
  1305  01F1  3001               	movlw	1
  1306  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1307  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1308  01F4  0085               	movwf	5	;volatile
  1309                           
  1310                           ;main.c: 180: TRISB = 0b00000000;
  1311  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1312  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1313  01F7  0186               	clrf	6	;volatile
  1314                           
  1315                           ;main.c: 181: PORTB = 0b00000000;
  1316  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1317  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1318  01FA  0186               	clrf	6	;volatile
  1319                           
  1320                           ;main.c: 182: TRISC = 0b10000001;
  1321  01FB  3081               	movlw	129
  1322  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  1323  01FD  1303               	bcf	3,6	;RP1=0, select bank1
  1324  01FE  0087               	movwf	7	;volatile
  1325                           
  1326                           ;main.c: 183: PORTC = 0b11000000;
  1327  01FF  30C0               	movlw	192
  1328  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0202  0087               	movwf	7	;volatile
  1331                           
  1332                           ;main.c: 184: TRISD = 0b00000000;
  1333  0203  1683               	bsf	3,5	;RP0=1, select bank1
  1334  0204  1303               	bcf	3,6	;RP1=0, select bank1
  1335  0205  0188               	clrf	8	;volatile
  1336                           
  1337                           ;main.c: 185: PORTD = 0b00000000;
  1338  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1339  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1340  0208  0188               	clrf	8	;volatile
  1341                           
  1342                           ;main.c: 186: TRISE = 0b00000000;
  1343  0209  1683               	bsf	3,5	;RP0=1, select bank1
  1344  020A  1303               	bcf	3,6	;RP1=0, select bank1
  1345  020B  0189               	clrf	9	;volatile
  1346                           
  1347                           ;main.c: 187: PORTE = 0b00000000;
  1348  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1349  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1350  020E  0189               	clrf	9	;volatile
  1351                           
  1352                           ;main.c: 190: T1CON = 0x03;
  1353  020F  3003               	movlw	3
  1354  0210  0090               	movwf	16	;volatile
  1355                           
  1356                           ;main.c: 191: TMR1L = 0x00;
  1357  0211  018E               	clrf	14	;volatile
  1358                           
  1359                           ;main.c: 192: TMR1H = 0x00;
  1360  0212  018F               	clrf	15	;volatile
  1361                           
  1362                           ;main.c: 195: USART_Init(115200);
  1363  0213  3000               	movlw	0
  1364  0214  1683               	bsf	3,5	;RP0=1, select bank1
  1365  0215  1303               	bcf	3,6	;RP1=0, select bank1
  1366  0216  00B2               	movwf	(USART_Init@BaudRate+3)^(0+128)
  1367  0217  3001               	movlw	1
  1368  0218  00B1               	movwf	(USART_Init@BaudRate+2)^(0+128)
  1369  0219  30C2               	movlw	194
  1370  021A  00B0               	movwf	(USART_Init@BaudRate+1)^(0+128)
  1371  021B  3000               	movlw	0
  1372  021C  00AF               	movwf	USART_Init@BaudRate^(0+128)
  1373  021D  120A  118A  275E  120A  118A  	fcall	_USART_Init
  1374                           
  1375                           ;main.c: 196: TIMER0_Init();
  1376  0222  120A  158A  2672  120A  118A  	fcall	_TIMER0_Init
  1377                           
  1378                           ;main.c: 197: ADC_Init();
  1379  0227  120A  158A  268D  120A  118A  	fcall	_ADC_Init
  1380                           
  1381                           ;main.c: 198: PWM_Init();
  1382  022C  120A  158A  2727  120A  118A  	fcall	_PWM_Init
  1383                           
  1384                           ;main.c: 199: LCD_Init();
  1385  0231  120A  118A  260D  120A  118A  	fcall	_LCD_Init
  1386                           
  1387                           ;main.c: 202: INTCONbits.PEIE = 1;
  1388  0236  170B               	bsf	11,6	;volatile
  1389                           
  1390                           ;main.c: 203: INTCONbits.GIE = 1;
  1391  0237  178B               	bsf	11,7	;volatile
  1392                           
  1393                           ;main.c: 210: LCD_Init();
  1394  0238  120A  118A  260D  120A  118A  	fcall	_LCD_Init
  1395                           
  1396                           ;main.c: 211: LCD_Cursor(0, 0);
  1397  023D  1683               	bsf	3,5	;RP0=1, select bank1
  1398  023E  1303               	bcf	3,6	;RP1=0, select bank1
  1399  023F  01A0               	clrf	LCD_Cursor@Col^(0+128)
  1400  0240  3000               	movlw	0
  1401  0241  120A  118A  26E0  120A  118A  	fcall	_LCD_Cursor
  1402                           
  1403                           ;main.c: 212: LCD_WriteString("Inicializando...");
  1404  0246  3033               	movlw	low (STR_1-__stringbase)
  1405  0247  1683               	bsf	3,5	;RP0=1, select bank1
  1406  0248  1303               	bcf	3,6	;RP1=0, select bank1
  1407  0249  00A2               	movwf	LCD_WriteString@Str^(0+128)
  1408  024A  3080               	movlw	128
  1409  024B  00A3               	movwf	(LCD_WriteString@Str+1)^(0+128)
  1410  024C  120A  158A  2799  120A  118A  	fcall	_LCD_WriteString
  1411                           
  1412                           ;main.c: 215: PWM_DutyCycle1(0);
  1413  0251  3000               	movlw	0
  1414  0252  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0253  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0254  00A0               	movwf	PWM_DutyCycle1@valor^(0+128)
  1417  0255  3000               	movlw	0
  1418  0256  00A1               	movwf	(PWM_DutyCycle1@valor^(0+128)+1)
  1419  0257  120A  158A  26E5  120A  118A  	fcall	_PWM_DutyCycle1
  1420                           
  1421                           ;main.c: 216: PWM_DutyCycle2(0);
  1422  025C  3000               	movlw	0
  1423  025D  1683               	bsf	3,5	;RP0=1, select bank1
  1424  025E  1303               	bcf	3,6	;RP1=0, select bank1
  1425  025F  00A0               	movwf	PWM_DutyCycle2@valor^(0+128)
  1426  0260  3000               	movlw	0
  1427  0261  00A1               	movwf	(PWM_DutyCycle2@valor^(0+128)+1)
  1428  0262  120A  158A  2706  120A  118A  	fcall	_PWM_DutyCycle2
  1429                           
  1430                           ;main.c: 219: TIMER0_Set(238);
  1431  0267  30EE               	movlw	238
  1432  0268  120A  158A  2662  120A  118A  	fcall	_TIMER0_Set
  1433                           
  1434                           ;main.c: 222: _delay((unsigned long)((1000)*(18432000/4000.0)));
  1435  026D  3018               	movlw	24
  1436  026E  1683               	bsf	3,5	;RP0=1, select bank1
  1437  026F  1303               	bcf	3,6	;RP1=0, select bank1
  1438  0270  00C1               	movwf	(??_main^(0+128)+2)
  1439  0271  3061               	movlw	97
  1440  0272  00C0               	movwf	(??_main^(0+128)+1)
  1441  0273  306E               	movlw	110
  1442  0274  00BF               	movwf	??_main^(0+128)
  1443  0275                     u2517:	
  1444  0275  0BBF               	decfsz	??_main^(0+128),f
  1445  0276  2A75               	goto	u2517
  1446  0277  0BC0               	decfsz	(??_main^(0+128)+1),f
  1447  0278  2A75               	goto	u2517
  1448  0279  0BC1               	decfsz	(??_main^(0+128)+2),f
  1449  027A  2A75               	goto	u2517
  1450  027B  0000               	nop
  1451  027C                     l123:	
  1452                           ;main.c: 225: while (1)
  1453                           
  1454                           
  1455                           ;main.c: 226: {
  1456                           ;main.c: 228: sprintf(display, "%04d", rpm);
  1457  027C  304A               	movlw	(STR_2-__stringbase)& (0+255)
  1458  027D  1683               	bsf	3,5	;RP0=1, select bank1
  1459  027E  1303               	bcf	3,6	;RP1=0, select bank1
  1460  027F  00BF               	movwf	??_main^(0+128)
  1461  0280  083F               	movf	??_main^(0+128),w
  1462  0281  00AE               	movwf	sprintf@f^(0+128)
  1463  0282  087D               	movf	_rpm+1,w
  1464  0283  01B0               	clrf	((?_sprintf+1)^(0+128)+1)
  1465  0284  07B0               	addwf	((?_sprintf+1)^(0+128)+1),f
  1466  0285  087C               	movf	_rpm,w
  1467  0286  01AF               	clrf	(?_sprintf^(0+128)+1)
  1468  0287  07AF               	addwf	(?_sprintf^(0+128)+1),f
  1469  0288  30D0               	movlw	_display& (0+255)
  1470  0289  120A  118A  2036  120A  118A  	fcall	_sprintf
  1471                           
  1472                           ;main.c: 235: LCD_Clear();
  1473  028E  120A  158A  2770  120A  118A  	fcall	_LCD_Clear
  1474                           
  1475                           ;main.c: 236: LCD_Cursor(0, 0);
  1476  0293  1683               	bsf	3,5	;RP0=1, select bank1
  1477  0294  1303               	bcf	3,6	;RP1=0, select bank1
  1478  0295  01A0               	clrf	LCD_Cursor@Col^(0+128)
  1479  0296  3000               	movlw	0
  1480  0297  120A  118A  26E0  120A  118A  	fcall	_LCD_Cursor
  1481                           
  1482                           ;main.c: 237: LCD_WriteString("RPM: ");
  1483  029C  3044               	movlw	low (STR_3-__stringbase)
  1484  029D  1683               	bsf	3,5	;RP0=1, select bank1
  1485  029E  1303               	bcf	3,6	;RP1=0, select bank1
  1486  029F  00A2               	movwf	LCD_WriteString@Str^(0+128)
  1487  02A0  3080               	movlw	128
  1488  02A1  00A3               	movwf	(LCD_WriteString@Str+1)^(0+128)
  1489  02A2  120A  158A  2799  120A  118A  	fcall	_LCD_WriteString
  1490                           
  1491                           ;main.c: 238: LCD_Cursor(0, 6);
  1492  02A7  3006               	movlw	6
  1493  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  1494  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  1495  02AA  00BF               	movwf	??_main^(0+128)
  1496  02AB  083F               	movf	??_main^(0+128),w
  1497  02AC  00A0               	movwf	LCD_Cursor@Col^(0+128)
  1498  02AD  3000               	movlw	0
  1499  02AE  120A  118A  26E0  120A  118A  	fcall	_LCD_Cursor
  1500                           
  1501                           ;main.c: 239: LCD_WriteString(display);
  1502  02B3  30D0               	movlw	_display& (0+255)
  1503  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  1504  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  1505  02B6  00A2               	movwf	LCD_WriteString@Str^(0+128)
  1506  02B7  3000               	movlw	0
  1507  02B8  00A3               	movwf	(LCD_WriteString@Str+1)^(0+128)
  1508  02B9  120A  158A  2799  120A  118A  	fcall	_LCD_WriteString
  1509                           
  1510                           ;main.c: 241: _delay((unsigned long)((200)*(18432000/4000.0)));
  1511  02BE  3005               	movlw	5
  1512  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  1513  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  1514  02C1  00C1               	movwf	(??_main^(0+128)+2)
  1515  02C2  30AD               	movlw	173
  1516  02C3  00C0               	movwf	(??_main^(0+128)+1)
  1517  02C4  30E0               	movlw	224
  1518  02C5  00BF               	movwf	??_main^(0+128)
  1519  02C6                     u2527:	
  1520  02C6  0BBF               	decfsz	??_main^(0+128),f
  1521  02C7  2AC6               	goto	u2527
  1522  02C8  0BC0               	decfsz	(??_main^(0+128)+1),f
  1523  02C9  2AC6               	goto	u2527
  1524  02CA  0BC1               	decfsz	(??_main^(0+128)+2),f
  1525  02CB  2AC6               	goto	u2527
  1526  02CC  2A7C               	goto	l123
  1527  02CD                     __end_of_main:	
  1528                           
  1529                           	psect	text1
  1530  0036                     __ptext1:	
  1531 ;; *************** function _sprintf *****************
  1532 ;; Defined at:
  1533 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  sp              1    wreg     PTR unsigned char 
  1536 ;;		 -> display(10), 
  1537 ;;  f               1   14[BANK1 ] PTR const unsigned char 
  1538 ;;		 -> STR_2(5), 
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  sp              1   29[BANK1 ] PTR unsigned char 
  1541 ;;		 -> display(10), 
  1542 ;;  _val            4   22[BANK1 ] struct .
  1543 ;;  width           2   27[BANK1 ] int 
  1544 ;;  c               1   30[BANK1 ] char 
  1545 ;;  flag            1   26[BANK1 ] unsigned char 
  1546 ;;  prec            1   21[BANK1 ] char 
  1547 ;;  ap              1   20[BANK1 ] PTR void [1]
  1548 ;;		 -> ?_sprintf(2), 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  2   14[BANK1 ] int 
  1551 ;; Registers used:
  1552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1558 ;;      Params:         0       0       3       0       0
  1559 ;;      Locals:         0       0      11       0       0
  1560 ;;      Temps:          0       0       3       0       0
  1561 ;;      Totals:         0       0      17       0       0
  1562 ;;Total ram usage:       17 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    4
  1565 ;; This function calls:
  1566 ;;		___lwdiv
  1567 ;;		___lwmod
  1568 ;;		___wmul
  1569 ;;		_isdigit
  1570 ;; This function is called by:
  1571 ;;		_main
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           
  1576                           ;psect for function _sprintf
  1577  0036                     _sprintf:	
  1578                           
  1579                           ;incstack = 0
  1580                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1581                           ;sprintf@sp stored from wreg
  1582  0036  1683               	bsf	3,5	;RP0=1, select bank1
  1583  0037  1303               	bcf	3,6	;RP1=0, select bank1
  1584  0038  00BD               	movwf	sprintf@sp^(0+128)
  1585                           
  1586                           ;doprnt.c: 494: va_list ap;
  1587                           ;doprnt.c: 499: signed char c;
  1588                           ;doprnt.c: 501: int width;
  1589                           ;doprnt.c: 506: signed char prec;
  1590                           ;doprnt.c: 508: unsigned char flag;
  1591                           ;doprnt.c: 527: union {
  1592                           ;doprnt.c: 528: unsigned int _val;
  1593                           ;doprnt.c: 529: struct {
  1594                           ;doprnt.c: 530: const char * _cp;
  1595                           ;doprnt.c: 531: unsigned _len;
  1596                           ;doprnt.c: 532: } _str;
  1597                           ;doprnt.c: 533: } _val;
  1598                           ;doprnt.c: 542: *ap = __va_start();
  1599  0039  30AF               	movlw	(?_sprintf+1)& (0+255)
  1600  003A  00B1               	movwf	??_sprintf^(0+128)
  1601  003B  0831               	movf	??_sprintf^(0+128),w
  1602  003C  00B4               	movwf	sprintf@ap^(0+128)
  1603  003D                     l2159:	
  1604                           ;doprnt.c: 545: while(c = *f++) {
  1605                           
  1606  003D  3001               	movlw	1
  1607  003E  1683               	bsf	3,5	;RP0=1, select bank1
  1608  003F  1303               	bcf	3,6	;RP1=0, select bank1
  1609  0040  07AE               	addwf	sprintf@f^(0+128),f
  1610  0041  30FF               	movlw	-1
  1611  0042  072E               	addwf	sprintf@f^(0+128),w
  1612  0043  0084               	movwf	4
  1613  0044  120A  118A  270A  120A  118A  	fcall	stringdir
  1614  0049  00B1               	movwf	??_sprintf^(0+128)
  1615  004A  0831               	movf	??_sprintf^(0+128),w
  1616  004B  00BE               	movwf	sprintf@c^(0+128)
  1617  004C  08BE               	movf	sprintf@c^(0+128),f
  1618  004D  1903               	btfsc	3,2
  1619  004E  29E6               	goto	l2161
  1620                           
  1621                           ;doprnt.c: 547: if(c != '%')
  1622  004F  083E               	movf	sprintf@c^(0+128),w
  1623  0050  3A25               	xorlw	37
  1624  0051  1903               	skipnz
  1625  0052  285F               	goto	l2063
  1626                           
  1627                           ;doprnt.c: 549: {
  1628                           ;doprnt.c: 550: ((*sp++ = (c)));
  1629  0053  083E               	movf	sprintf@c^(0+128),w
  1630  0054  00B1               	movwf	??_sprintf^(0+128)
  1631  0055  083D               	movf	sprintf@sp^(0+128),w
  1632  0056  0084               	movwf	4
  1633  0057  0831               	movf	??_sprintf^(0+128),w
  1634  0058  1383               	bcf	3,7	;select IRP bank0
  1635  0059  0080               	movwf	0
  1636  005A  3001               	movlw	1
  1637  005B  00B1               	movwf	??_sprintf^(0+128)
  1638  005C  0831               	movf	??_sprintf^(0+128),w
  1639  005D  07BD               	addwf	sprintf@sp^(0+128),f
  1640                           
  1641                           ;doprnt.c: 551: continue;
  1642  005E  283D               	goto	l2159
  1643  005F                     l2063:	
  1644                           
  1645                           ;doprnt.c: 552: }
  1646                           ;doprnt.c: 555: width = 0;
  1647  005F  01BB               	clrf	sprintf@width^(0+128)
  1648  0060  01BC               	clrf	(sprintf@width+1)^(0+128)
  1649                           
  1650                           ;doprnt.c: 557: flag = 0;
  1651  0061  01BA               	clrf	sprintf@flag^(0+128)
  1652                           
  1653                           ;doprnt.c: 560: switch(*f) {
  1654                           
  1655                           ;doprnt.c: 559: for(;;) {
  1656  0062  2868               	goto	l2069
  1657  0063                     l400:	
  1658                           ;doprnt.c: 588: case '0':
  1659                           
  1660                           
  1661                           ;doprnt.c: 589: flag |= 0x04;
  1662  0063  153A               	bsf	sprintf@flag^(0+128),2
  1663                           
  1664                           ;doprnt.c: 590: f++;
  1665  0064  3001               	movlw	1
  1666  0065  00B1               	movwf	??_sprintf^(0+128)
  1667  0066  0831               	movf	??_sprintf^(0+128),w
  1668  0067  07AE               	addwf	sprintf@f^(0+128),f
  1669  0068                     l2069:	
  1670                           ;doprnt.c: 593: }
  1671                           
  1672                           ;doprnt.c: 591: continue;
  1673                           
  1674  0068  082E               	movf	sprintf@f^(0+128),w
  1675  0069  0084               	movwf	4
  1676  006A  120A  118A  270A  120A  118A  	fcall	stringdir
  1677                           
  1678                           ; Switch size 1, requested type "space"
  1679                           ; Number of cases is 1, Range of values is 48 to 48
  1680                           ; switch strategies available:
  1681                           ; Name         Instructions Cycles
  1682                           ; simple_byte            4     3 (average)
  1683                           ; direct_byte           14    11 (fixed)
  1684                           ; jumptable            263     9 (fixed)
  1685                           ;	Chosen strategy is simple_byte
  1686  006F  3A30               	xorlw	48	; case 48
  1687  0070  1903               	skipnz
  1688  0071  2863               	goto	l400
  1689  0072  2873               	goto	l2071
  1690  0073                     l2071:	
  1691                           ;doprnt.c: 595: }
  1692                           
  1693                           ;doprnt.c: 594: break;
  1694                           
  1695                           
  1696                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  1697  0073  082E               	movf	sprintf@f^(0+128),w
  1698  0074  0084               	movwf	4
  1699  0075  120A  118A  270A  120A  118A  	fcall	stringdir
  1700  007A  120A  158A  267D  120A  118A  	fcall	_isdigit
  1701  007F  1C03               	btfss	3,0
  1702  0080  28C3               	goto	l2085
  1703                           
  1704                           ;doprnt.c: 607: width = 0;
  1705  0081  1683               	bsf	3,5	;RP0=1, select bank1
  1706  0082  1303               	bcf	3,6	;RP1=0, select bank1
  1707  0083  01BB               	clrf	sprintf@width^(0+128)
  1708  0084  01BC               	clrf	(sprintf@width+1)^(0+128)
  1709  0085                     l2075:	
  1710                           ;doprnt.c: 608: do {
  1711                           
  1712                           
  1713                           ;doprnt.c: 609: width *= 10;
  1714  0085  300A               	movlw	10
  1715  0086  1683               	bsf	3,5	;RP0=1, select bank1
  1716  0087  1303               	bcf	3,6	;RP1=0, select bank1
  1717  0088  00A0               	movwf	___wmul@multiplier^(0+128)
  1718  0089  3000               	movlw	0
  1719  008A  00A1               	movwf	(___wmul@multiplier^(0+128)+1)
  1720  008B  083C               	movf	(sprintf@width+1)^(0+128),w
  1721  008C  01A3               	clrf	(___wmul@multiplicand+1)^(0+128)
  1722  008D  07A3               	addwf	(___wmul@multiplicand+1)^(0+128),f
  1723  008E  083B               	movf	sprintf@width^(0+128),w
  1724  008F  01A2               	clrf	___wmul@multiplicand^(0+128)
  1725  0090  07A2               	addwf	___wmul@multiplicand^(0+128),f
  1726  0091  120A  158A  274B  120A  118A  	fcall	___wmul
  1727  0096  1683               	bsf	3,5	;RP0=1, select bank1
  1728  0097  1303               	bcf	3,6	;RP1=0, select bank1
  1729  0098  0821               	movf	(?___wmul+1)^(0+128),w
  1730  0099  01BC               	clrf	(sprintf@width+1)^(0+128)
  1731  009A  07BC               	addwf	(sprintf@width+1)^(0+128),f
  1732  009B  0820               	movf	?___wmul^(0+128),w
  1733  009C  01BB               	clrf	sprintf@width^(0+128)
  1734  009D  07BB               	addwf	sprintf@width^(0+128),f
  1735                           
  1736                           ;doprnt.c: 610: width += *f++ - '0';
  1737  009E  082E               	movf	sprintf@f^(0+128),w
  1738  009F  0084               	movwf	4
  1739  00A0  120A  118A  270A  120A  118A  	fcall	stringdir
  1740  00A5  3ED0               	addlw	208
  1741  00A6  00B1               	movwf	??_sprintf^(0+128)
  1742  00A7  30FF               	movlw	255
  1743  00A8  1803               	skipnc
  1744  00A9  3000               	movlw	0
  1745  00AA  00B2               	movwf	(??_sprintf^(0+128)+1)
  1746  00AB  0831               	movf	??_sprintf^(0+128),w
  1747  00AC  07BB               	addwf	sprintf@width^(0+128),f
  1748  00AD  1803               	skipnc
  1749  00AE  0ABC               	incf	(sprintf@width+1)^(0+128),f
  1750  00AF  0832               	movf	(??_sprintf+1)^(0+128),w
  1751  00B0  07BC               	addwf	(sprintf@width+1)^(0+128),f
  1752  00B1  3001               	movlw	1
  1753  00B2  00B1               	movwf	??_sprintf^(0+128)
  1754  00B3  0831               	movf	??_sprintf^(0+128),w
  1755  00B4  07AE               	addwf	sprintf@f^(0+128),f
  1756                           
  1757                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  1758  00B5  082E               	movf	sprintf@f^(0+128),w
  1759  00B6  0084               	movwf	4
  1760  00B7  120A  118A  270A  120A  118A  	fcall	stringdir
  1761  00BC  120A  158A  267D  120A  118A  	fcall	_isdigit
  1762  00C1  1803               	btfsc	3,0
  1763  00C2  2885               	goto	l2075
  1764  00C3                     l2085:	
  1765                           ;doprnt.c: 831: }
  1766                           
  1767                           ;doprnt.c: 822: continue;
  1768                           
  1769                           ;doprnt.c: 811: default:
  1770                           
  1771                           ;doprnt.c: 707: case 'i':
  1772                           ;doprnt.c: 708: break;
  1773                           
  1774                           ;doprnt.c: 706: case 'd':
  1775                           
  1776                           ;doprnt.c: 647: goto alldone;
  1777                           
  1778                           ;doprnt.c: 646: case 0:
  1779                           
  1780                           ;doprnt.c: 617: }
  1781                           ;doprnt.c: 644: switch(c = *f++) {
  1782                           
  1783  00C3  3001               	movlw	1
  1784  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  1785  00C5  1303               	bcf	3,6	;RP1=0, select bank1
  1786  00C6  07AE               	addwf	sprintf@f^(0+128),f
  1787  00C7  30FF               	movlw	-1
  1788  00C8  072E               	addwf	sprintf@f^(0+128),w
  1789  00C9  0084               	movwf	4
  1790  00CA  120A  118A  270A  120A  118A  	fcall	stringdir
  1791  00CF  00BE               	movwf	sprintf@c^(0+128)
  1792                           
  1793                           ; Switch size 1, requested type "space"
  1794                           ; Number of cases is 3, Range of values is 0 to 105
  1795                           ; switch strategies available:
  1796                           ; Name         Instructions Cycles
  1797                           ; simple_byte           10     6 (average)
  1798                           ; jumptable            260     6 (fixed)
  1799                           ;	Chosen strategy is simple_byte
  1800  00D0  3A00               	xorlw	0	; case 0
  1801  00D1  1903               	skipnz
  1802  00D2  29E6               	goto	l2161
  1803  00D3  3A64               	xorlw	100	; case 100
  1804  00D4  1903               	skipnz
  1805  00D5  28DA               	goto	l2087
  1806  00D6  3A0D               	xorlw	13	; case 105
  1807  00D7  1903               	skipnz
  1808  00D8  28DA               	goto	l2087
  1809  00D9  283D               	goto	l2159
  1810  00DA                     l2087:	
  1811                           
  1812                           ;doprnt.c: 1262: {
  1813                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1814  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  1815  00DB  1303               	bcf	3,6	;RP1=0, select bank1
  1816  00DC  0834               	movf	sprintf@ap^(0+128),w
  1817  00DD  0084               	movwf	4
  1818  00DE  1383               	bcf	3,7	;select IRP bank0
  1819  00DF  0800               	movf	0,w
  1820  00E0  00B6               	movwf	sprintf@_val^(0+128)
  1821  00E1  0A84               	incf	4,f
  1822  00E2  0800               	movf	0,w
  1823  00E3  00B7               	movwf	(sprintf@_val+1)^(0+128)
  1824  00E4  3002               	movlw	2
  1825  00E5  00B1               	movwf	??_sprintf^(0+128)
  1826  00E6  0831               	movf	??_sprintf^(0+128),w
  1827  00E7  07B4               	addwf	sprintf@ap^(0+128),f
  1828                           
  1829                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1830  00E8  1FB7               	btfss	(sprintf@_val+1)^(0+128),7
  1831  00E9  28F3               	goto	l2097
  1832                           
  1833                           ;doprnt.c: 1271: flag |= 0x03;
  1834  00EA  3003               	movlw	3
  1835  00EB  00B1               	movwf	??_sprintf^(0+128)
  1836  00EC  0831               	movf	??_sprintf^(0+128),w
  1837  00ED  04BA               	iorwf	sprintf@flag^(0+128),f
  1838                           
  1839                           ;doprnt.c: 1272: _val._val = -_val._val;
  1840  00EE  09B6               	comf	sprintf@_val^(0+128),f
  1841  00EF  09B7               	comf	(sprintf@_val+1)^(0+128),f
  1842  00F0  0AB6               	incf	sprintf@_val^(0+128),f
  1843  00F1  1903               	skipnz
  1844  00F2  0AB7               	incf	(sprintf@_val+1)^(0+128),f
  1845  00F3                     l2097:	
  1846                           
  1847                           ;doprnt.c: 1273: }
  1848                           ;doprnt.c: 1275: }
  1849                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1850  00F3  01BE               	clrf	sprintf@c^(0+128)
  1851  00F4  0ABE               	incf	sprintf@c^(0+128),f
  1852  00F5  083E               	movf	sprintf@c^(0+128),w
  1853  00F6  3A05               	xorlw	5
  1854  00F7  1903               	btfsc	3,2
  1855  00F8  291A               	goto	l2109
  1856  00F9                     l2101:	
  1857                           
  1858                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1859  00F9  083E               	movf	sprintf@c^(0+128),w
  1860  00FA  00B1               	movwf	??_sprintf^(0+128)
  1861  00FB  0731               	addwf	??_sprintf^(0+128),w
  1862  00FC  3E01               	addlw	low (_dpowers-__stringbase)
  1863  00FD  0084               	movwf	4
  1864  00FE  120A  118A  270A  120A  118A  	fcall	stringdir
  1865  0103  00B2               	movwf	(??_sprintf+1)^(0+128)
  1866  0104  120A  118A  270A  120A  118A  	fcall	stringdir
  1867  0109  00B3               	movwf	((??_sprintf+1)^(0+128)+1)
  1868  010A  0833               	movf	(??_sprintf+2)^(0+128),w
  1869  010B  0237               	subwf	(sprintf@_val+1)^(0+128),w
  1870  010C  1D03               	skipz
  1871  010D  2910               	goto	u1845
  1872  010E  0832               	movf	(??_sprintf+1)^(0+128),w
  1873  010F  0236               	subwf	sprintf@_val^(0+128),w
  1874  0110                     u1845:	
  1875  0110  1C03               	btfss	3,0
  1876  0111  291A               	goto	l2109
  1877                           
  1878                           ;doprnt.c: 1316: break;
  1879  0112  3001               	movlw	1
  1880  0113  00B1               	movwf	??_sprintf^(0+128)
  1881  0114  0831               	movf	??_sprintf^(0+128),w
  1882  0115  07BE               	addwf	sprintf@c^(0+128),f
  1883  0116  083E               	movf	sprintf@c^(0+128),w
  1884  0117  3A05               	xorlw	5
  1885  0118  1D03               	skipz
  1886  0119  28F9               	goto	l2101
  1887  011A                     l2109:	
  1888                           
  1889                           ;doprnt.c: 1354: if(width && flag & 0x03)
  1890  011A  083C               	movf	(sprintf@width+1)^(0+128),w
  1891  011B  043B               	iorwf	sprintf@width^(0+128),w
  1892  011C  1903               	skipnz
  1893  011D  2928               	goto	l418
  1894  011E  083A               	movf	sprintf@flag^(0+128),w
  1895  011F  3903               	andlw	3
  1896  0120  1903               	btfsc	3,2
  1897  0121  2928               	goto	l418
  1898                           
  1899                           ;doprnt.c: 1355: width--;
  1900  0122  30FF               	movlw	255
  1901  0123  07BB               	addwf	sprintf@width^(0+128),f
  1902  0124  1803               	skipnc
  1903  0125  0ABC               	incf	(sprintf@width+1)^(0+128),f
  1904  0126  30FF               	movlw	255
  1905  0127  07BC               	addwf	(sprintf@width+1)^(0+128),f
  1906  0128                     l418:	
  1907                           
  1908                           ;doprnt.c: 1390: if(width > c)
  1909  0128  083E               	movf	sprintf@c^(0+128),w
  1910  0129  00B1               	movwf	??_sprintf^(0+128)
  1911  012A  01B2               	clrf	(??_sprintf^(0+128)+1)
  1912  012B  1BB1               	btfsc	??_sprintf^(0+128),7
  1913  012C  03B2               	decf	(??_sprintf^(0+128)+1),f
  1914  012D  0832               	movf	(??_sprintf+1)^(0+128),w
  1915  012E  3A80               	xorlw	128
  1916  012F  00B3               	movwf	(??_sprintf+2)^(0+128)
  1917  0130  083C               	movf	(sprintf@width+1)^(0+128),w
  1918  0131  3A80               	xorlw	128
  1919  0132  0233               	subwf	(??_sprintf+2)^(0+128),w
  1920  0133  1D03               	skipz
  1921  0134  2937               	goto	u1885
  1922  0135  083B               	movf	sprintf@width^(0+128),w
  1923  0136  0231               	subwf	??_sprintf^(0+128),w
  1924  0137                     u1885:	
  1925  0137  1803               	skipnc
  1926  0138  2947               	goto	l2117
  1927                           
  1928                           ;doprnt.c: 1391: width -= c;
  1929  0139  1683               	bsf	3,5	;RP0=1, select bank1
  1930  013A  1303               	bcf	3,6	;RP1=0, select bank1
  1931  013B  083E               	movf	sprintf@c^(0+128),w
  1932  013C  00B1               	movwf	??_sprintf^(0+128)
  1933  013D  01B2               	clrf	(??_sprintf^(0+128)+1)
  1934  013E  1BB1               	btfsc	??_sprintf^(0+128),7
  1935  013F  03B2               	decf	(??_sprintf^(0+128)+1),f
  1936  0140  0831               	movf	??_sprintf^(0+128),w
  1937  0141  02BB               	subwf	sprintf@width^(0+128),f
  1938  0142  0832               	movf	(??_sprintf+1)^(0+128),w
  1939  0143  1C03               	skipc
  1940  0144  03BC               	decf	(sprintf@width+1)^(0+128),f
  1941  0145  02BC               	subwf	(sprintf@width+1)^(0+128),f
  1942  0146  294B               	goto	l2119
  1943  0147                     l2117:	
  1944                           
  1945                           ;doprnt.c: 1392: else
  1946                           ;doprnt.c: 1393: width = 0;
  1947  0147  1683               	bsf	3,5	;RP0=1, select bank1
  1948  0148  1303               	bcf	3,6	;RP1=0, select bank1
  1949  0149  01BB               	clrf	sprintf@width^(0+128)
  1950  014A  01BC               	clrf	(sprintf@width+1)^(0+128)
  1951  014B                     l2119:	
  1952                           
  1953                           ;doprnt.c: 1396: if(flag & 0x04) {
  1954  014B  1D3A               	btfss	sprintf@flag^(0+128),2
  1955  014C  2972               	goto	l2135
  1956                           
  1957                           ;doprnt.c: 1401: if(flag & 0x03)
  1958  014D  083A               	movf	sprintf@flag^(0+128),w
  1959  014E  3903               	andlw	3
  1960  014F  1903               	btfsc	3,2
  1961  0150  295C               	goto	l2127
  1962                           
  1963                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  1964  0151  302D               	movlw	45
  1965  0152  00B1               	movwf	??_sprintf^(0+128)
  1966  0153  083D               	movf	sprintf@sp^(0+128),w
  1967  0154  0084               	movwf	4
  1968  0155  0831               	movf	??_sprintf^(0+128),w
  1969  0156  1383               	bcf	3,7	;select IRP bank0
  1970  0157  0080               	movwf	0
  1971  0158  3001               	movlw	1
  1972  0159  00B1               	movwf	??_sprintf^(0+128)
  1973  015A  0831               	movf	??_sprintf^(0+128),w
  1974  015B  07BD               	addwf	sprintf@sp^(0+128),f
  1975  015C                     l2127:	
  1976                           
  1977                           ;doprnt.c: 1424: if(width)
  1978  015C  083C               	movf	(sprintf@width+1)^(0+128),w
  1979  015D  043B               	iorwf	sprintf@width^(0+128),w
  1980  015E  1903               	skipnz
  1981  015F  299A               	goto	l2149
  1982                           
  1983                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  1984                           
  1985                           ;doprnt.c: 1425: do
  1986  0160  3030               	movlw	48
  1987  0161  00B1               	movwf	??_sprintf^(0+128)
  1988  0162  083D               	movf	sprintf@sp^(0+128),w
  1989  0163  0084               	movwf	4
  1990  0164  0831               	movf	??_sprintf^(0+128),w
  1991  0165  1383               	bcf	3,7	;select IRP bank0
  1992  0166  0080               	movwf	0
  1993  0167  3001               	movlw	1
  1994  0168  00B1               	movwf	??_sprintf^(0+128)
  1995  0169  0831               	movf	??_sprintf^(0+128),w
  1996  016A  07BD               	addwf	sprintf@sp^(0+128),f
  1997                           
  1998                           ;doprnt.c: 1427: while(--width);
  1999  016B  30FF               	movlw	255
  2000  016C  07BB               	addwf	sprintf@width^(0+128),f
  2001  016D  1803               	skipnc
  2002  016E  0ABC               	incf	(sprintf@width+1)^(0+128),f
  2003  016F  30FF               	movlw	255
  2004  0170  07BC               	addwf	(sprintf@width+1)^(0+128),f
  2005  0171  295C               	goto	l2127
  2006  0172                     l2135:	
  2007                           ;doprnt.c: 1429: } else
  2008                           
  2009                           
  2010                           ;doprnt.c: 1431: {
  2011                           ;doprnt.c: 1433: if(width
  2012                           ;doprnt.c: 1437: )
  2013  0172  083C               	movf	(sprintf@width+1)^(0+128),w
  2014  0173  043B               	iorwf	sprintf@width^(0+128),w
  2015  0174  1903               	skipnz
  2016  0175  298B               	goto	l2143
  2017  0176                     l2137:	
  2018                           ;doprnt.c: 1438: do
  2019                           
  2020                           
  2021                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2022  0176  3020               	movlw	32
  2023  0177  00B1               	movwf	??_sprintf^(0+128)
  2024  0178  083D               	movf	sprintf@sp^(0+128),w
  2025  0179  0084               	movwf	4
  2026  017A  0831               	movf	??_sprintf^(0+128),w
  2027  017B  1383               	bcf	3,7	;select IRP bank0
  2028  017C  0080               	movwf	0
  2029  017D  3001               	movlw	1
  2030  017E  00B1               	movwf	??_sprintf^(0+128)
  2031  017F  0831               	movf	??_sprintf^(0+128),w
  2032  0180  07BD               	addwf	sprintf@sp^(0+128),f
  2033                           
  2034                           ;doprnt.c: 1440: while(--width);
  2035  0181  30FF               	movlw	255
  2036  0182  07BB               	addwf	sprintf@width^(0+128),f
  2037  0183  1803               	skipnc
  2038  0184  0ABC               	incf	(sprintf@width+1)^(0+128),f
  2039  0185  30FF               	movlw	255
  2040  0186  07BC               	addwf	(sprintf@width+1)^(0+128),f
  2041  0187  083C               	movf	(sprintf@width+1)^(0+128),w
  2042  0188  043B               	iorwf	sprintf@width^(0+128),w
  2043  0189  1D03               	skipz
  2044  018A  2976               	goto	l2137
  2045  018B                     l2143:	
  2046                           
  2047                           ;doprnt.c: 1447: if(flag & 0x03)
  2048  018B  083A               	movf	sprintf@flag^(0+128),w
  2049  018C  3903               	andlw	3
  2050  018D  1903               	btfsc	3,2
  2051  018E  299A               	goto	l2149
  2052                           
  2053                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2054  018F  302D               	movlw	45
  2055  0190  00B1               	movwf	??_sprintf^(0+128)
  2056  0191  083D               	movf	sprintf@sp^(0+128),w
  2057  0192  0084               	movwf	4
  2058  0193  0831               	movf	??_sprintf^(0+128),w
  2059  0194  1383               	bcf	3,7	;select IRP bank0
  2060  0195  0080               	movwf	0
  2061  0196  3001               	movlw	1
  2062  0197  00B1               	movwf	??_sprintf^(0+128)
  2063  0198  0831               	movf	??_sprintf^(0+128),w
  2064  0199  07BD               	addwf	sprintf@sp^(0+128),f
  2065  019A                     l2149:	
  2066                           
  2067                           ;doprnt.c: 1478: }
  2068                           ;doprnt.c: 1481: prec = c;
  2069  019A  083E               	movf	sprintf@c^(0+128),w
  2070  019B  00B1               	movwf	??_sprintf^(0+128)
  2071  019C  0831               	movf	??_sprintf^(0+128),w
  2072  019D  00B5               	movwf	sprintf@prec^(0+128)
  2073  019E                     l2157:	
  2074                           ;doprnt.c: 1483: while(prec--) {
  2075                           
  2076  019E  30FF               	movlw	-1
  2077  019F  00B1               	movwf	??_sprintf^(0+128)
  2078  01A0  0831               	movf	??_sprintf^(0+128),w
  2079  01A1  07B5               	addwf	sprintf@prec^(0+128),f
  2080  01A2  0835               	movf	sprintf@prec^(0+128),w
  2081  01A3  3AFF               	xorlw	-1
  2082  01A4  1903               	btfsc	3,2
  2083  01A5  283D               	goto	l2159
  2084                           
  2085                           ;doprnt.c: 1487: {
  2086                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2087  01A6  300A               	movlw	10
  2088  01A7  00A8               	movwf	___lwmod@divisor^(0+128)
  2089  01A8  3000               	movlw	0
  2090  01A9  00A9               	movwf	(___lwmod@divisor^(0+128)+1)
  2091  01AA  0835               	movf	sprintf@prec^(0+128),w
  2092  01AB  00B1               	movwf	??_sprintf^(0+128)
  2093  01AC  0731               	addwf	??_sprintf^(0+128),w
  2094  01AD  3E01               	addlw	low (_dpowers-__stringbase)
  2095  01AE  0084               	movwf	4
  2096  01AF  120A  118A  270A  120A  118A  	fcall	stringdir
  2097  01B4  00A0               	movwf	___lwdiv@divisor^(0+128)
  2098  01B5  120A  118A  270A  120A  118A  	fcall	stringdir
  2099  01BA  00A1               	movwf	(___lwdiv@divisor+1)^(0+128)
  2100  01BB  0837               	movf	(sprintf@_val+1)^(0+128),w
  2101  01BC  01A3               	clrf	(___lwdiv@dividend+1)^(0+128)
  2102  01BD  07A3               	addwf	(___lwdiv@dividend+1)^(0+128),f
  2103  01BE  0836               	movf	sprintf@_val^(0+128),w
  2104  01BF  01A2               	clrf	___lwdiv@dividend^(0+128)
  2105  01C0  07A2               	addwf	___lwdiv@dividend^(0+128),f
  2106  01C1  120A  118A  27A7  120A  118A  	fcall	___lwdiv
  2107  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  2108  01C7  1303               	bcf	3,6	;RP1=0, select bank1
  2109  01C8  0821               	movf	(?___lwdiv+1)^(0+128),w
  2110  01C9  01AB               	clrf	(___lwmod@dividend+1)^(0+128)
  2111  01CA  07AB               	addwf	(___lwmod@dividend+1)^(0+128),f
  2112  01CB  0820               	movf	?___lwdiv^(0+128),w
  2113  01CC  01AA               	clrf	___lwmod@dividend^(0+128)
  2114  01CD  07AA               	addwf	___lwmod@dividend^(0+128),f
  2115  01CE  120A  158A  27CA  120A  118A  	fcall	___lwmod
  2116  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2117  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  2118  01D5  0828               	movf	?___lwmod^(0+128),w
  2119  01D6  3E30               	addlw	48
  2120  01D7  00B2               	movwf	(??_sprintf+1)^(0+128)
  2121  01D8  0832               	movf	(??_sprintf+1)^(0+128),w
  2122  01D9  00BE               	movwf	sprintf@c^(0+128)
  2123                           
  2124                           ;doprnt.c: 1532: }
  2125                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2126  01DA  083E               	movf	sprintf@c^(0+128),w
  2127  01DB  00B1               	movwf	??_sprintf^(0+128)
  2128  01DC  083D               	movf	sprintf@sp^(0+128),w
  2129  01DD  0084               	movwf	4
  2130  01DE  0831               	movf	??_sprintf^(0+128),w
  2131  01DF  1383               	bcf	3,7	;select IRP bank0
  2132  01E0  0080               	movwf	0
  2133  01E1  3001               	movlw	1
  2134  01E2  00B1               	movwf	??_sprintf^(0+128)
  2135  01E3  0831               	movf	??_sprintf^(0+128),w
  2136  01E4  07BD               	addwf	sprintf@sp^(0+128),f
  2137  01E5  299E               	goto	l2157
  2138  01E6                     l2161:	
  2139                           ;doprnt.c: 1534: }
  2140                           ;doprnt.c: 1542: }
  2141                           ;doprnt.c: 1544: alldone:
  2142                           
  2143                           
  2144                           ;doprnt.c: 1547: *sp = 0;
  2145  01E6  1683               	bsf	3,5	;RP0=1, select bank1
  2146  01E7  1303               	bcf	3,6	;RP1=0, select bank1
  2147  01E8  083D               	movf	sprintf@sp^(0+128),w
  2148  01E9  0084               	movwf	4
  2149  01EA  1383               	bcf	3,7	;select IRP bank0
  2150  01EB  0180               	clrf	0
  2151  01EC  0008               	return
  2152  01ED                     __end_of_sprintf:	
  2153                           ;doprnt.c: 1549: return 0;
  2154                           ;	Return value of _sprintf is never used
  2155                           
  2156                           
  2157                           	psect	text2
  2158  0E7D                     __ptext2:	
  2159 ;; *************** function _isdigit *****************
  2160 ;; Defined at:
  2161 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  c               1    wreg     unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  c               1    1[BANK1 ] unsigned char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;		None               void
  2168 ;; Registers used:
  2169 ;;		wreg, status,2, status,0
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2175 ;;      Params:         0       0       0       0       0
  2176 ;;      Locals:         0       0       2       0       0
  2177 ;;      Temps:          0       0       0       0       0
  2178 ;;      Totals:         0       0       2       0       0
  2179 ;;Total ram usage:        2 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    3
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_sprintf
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           
  2190                           ;psect for function _isdigit
  2191  0E7D                     _isdigit:	
  2192                           
  2193                           ;incstack = 0
  2194                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2195                           ;isdigit@c stored from wreg
  2196  0E7D  1683               	bsf	3,5	;RP0=1, select bank1
  2197  0E7E  1303               	bcf	3,6	;RP1=0, select bank1
  2198  0E7F  00A1               	movwf	isdigit@c^(0+128)
  2199  0E80  01A0               	clrf	_isdigit$1395^(0+128)
  2200  0E81  303A               	movlw	58
  2201  0E82  0221               	subwf	isdigit@c^(0+128),w
  2202  0E83  1803               	skipnc
  2203  0E84  2E8B               	goto	l1793
  2204  0E85  3030               	movlw	48
  2205  0E86  0221               	subwf	isdigit@c^(0+128),w
  2206  0E87  1C03               	skipc
  2207  0E88  2E8B               	goto	l1793
  2208  0E89  01A0               	clrf	_isdigit$1395^(0+128)
  2209  0E8A  0AA0               	incf	_isdigit$1395^(0+128),f
  2210  0E8B                     l1793:	
  2211  0E8B  0C20               	rrf	_isdigit$1395^(0+128),w
  2212  0E8C  0008               	return
  2213  0E8D                     __end_of_isdigit:	
  2214                           
  2215                           	psect	text3
  2216  0F4B                     __ptext3:	
  2217 ;; *************** function ___wmul *****************
  2218 ;; Defined at:
  2219 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  multiplier      2    0[BANK1 ] unsigned int 
  2222 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  product         2    4[BANK1 ] unsigned int 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  2    0[BANK1 ] unsigned int 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       0       4       0       0
  2235 ;;      Locals:         0       0       2       0       0
  2236 ;;      Temps:          0       0       0       0       0
  2237 ;;      Totals:         0       0       6       0       0
  2238 ;;Total ram usage:        6 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    3
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_sprintf
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           
  2249                           ;psect for function ___wmul
  2250  0F4B                     ___wmul:	
  2251                           
  2252                           ;incstack = 0
  2253                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2254  0F4B  1683               	bsf	3,5	;RP0=1, select bank1
  2255  0F4C  1303               	bcf	3,6	;RP1=0, select bank1
  2256  0F4D  01A4               	clrf	___wmul@product^(0+128)
  2257  0F4E  01A5               	clrf	(___wmul@product+1)^(0+128)
  2258  0F4F                     l1799:	
  2259  0F4F  1C20               	btfss	___wmul@multiplier^(0+128),0
  2260  0F50  2F57               	goto	l519
  2261  0F51  0822               	movf	___wmul@multiplicand^(0+128),w
  2262  0F52  07A4               	addwf	___wmul@product^(0+128),f
  2263  0F53  1803               	skipnc
  2264  0F54  0AA5               	incf	(___wmul@product+1)^(0+128),f
  2265  0F55  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  2266  0F56  07A5               	addwf	(___wmul@product+1)^(0+128),f
  2267  0F57                     l519:	
  2268  0F57  3001               	movlw	1
  2269  0F58                     u1375:	
  2270  0F58  1003               	clrc
  2271  0F59  0DA2               	rlf	___wmul@multiplicand^(0+128),f
  2272  0F5A  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  2273  0F5B  3EFF               	addlw	-1
  2274  0F5C  1D03               	skipz
  2275  0F5D  2F58               	goto	u1375
  2276  0F5E  3001               	movlw	1
  2277  0F5F                     u1385:	
  2278  0F5F  1003               	clrc
  2279  0F60  0CA1               	rrf	(___wmul@multiplier+1)^(0+128),f
  2280  0F61  0CA0               	rrf	___wmul@multiplier^(0+128),f
  2281  0F62  3EFF               	addlw	-1
  2282  0F63  1D03               	skipz
  2283  0F64  2F5F               	goto	u1385
  2284  0F65  0821               	movf	(___wmul@multiplier+1)^(0+128),w
  2285  0F66  0420               	iorwf	___wmul@multiplier^(0+128),w
  2286  0F67  1D03               	skipz
  2287  0F68  2F4F               	goto	l1799
  2288  0F69  0825               	movf	(___wmul@product+1)^(0+128),w
  2289  0F6A  01A1               	clrf	(?___wmul+1)^(0+128)
  2290  0F6B  07A1               	addwf	(?___wmul+1)^(0+128),f
  2291  0F6C  0824               	movf	___wmul@product^(0+128),w
  2292  0F6D  01A0               	clrf	?___wmul^(0+128)
  2293  0F6E  07A0               	addwf	?___wmul^(0+128),f
  2294  0F6F  0008               	return
  2295  0F70                     __end_of___wmul:	
  2296                           
  2297                           	psect	text4
  2298  0FCA                     __ptext4:	
  2299 ;; *************** function ___lwmod *****************
  2300 ;; Defined at:
  2301 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  divisor         2    8[BANK1 ] unsigned int 
  2304 ;;  dividend        2   10[BANK1 ] unsigned int 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  counter         1   13[BANK1 ] unsigned char 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  2    8[BANK1 ] unsigned int 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2, status,0
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2316 ;;      Params:         0       0       4       0       0
  2317 ;;      Locals:         0       0       1       0       0
  2318 ;;      Temps:          0       0       1       0       0
  2319 ;;      Totals:         0       0       6       0       0
  2320 ;;Total ram usage:        6 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    3
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_sprintf
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           
  2331                           ;psect for function ___lwmod
  2332  0FCA                     ___lwmod:	
  2333                           
  2334                           ;incstack = 0
  2335                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2336  0FCA  1683               	bsf	3,5	;RP0=1, select bank1
  2337  0FCB  1303               	bcf	3,6	;RP1=0, select bank1
  2338  0FCC  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  2339  0FCD  0428               	iorwf	___lwmod@divisor^(0+128),w
  2340  0FCE  1903               	skipnz
  2341  0FCF  2FF9               	goto	l1923
  2342  0FD0  01AD               	clrf	___lwmod@counter^(0+128)
  2343  0FD1  0AAD               	incf	___lwmod@counter^(0+128),f
  2344  0FD2                     l1913:	
  2345  0FD2  1BA9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  2346  0FD3  2FE0               	goto	l1915
  2347  0FD4  3001               	movlw	1
  2348  0FD5                     u1695:	
  2349  0FD5  1003               	clrc
  2350  0FD6  0DA8               	rlf	___lwmod@divisor^(0+128),f
  2351  0FD7  0DA9               	rlf	(___lwmod@divisor+1)^(0+128),f
  2352  0FD8  3EFF               	addlw	-1
  2353  0FD9  1D03               	skipz
  2354  0FDA  2FD5               	goto	u1695
  2355  0FDB  3001               	movlw	1
  2356  0FDC  00AC               	movwf	??___lwmod^(0+128)
  2357  0FDD  082C               	movf	??___lwmod^(0+128),w
  2358  0FDE  07AD               	addwf	___lwmod@counter^(0+128),f
  2359  0FDF  2FD2               	goto	l1913
  2360  0FE0                     l1915:	
  2361  0FE0  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  2362  0FE1  022B               	subwf	(___lwmod@dividend+1)^(0+128),w
  2363  0FE2  1D03               	skipz
  2364  0FE3  2FE6               	goto	u1715
  2365  0FE4  0828               	movf	___lwmod@divisor^(0+128),w
  2366  0FE5  022A               	subwf	___lwmod@dividend^(0+128),w
  2367  0FE6                     u1715:	
  2368  0FE6  1C03               	skipc
  2369  0FE7  2FEE               	goto	l1919
  2370  0FE8  0828               	movf	___lwmod@divisor^(0+128),w
  2371  0FE9  02AA               	subwf	___lwmod@dividend^(0+128),f
  2372  0FEA  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  2373  0FEB  1C03               	skipc
  2374  0FEC  03AB               	decf	(___lwmod@dividend+1)^(0+128),f
  2375  0FED  02AB               	subwf	(___lwmod@dividend+1)^(0+128),f
  2376  0FEE                     l1919:	
  2377  0FEE  3001               	movlw	1
  2378  0FEF                     u1725:	
  2379  0FEF  1003               	clrc
  2380  0FF0  0CA9               	rrf	(___lwmod@divisor+1)^(0+128),f
  2381  0FF1  0CA8               	rrf	___lwmod@divisor^(0+128),f
  2382  0FF2  3EFF               	addlw	-1
  2383  0FF3  1D03               	skipz
  2384  0FF4  2FEF               	goto	u1725
  2385  0FF5  3001               	movlw	1
  2386  0FF6  02AD               	subwf	___lwmod@counter^(0+128),f
  2387  0FF7  1D03               	btfss	3,2
  2388  0FF8  2FE0               	goto	l1915
  2389  0FF9                     l1923:	
  2390  0FF9  082B               	movf	(___lwmod@dividend+1)^(0+128),w
  2391  0FFA  01A9               	clrf	(?___lwmod+1)^(0+128)
  2392  0FFB  07A9               	addwf	(?___lwmod+1)^(0+128),f
  2393  0FFC  082A               	movf	___lwmod@dividend^(0+128),w
  2394  0FFD  01A8               	clrf	?___lwmod^(0+128)
  2395  0FFE  07A8               	addwf	?___lwmod^(0+128),f
  2396  0FFF  0008               	return
  2397  1000                     __end_of___lwmod:	
  2398                           
  2399                           	psect	text5
  2400  07A7                     __ptext5:	
  2401 ;; *************** function ___lwdiv *****************
  2402 ;; Defined at:
  2403 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  divisor         2    0[BANK1 ] unsigned int 
  2406 ;;  dividend        2    2[BANK1 ] unsigned int 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  quotient        2    5[BANK1 ] unsigned int 
  2409 ;;  counter         1    7[BANK1 ] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  2    0[BANK1 ] unsigned int 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2419 ;;      Params:         0       0       4       0       0
  2420 ;;      Locals:         0       0       3       0       0
  2421 ;;      Temps:          0       0       1       0       0
  2422 ;;      Totals:         0       0       8       0       0
  2423 ;;Total ram usage:        8 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    3
  2426 ;; This function calls:
  2427 ;;		Nothing
  2428 ;; This function is called by:
  2429 ;;		_sprintf
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           
  2434                           ;psect for function ___lwdiv
  2435  07A7                     ___lwdiv:	
  2436                           
  2437                           ;incstack = 0
  2438                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2439  07A7  1683               	bsf	3,5	;RP0=1, select bank1
  2440  07A8  1303               	bcf	3,6	;RP1=0, select bank1
  2441  07A9  01A5               	clrf	___lwdiv@quotient^(0+128)
  2442  07AA  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  2443  07AB  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2444  07AC  0420               	iorwf	___lwdiv@divisor^(0+128),w
  2445  07AD  1903               	skipnz
  2446  07AE  2FE0               	goto	l1901
  2447  07AF  01A7               	clrf	___lwdiv@counter^(0+128)
  2448  07B0  0AA7               	incf	___lwdiv@counter^(0+128),f
  2449  07B1                     l1889:	
  2450  07B1  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  2451  07B2  2FBF               	goto	l1891
  2452  07B3  3001               	movlw	1
  2453  07B4                     u1625:	
  2454  07B4  1003               	clrc
  2455  07B5  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  2456  07B6  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  2457  07B7  3EFF               	addlw	-1
  2458  07B8  1D03               	skipz
  2459  07B9  2FB4               	goto	u1625
  2460  07BA  3001               	movlw	1
  2461  07BB  00A4               	movwf	??___lwdiv^(0+128)
  2462  07BC  0824               	movf	??___lwdiv^(0+128),w
  2463  07BD  07A7               	addwf	___lwdiv@counter^(0+128),f
  2464  07BE  2FB1               	goto	l1889
  2465  07BF                     l1891:	
  2466  07BF  3001               	movlw	1
  2467  07C0                     u1645:	
  2468  07C0  1003               	clrc
  2469  07C1  0DA5               	rlf	___lwdiv@quotient^(0+128),f
  2470  07C2  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  2471  07C3  3EFF               	addlw	-1
  2472  07C4  1D03               	skipz
  2473  07C5  2FC0               	goto	u1645
  2474  07C6  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2475  07C7  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  2476  07C8  1D03               	skipz
  2477  07C9  2FCC               	goto	u1655
  2478  07CA  0820               	movf	___lwdiv@divisor^(0+128),w
  2479  07CB  0222               	subwf	___lwdiv@dividend^(0+128),w
  2480  07CC                     u1655:	
  2481  07CC  1C03               	skipc
  2482  07CD  2FD5               	goto	l1897
  2483  07CE  0820               	movf	___lwdiv@divisor^(0+128),w
  2484  07CF  02A2               	subwf	___lwdiv@dividend^(0+128),f
  2485  07D0  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2486  07D1  1C03               	skipc
  2487  07D2  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  2488  07D3  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  2489  07D4  1425               	bsf	___lwdiv@quotient^(0+128),0
  2490  07D5                     l1897:	
  2491  07D5  3001               	movlw	1
  2492  07D6                     u1665:	
  2493  07D6  1003               	clrc
  2494  07D7  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  2495  07D8  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  2496  07D9  3EFF               	addlw	-1
  2497  07DA  1D03               	skipz
  2498  07DB  2FD6               	goto	u1665
  2499  07DC  3001               	movlw	1
  2500  07DD  02A7               	subwf	___lwdiv@counter^(0+128),f
  2501  07DE  1D03               	btfss	3,2
  2502  07DF  2FBF               	goto	l1891
  2503  07E0                     l1901:	
  2504  07E0  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  2505  07E1  01A1               	clrf	(?___lwdiv+1)^(0+128)
  2506  07E2  07A1               	addwf	(?___lwdiv+1)^(0+128),f
  2507  07E3  0825               	movf	___lwdiv@quotient^(0+128),w
  2508  07E4  01A0               	clrf	?___lwdiv^(0+128)
  2509  07E5  07A0               	addwf	?___lwdiv^(0+128),f
  2510  07E6  0008               	return
  2511  07E7                     __end_of___lwdiv:	
  2512                           
  2513                           	psect	text6
  2514  075E                     __ptext6:	
  2515 ;; *************** function _USART_Init *****************
  2516 ;; Defined at:
  2517 ;;		line 6 in file "C:\Users\332414\Desktop\FuzzySI\firmware\usart.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  BaudRate        4   15[BANK1 ] long 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;		None
  2522 ;; Return value:  Size  Location     Type
  2523 ;;		None               void
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, pclath, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2531 ;;      Params:         0       0       4       0       0
  2532 ;;      Locals:         0       0       0       0       0
  2533 ;;      Temps:          0       0       4       0       0
  2534 ;;      Totals:         0       0       8       0       0
  2535 ;;Total ram usage:        8 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    4
  2538 ;; This function calls:
  2539 ;;		___aldiv
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           
  2546                           ;psect for function _USART_Init
  2547  075E                     _USART_Init:	
  2548                           
  2549                           ;usart.c: 13: SPBRG = (unsigned char)(18432000 / (16 * BaudRate)) - 1;
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  2553  075E  1683               	bsf	3,5	;RP0=1, select bank1
  2554  075F  1303               	bcf	3,6	;RP1=0, select bank1
  2555  0760  082F               	movf	USART_Init@BaudRate^(0+128),w
  2556  0761  00B3               	movwf	??_USART_Init^(0+128)
  2557  0762  0830               	movf	(USART_Init@BaudRate+1)^(0+128),w
  2558  0763  00B4               	movwf	(??_USART_Init^(0+128)+1)
  2559  0764  0831               	movf	(USART_Init@BaudRate+2)^(0+128),w
  2560  0765  00B5               	movwf	(??_USART_Init^(0+128)+2)
  2561  0766  0832               	movf	(USART_Init@BaudRate+3)^(0+128),w
  2562  0767  00B6               	movwf	(??_USART_Init^(0+128)+3)
  2563  0768  3004               	movlw	4
  2564  0769                     u1755:	
  2565  0769  1003               	clrc
  2566  076A  0DB3               	rlf	??_USART_Init^(0+128),f
  2567  076B  0DB4               	rlf	(??_USART_Init^(0+128)+1),f
  2568  076C  0DB5               	rlf	(??_USART_Init^(0+128)+2),f
  2569  076D  0DB6               	rlf	(??_USART_Init^(0+128)+3),f
  2570  076E  3EFF               	addlw	-1
  2571  076F  1D03               	skipz
  2572  0770  2F69               	goto	u1755
  2573  0771  0836               	movf	(??_USART_Init+3)^(0+128),w
  2574  0772  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  2575  0773  0835               	movf	(??_USART_Init+2)^(0+128),w
  2576  0774  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  2577  0775  0834               	movf	(??_USART_Init+1)^(0+128),w
  2578  0776  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  2579  0777  0833               	movf	??_USART_Init^(0+128),w
  2580  0778  00A0               	movwf	___aldiv@divisor^(0+128)
  2581  0779  3001               	movlw	1
  2582  077A  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  2583  077B  3019               	movlw	25
  2584  077C  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  2585  077D  3040               	movlw	64
  2586  077E  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  2587  077F  3000               	movlw	0
  2588  0780  00A4               	movwf	___aldiv@dividend^(0+128)
  2589  0781  120A  118A  24F0   	fcall	___aldiv
  2590  0784  1683               	bsf	3,5	;RP0=1, select bank1
  2591  0785  1303               	bcf	3,6	;RP1=0, select bank1
  2592  0786  0820               	movf	?___aldiv^(0+128),w
  2593  0787  3EFF               	addlw	255
  2594  0788  0099               	movwf	25	;volatile
  2595                           
  2596                           ;usart.c: 16: TXSTAbits.CSRC = 0;
  2597  0789  1398               	bcf	24,7	;volatile
  2598                           
  2599                           ;usart.c: 17: TXSTAbits.TX9 = 0;
  2600  078A  1318               	bcf	24,6	;volatile
  2601                           
  2602                           ;usart.c: 18: TXSTAbits.TXEN = 1;
  2603  078B  1698               	bsf	24,5	;volatile
  2604                           
  2605                           ;usart.c: 19: TXSTAbits.SYNC = 0;
  2606  078C  1218               	bcf	24,4	;volatile
  2607                           
  2608                           ;usart.c: 21: TXSTAbits.BRGH = 1;
  2609  078D  1518               	bsf	24,2	;volatile
  2610                           
  2611                           ;usart.c: 22: TXSTAbits.TRMT = 1;
  2612  078E  1498               	bsf	24,1	;volatile
  2613                           
  2614                           ;usart.c: 23: TXSTAbits.TX9D = 0;
  2615  078F  1018               	bcf	24,0	;volatile
  2616                           
  2617                           ;usart.c: 26: RCSTAbits.SPEN = 1;
  2618  0790  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0791  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0792  1798               	bsf	24,7	;volatile
  2621                           
  2622                           ;usart.c: 27: RCSTAbits.RX9 = 0;
  2623  0793  1318               	bcf	24,6	;volatile
  2624                           
  2625                           ;usart.c: 28: RCSTAbits.SREN = 0;
  2626  0794  1298               	bcf	24,5	;volatile
  2627                           
  2628                           ;usart.c: 29: RCSTAbits.CREN = 1;
  2629  0795  1618               	bsf	24,4	;volatile
  2630                           
  2631                           ;usart.c: 30: RCSTAbits.ADDEN = 0;
  2632  0796  1198               	bcf	24,3	;volatile
  2633                           
  2634                           ;usart.c: 31: RCSTAbits.FERR = 0;
  2635  0797  1118               	bcf	24,2	;volatile
  2636                           
  2637                           ;usart.c: 32: RCSTAbits.OERR = 0;
  2638  0798  1098               	bcf	24,1	;volatile
  2639                           
  2640                           ;usart.c: 33: RCSTAbits.RX9D = 0;
  2641  0799  1018               	bcf	24,0	;volatile
  2642                           
  2643                           ;usart.c: 36: PIE1bits.TXIE = 0;
  2644  079A  1683               	bsf	3,5	;RP0=1, select bank1
  2645  079B  1303               	bcf	3,6	;RP1=0, select bank1
  2646  079C  120C               	bcf	12,4	;volatile
  2647                           
  2648                           ;usart.c: 37: PIR1bits.TXIF = 0;
  2649  079D  1283               	bcf	3,5	;RP0=0, select bank0
  2650  079E  1303               	bcf	3,6	;RP1=0, select bank0
  2651  079F  120C               	bcf	12,4	;volatile
  2652                           
  2653                           ;usart.c: 38: PIE1bits.RCIE = 1;
  2654  07A0  1683               	bsf	3,5	;RP0=1, select bank1
  2655  07A1  1303               	bcf	3,6	;RP1=0, select bank1
  2656  07A2  168C               	bsf	12,5	;volatile
  2657                           
  2658                           ;usart.c: 39: PIR1bits.RCIF = 0;
  2659  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  2660  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  2661  07A5  128C               	bcf	12,5	;volatile
  2662  07A6  0008               	return
  2663  07A7                     __end_of_USART_Init:	
  2664                           
  2665                           	psect	text7
  2666  04F0                     __ptext7:	
  2667 ;; *************** function ___aldiv *****************
  2668 ;; Defined at:
  2669 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  divisor         4    0[BANK1 ] long 
  2672 ;;  dividend        4    4[BANK1 ] long 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  quotient        4   11[BANK1 ] long 
  2675 ;;  sign            1   10[BANK1 ] unsigned char 
  2676 ;;  counter         1    9[BANK1 ] unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  4    0[BANK1 ] long 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2686 ;;      Params:         0       0       8       0       0
  2687 ;;      Locals:         0       0       6       0       0
  2688 ;;      Temps:          0       0       1       0       0
  2689 ;;      Totals:         0       0      15       0       0
  2690 ;;Total ram usage:       15 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    3
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_USART_Init
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function ___aldiv
  2702  04F0                     ___aldiv:	
  2703                           
  2704                           ;incstack = 0
  2705                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2706  04F0  1683               	bsf	3,5	;RP0=1, select bank1
  2707  04F1  1303               	bcf	3,6	;RP1=0, select bank1
  2708  04F2  01AA               	clrf	___aldiv@sign^(0+128)
  2709  04F3  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  2710  04F4  2D02               	goto	l574
  2711  04F5  09A0               	comf	___aldiv@divisor^(0+128),f
  2712  04F6  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  2713  04F7  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  2714  04F8  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  2715  04F9  0AA0               	incf	___aldiv@divisor^(0+128),f
  2716  04FA  1903               	skipnz
  2717  04FB  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  2718  04FC  1903               	skipnz
  2719  04FD  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  2720  04FE  1903               	skipnz
  2721  04FF  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  2722  0500  01AA               	clrf	___aldiv@sign^(0+128)
  2723  0501  0AAA               	incf	___aldiv@sign^(0+128),f
  2724  0502                     l574:	
  2725  0502  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  2726  0503  2D13               	goto	l1849
  2727  0504  09A4               	comf	___aldiv@dividend^(0+128),f
  2728  0505  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  2729  0506  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  2730  0507  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  2731  0508  0AA4               	incf	___aldiv@dividend^(0+128),f
  2732  0509  1903               	skipnz
  2733  050A  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  2734  050B  1903               	skipnz
  2735  050C  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  2736  050D  1903               	skipnz
  2737  050E  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  2738  050F  3001               	movlw	1
  2739  0510  00A8               	movwf	??___aldiv^(0+128)
  2740  0511  0828               	movf	??___aldiv^(0+128),w
  2741  0512  06AA               	xorwf	___aldiv@sign^(0+128),f
  2742  0513                     l1849:	
  2743  0513  3000               	movlw	0
  2744  0514  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  2745  0515  3000               	movlw	0
  2746  0516  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  2747  0517  3000               	movlw	0
  2748  0518  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  2749  0519  3000               	movlw	0
  2750  051A  00AB               	movwf	___aldiv@quotient^(0+128)
  2751  051B  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2752  051C  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  2753  051D  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  2754  051E  0420               	iorwf	___aldiv@divisor^(0+128),w
  2755  051F  1903               	skipnz
  2756  0520  2D68               	goto	l1871
  2757  0521  01A9               	clrf	___aldiv@counter^(0+128)
  2758  0522  0AA9               	incf	___aldiv@counter^(0+128),f
  2759  0523                     l1857:	
  2760  0523  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  2761  0524  2D33               	goto	l1859
  2762  0525  3001               	movlw	1
  2763  0526  00A8               	movwf	??___aldiv^(0+128)
  2764  0527                     u1545:	
  2765  0527  1003               	clrc
  2766  0528  0DA0               	rlf	___aldiv@divisor^(0+128),f
  2767  0529  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  2768  052A  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  2769  052B  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  2770  052C  0BA8               	decfsz	??___aldiv^(0+128),f
  2771  052D  2D27               	goto	u1545
  2772  052E  3001               	movlw	1
  2773  052F  00A8               	movwf	??___aldiv^(0+128)
  2774  0530  0828               	movf	??___aldiv^(0+128),w
  2775  0531  07A9               	addwf	___aldiv@counter^(0+128),f
  2776  0532  2D23               	goto	l1857
  2777  0533                     l1859:	
  2778  0533  3001               	movlw	1
  2779  0534  00A8               	movwf	??___aldiv^(0+128)
  2780  0535                     u1565:	
  2781  0535  1003               	clrc
  2782  0536  0DAB               	rlf	___aldiv@quotient^(0+128),f
  2783  0537  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  2784  0538  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  2785  0539  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  2786  053A  0BA8               	decfsz	??___aldiv^(0+128),f
  2787  053B  2D35               	goto	u1565
  2788  053C  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2789  053D  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  2790  053E  1D03               	skipz
  2791  053F  2D4A               	goto	u1575
  2792  0540  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2793  0541  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  2794  0542  1D03               	skipz
  2795  0543  2D4A               	goto	u1575
  2796  0544  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2797  0545  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  2798  0546  1D03               	skipz
  2799  0547  2D4A               	goto	u1575
  2800  0548  0820               	movf	___aldiv@divisor^(0+128),w
  2801  0549  0224               	subwf	___aldiv@dividend^(0+128),w
  2802  054A                     u1575:	
  2803  054A  1C03               	skipc
  2804  054B  2D5B               	goto	l1867
  2805  054C  0820               	movf	___aldiv@divisor^(0+128),w
  2806  054D  02A4               	subwf	___aldiv@dividend^(0+128),f
  2807  054E  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  2808  054F  1C03               	skipc
  2809  0550  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  2810  0551  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  2811  0552  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  2812  0553  1C03               	skipc
  2813  0554  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  2814  0555  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  2815  0556  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  2816  0557  1C03               	skipc
  2817  0558  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  2818  0559  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  2819  055A  142B               	bsf	___aldiv@quotient^(0+128),0
  2820  055B                     l1867:	
  2821  055B  3001               	movlw	1
  2822  055C                     u1585:	
  2823  055C  1003               	clrc
  2824  055D  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  2825  055E  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  2826  055F  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  2827  0560  0CA0               	rrf	___aldiv@divisor^(0+128),f
  2828  0561  3EFF               	addlw	-1
  2829  0562  1D03               	skipz
  2830  0563  2D5C               	goto	u1585
  2831  0564  3001               	movlw	1
  2832  0565  02A9               	subwf	___aldiv@counter^(0+128),f
  2833  0566  1D03               	btfss	3,2
  2834  0567  2D33               	goto	l1859
  2835  0568                     l1871:	
  2836  0568  082A               	movf	___aldiv@sign^(0+128),w
  2837  0569  1903               	btfsc	3,2
  2838  056A  2D76               	goto	l1875
  2839  056B  09AB               	comf	___aldiv@quotient^(0+128),f
  2840  056C  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  2841  056D  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  2842  056E  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  2843  056F  0AAB               	incf	___aldiv@quotient^(0+128),f
  2844  0570  1903               	skipnz
  2845  0571  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  2846  0572  1903               	skipnz
  2847  0573  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  2848  0574  1903               	skipnz
  2849  0575  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  2850  0576                     l1875:	
  2851  0576  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  2852  0577  00A3               	movwf	(?___aldiv+3)^(0+128)
  2853  0578  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  2854  0579  00A2               	movwf	(?___aldiv+2)^(0+128)
  2855  057A  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  2856  057B  00A1               	movwf	(?___aldiv+1)^(0+128)
  2857  057C  082B               	movf	___aldiv@quotient^(0+128),w
  2858  057D  00A0               	movwf	?___aldiv^(0+128)
  2859  057E  0008               	return
  2860  057F                     __end_of___aldiv:	
  2861                           
  2862                           	psect	text8
  2863  0E62                     __ptext8:	
  2864 ;; *************** function _TIMER0_Set *****************
  2865 ;; Defined at:
  2866 ;;		line 20 in file "C:\Users\332414\Desktop\FuzzySI\firmware\timers.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  contagens       1    wreg     unsigned char 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  contagens       1    0[BANK1 ] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;		None               void
  2873 ;; Registers used:
  2874 ;;		wreg
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2880 ;;      Params:         0       0       0       0       0
  2881 ;;      Locals:         0       0       1       0       0
  2882 ;;      Temps:          0       0       0       0       0
  2883 ;;      Totals:         0       0       1       0       0
  2884 ;;Total ram usage:        1 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    3
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_main
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           
  2895                           ;psect for function _TIMER0_Set
  2896  0E62                     _TIMER0_Set:	
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _TIMER0_Set: [wreg]
  2900                           ;TIMER0_Set@contagens stored from wreg
  2901  0E62  1683               	bsf	3,5	;RP0=1, select bank1
  2902  0E63  1303               	bcf	3,6	;RP1=0, select bank1
  2903  0E64  00A0               	movwf	TIMER0_Set@contagens^(0+128)
  2904                           
  2905                           ;timers.c: 22: TMR0 = contagens;
  2906  0E65  0820               	movf	TIMER0_Set@contagens^(0+128),w
  2907  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  2908  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  2909  0E68  0081               	movwf	1	;volatile
  2910  0E69  0008               	return
  2911  0E6A                     __end_of_TIMER0_Set:	
  2912                           
  2913                           	psect	text9
  2914  0E72                     __ptext9:	
  2915 ;; *************** function _TIMER0_Init *****************
  2916 ;; Defined at:
  2917 ;;		line 6 in file "C:\Users\332414\Desktop\FuzzySI\firmware\timers.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;		None
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;		None               void
  2924 ;; Registers used:
  2925 ;;		None
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2931 ;;      Params:         0       0       0       0       0
  2932 ;;      Locals:         0       0       0       0       0
  2933 ;;      Temps:          0       0       0       0       0
  2934 ;;      Totals:         0       0       0       0       0
  2935 ;;Total ram usage:        0 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    3
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_main
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           
  2946                           ;psect for function _TIMER0_Init
  2947  0E72                     _TIMER0_Init:	
  2948                           
  2949                           ;timers.c: 8: OPTION_REGbits.T0CS = 0;
  2950                           
  2951                           ;incstack = 0
  2952                           ; Regs used in _TIMER0_Init: []
  2953  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  2954  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  2955  0E74  1281               	bcf	1,5	;volatile
  2956                           
  2957                           ;timers.c: 9: OPTION_REGbits.T0SE = 0;
  2958  0E75  1201               	bcf	1,4	;volatile
  2959                           
  2960                           ;timers.c: 10: OPTION_REGbits.PSA = 0;
  2961  0E76  1181               	bcf	1,3	;volatile
  2962                           
  2963                           ;timers.c: 11: OPTION_REGbits.PS2 = 1;
  2964  0E77  1501               	bsf	1,2	;volatile
  2965                           
  2966                           ;timers.c: 12: OPTION_REGbits.PS1 = 1;
  2967  0E78  1481               	bsf	1,1	;volatile
  2968                           
  2969                           ;timers.c: 13: OPTION_REGbits.PS0 = 1;
  2970  0E79  1401               	bsf	1,0	;volatile
  2971                           
  2972                           ;timers.c: 14: INTCONbits.TMR0IF = 0;
  2973  0E7A  110B               	bcf	11,2	;volatile
  2974                           
  2975                           ;timers.c: 15: INTCONbits.TMR0IE = 1;
  2976  0E7B  168B               	bsf	11,5	;volatile
  2977  0E7C  0008               	return
  2978  0E7D                     __end_of_TIMER0_Init:	
  2979                           
  2980                           	psect	text10
  2981  0F27                     __ptext10:	
  2982 ;; *************** function _PWM_Init *****************
  2983 ;; Defined at:
  2984 ;;		line 5 in file "C:\Users\332414\Desktop\FuzzySI\firmware\pwm.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;		None
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;		None
  2989 ;; Return value:  Size  Location     Type
  2990 ;;		None               void
  2991 ;; Registers used:
  2992 ;;		wreg
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2998 ;;      Params:         0       0       0       0       0
  2999 ;;      Locals:         0       0       0       0       0
  3000 ;;      Temps:          0       0       0       0       0
  3001 ;;      Totals:         0       0       0       0       0
  3002 ;;Total ram usage:        0 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    3
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           
  3013                           ;psect for function _PWM_Init
  3014  0F27                     _PWM_Init:	
  3015                           
  3016                           ;pwm.c: 14: T2CONbits.T2CKPS1 = 1;
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in _PWM_Init: [wreg]
  3020  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  3021  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  3022  0F29  1492               	bsf	18,1	;volatile
  3023                           
  3024                           ;pwm.c: 15: T2CONbits.T2CKPS0 = 0;
  3025  0F2A  1012               	bcf	18,0	;volatile
  3026                           
  3027                           ;pwm.c: 18: T2CONbits.TOUTPS3 = 0;
  3028  0F2B  1312               	bcf	18,6	;volatile
  3029                           
  3030                           ;pwm.c: 19: T2CONbits.TOUTPS2 = 0;
  3031  0F2C  1292               	bcf	18,5	;volatile
  3032                           
  3033                           ;pwm.c: 20: T2CONbits.TOUTPS1 = 0;
  3034  0F2D  1212               	bcf	18,4	;volatile
  3035                           
  3036                           ;pwm.c: 21: T2CONbits.TOUTPS0 = 0;
  3037  0F2E  1192               	bcf	18,3	;volatile
  3038                           
  3039                           ;pwm.c: 24: T2CONbits.TMR2ON = 1;
  3040  0F2F  1512               	bsf	18,2	;volatile
  3041                           
  3042                           ;pwm.c: 27: PR2 = 255;
  3043  0F30  30FF               	movlw	255
  3044  0F31  1683               	bsf	3,5	;RP0=1, select bank1
  3045  0F32  1303               	bcf	3,6	;RP1=0, select bank1
  3046  0F33  0092               	movwf	18	;volatile
  3047                           
  3048                           ;pwm.c: 43: CCP1CONbits.CCP1M3 = 1;
  3049  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  3050  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  3051  0F36  1597               	bsf	23,3	;volatile
  3052                           
  3053                           ;pwm.c: 44: CCP1CONbits.CCP1M2 = 1;
  3054  0F37  1517               	bsf	23,2	;volatile
  3055                           
  3056                           ;pwm.c: 45: CCP1CONbits.CCP1M1 = 1;
  3057  0F38  1497               	bsf	23,1	;volatile
  3058                           
  3059                           ;pwm.c: 46: CCP1CONbits.CCP1M0 = 1;
  3060  0F39  1417               	bsf	23,0	;volatile
  3061                           
  3062                           ;pwm.c: 49: PIE1bits.CCP1IE = 1;
  3063  0F3A  1683               	bsf	3,5	;RP0=1, select bank1
  3064  0F3B  1303               	bcf	3,6	;RP1=0, select bank1
  3065  0F3C  150C               	bsf	12,2	;volatile
  3066                           
  3067                           ;pwm.c: 50: PIR1bits.CCP1IF = 0;
  3068  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0F3F  110C               	bcf	12,2	;volatile
  3071                           
  3072                           ;pwm.c: 53: CCP2CONbits.CCP2M3 = 1;
  3073  0F40  159D               	bsf	29,3	;volatile
  3074                           
  3075                           ;pwm.c: 54: CCP2CONbits.CCP2M2 = 1;
  3076  0F41  151D               	bsf	29,2	;volatile
  3077                           
  3078                           ;pwm.c: 55: CCP2CONbits.CCP2M1 = 1;
  3079  0F42  149D               	bsf	29,1	;volatile
  3080                           
  3081                           ;pwm.c: 56: CCP2CONbits.CCP2M0 = 1;
  3082  0F43  141D               	bsf	29,0	;volatile
  3083                           
  3084                           ;pwm.c: 59: PIE2bits.CCP2IE = 1;
  3085  0F44  1683               	bsf	3,5	;RP0=1, select bank1
  3086  0F45  1303               	bcf	3,6	;RP1=0, select bank1
  3087  0F46  140D               	bsf	13,0	;volatile
  3088                           
  3089                           ;pwm.c: 60: PIR2bits.CCP2IF = 0;
  3090  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0F49  100D               	bcf	13,0	;volatile
  3093  0F4A  0008               	return
  3094  0F4B                     __end_of_PWM_Init:	
  3095                           
  3096                           	psect	text11
  3097  0F06                     __ptext11:	
  3098 ;; *************** function _PWM_DutyCycle2 *****************
  3099 ;; Defined at:
  3100 ;;		line 96 in file "C:\Users\332414\Desktop\FuzzySI\firmware\pwm.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;  valor           2    0[BANK1 ] int 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;		None               void
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, status,0
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3114 ;;      Params:         0       0       2       0       0
  3115 ;;      Locals:         0       0       0       0       0
  3116 ;;      Temps:          0       0       2       0       0
  3117 ;;      Totals:         0       0       4       0       0
  3118 ;;Total ram usage:        4 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    3
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _PWM_DutyCycle2
  3130  0F06                     _PWM_DutyCycle2:	
  3131                           
  3132                           ;pwm.c: 98: CCPR2L = valor >> 2;
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _PWM_DutyCycle2: [wreg+status,2+status,0]
  3136  0F06  1683               	bsf	3,5	;RP0=1, select bank1
  3137  0F07  1303               	bcf	3,6	;RP1=0, select bank1
  3138  0F08  0821               	movf	(PWM_DutyCycle2@valor+1)^(0+128),w
  3139  0F09  00A3               	movwf	(??_PWM_DutyCycle2^(0+128)+1)
  3140  0F0A  0820               	movf	PWM_DutyCycle2@valor^(0+128),w
  3141  0F0B  00A2               	movwf	??_PWM_DutyCycle2^(0+128)
  3142  0F0C  0D23               	rlf	(??_PWM_DutyCycle2^(0+128)+1),w
  3143  0F0D  0CA3               	rrf	(??_PWM_DutyCycle2^(0+128)+1),f
  3144  0F0E  0CA2               	rrf	??_PWM_DutyCycle2^(0+128),f
  3145  0F0F  0D23               	rlf	(??_PWM_DutyCycle2^(0+128)+1),w
  3146  0F10  0CA3               	rrf	(??_PWM_DutyCycle2^(0+128)+1),f
  3147  0F11  0CA2               	rrf	??_PWM_DutyCycle2^(0+128),f
  3148  0F12  0822               	movf	??_PWM_DutyCycle2^(0+128),w
  3149  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  3150  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  3151  0F15  009B               	movwf	27	;volatile
  3152                           
  3153                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  3154  0F16  1683               	bsf	3,5	;RP0=1, select bank1
  3155  0F17  1303               	bcf	3,6	;RP1=0, select bank1
  3156  0F18  0820               	movf	PWM_DutyCycle2@valor^(0+128),w
  3157  0F19  00A2               	movwf	??_PWM_DutyCycle2^(0+128)
  3158  0F1A  3003               	movlw	3
  3159  0F1B                     u1745:	
  3160  0F1B  1003               	clrc
  3161  0F1C  0DA2               	rlf	??_PWM_DutyCycle2^(0+128),f
  3162  0F1D  3EFF               	addlw	-1
  3163  0F1E  1D03               	skipz
  3164  0F1F  2F1B               	goto	u1745
  3165  0F20  1003               	clrc
  3166  0F21  0D22               	rlf	??_PWM_DutyCycle2^(0+128),w
  3167  0F22  380C               	iorlw	12
  3168  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  3169  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  3170  0F25  009D               	movwf	29	;volatile
  3171  0F26  0008               	return
  3172  0F27                     __end_of_PWM_DutyCycle2:	
  3173                           
  3174                           	psect	text12
  3175  0EE5                     __ptext12:	
  3176 ;; *************** function _PWM_DutyCycle1 *****************
  3177 ;; Defined at:
  3178 ;;		line 64 in file "C:\Users\332414\Desktop\FuzzySI\firmware\pwm.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  valor           2    0[BANK1 ] int 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;		None
  3183 ;; Return value:  Size  Location     Type
  3184 ;;		None               void
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3192 ;;      Params:         0       0       2       0       0
  3193 ;;      Locals:         0       0       0       0       0
  3194 ;;      Temps:          0       0       2       0       0
  3195 ;;      Totals:         0       0       4       0       0
  3196 ;;Total ram usage:        4 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; Hardware stack levels required when called:    3
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_main
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           
  3207                           ;psect for function _PWM_DutyCycle1
  3208  0EE5                     _PWM_DutyCycle1:	
  3209                           
  3210                           ;pwm.c: 91: CCPR1L = valor >> 2;
  3211                           
  3212                           ;incstack = 0
  3213                           ; Regs used in _PWM_DutyCycle1: [wreg+status,2+status,0]
  3214  0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  3215  0EE6  1303               	bcf	3,6	;RP1=0, select bank1
  3216  0EE7  0821               	movf	(PWM_DutyCycle1@valor+1)^(0+128),w
  3217  0EE8  00A3               	movwf	(??_PWM_DutyCycle1^(0+128)+1)
  3218  0EE9  0820               	movf	PWM_DutyCycle1@valor^(0+128),w
  3219  0EEA  00A2               	movwf	??_PWM_DutyCycle1^(0+128)
  3220  0EEB  0D23               	rlf	(??_PWM_DutyCycle1^(0+128)+1),w
  3221  0EEC  0CA3               	rrf	(??_PWM_DutyCycle1^(0+128)+1),f
  3222  0EED  0CA2               	rrf	??_PWM_DutyCycle1^(0+128),f
  3223  0EEE  0D23               	rlf	(??_PWM_DutyCycle1^(0+128)+1),w
  3224  0EEF  0CA3               	rrf	(??_PWM_DutyCycle1^(0+128)+1),f
  3225  0EF0  0CA2               	rrf	??_PWM_DutyCycle1^(0+128),f
  3226  0EF1  0822               	movf	??_PWM_DutyCycle1^(0+128),w
  3227  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  3228  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  3229  0EF4  0095               	movwf	21	;volatile
  3230                           
  3231                           ;pwm.c: 92: CCP1CON = (valor << 4)|0X0C;
  3232  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  3233  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  3234  0EF7  0820               	movf	PWM_DutyCycle1@valor^(0+128),w
  3235  0EF8  00A2               	movwf	??_PWM_DutyCycle1^(0+128)
  3236  0EF9  3003               	movlw	3
  3237  0EFA                     u1785:	
  3238  0EFA  1003               	clrc
  3239  0EFB  0DA2               	rlf	??_PWM_DutyCycle1^(0+128),f
  3240  0EFC  3EFF               	addlw	-1
  3241  0EFD  1D03               	skipz
  3242  0EFE  2EFA               	goto	u1785
  3243  0EFF  1003               	clrc
  3244  0F00  0D22               	rlf	??_PWM_DutyCycle1^(0+128),w
  3245  0F01  380C               	iorlw	12
  3246  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0F04  0097               	movwf	23	;volatile
  3249  0F05  0008               	return
  3250  0F06                     __end_of_PWM_DutyCycle1:	
  3251                           
  3252                           	psect	text13
  3253  0F99                     __ptext13:	
  3254 ;; *************** function _LCD_WriteString *****************
  3255 ;; Defined at:
  3256 ;;		line 61 in file "C:\Users\332414\Desktop\FuzzySI\firmware\lcd.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;  Str             2    2[BANK1 ] PTR const unsigned char 
  3259 ;;		 -> STR_3(6), display(10), STR_1(17), 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;		None               void
  3264 ;; Registers used:
  3265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3271 ;;      Params:         0       0       2       0       0
  3272 ;;      Locals:         0       0       0       0       0
  3273 ;;      Temps:          0       0       0       0       0
  3274 ;;      Totals:         0       0       2       0       0
  3275 ;;Total ram usage:        2 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    4
  3278 ;; This function calls:
  3279 ;;		_LCD_WriteData
  3280 ;; This function is called by:
  3281 ;;		_main
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           
  3286                           ;psect for function _LCD_WriteString
  3287  0F99                     _LCD_WriteString:	
  3288  0F99                     l2049:	
  3289                           ;lcd.c: 63: while(*Str != '\0')
  3290                           
  3291                           ;incstack = 0
  3292                           ; Regs used in _LCD_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3293                           
  3294  0F99  1683               	bsf	3,5	;RP0=1, select bank1
  3295  0F9A  1303               	bcf	3,6	;RP1=0, select bank1
  3296  0F9B  0823               	movf	(LCD_WriteString@Str+1)^(0+128),w
  3297  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  3298  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
  3299  0F9E  00FF               	movwf	127
  3300  0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  3301  0FA0  1303               	bcf	3,6	;RP1=0, select bank1
  3302  0FA1  0822               	movf	LCD_WriteString@Str^(0+128),w
  3303  0FA2  0084               	movwf	4
  3304  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  3305  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  3306  0FA5  120A  118A  2700  120A  158A  	fcall	stringtab
  3307  0FAA  3800               	iorlw	0
  3308  0FAB  1903               	btfsc	3,2
  3309  0FAC  0008               	return
  3310                           
  3311                           ;lcd.c: 64: {
  3312                           ;lcd.c: 65: LCD_WriteData(*Str);
  3313  0FAD  1683               	bsf	3,5	;RP0=1, select bank1
  3314  0FAE  1303               	bcf	3,6	;RP1=0, select bank1
  3315  0FAF  0823               	movf	(LCD_WriteString@Str+1)^(0+128),w
  3316  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0FB2  00FF               	movwf	127
  3319  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  3320  0FB4  1303               	bcf	3,6	;RP1=0, select bank1
  3321  0FB5  0822               	movf	LCD_WriteString@Str^(0+128),w
  3322  0FB6  0084               	movwf	4
  3323  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0FB9  120A  118A  2700  120A  158A  	fcall	stringtab
  3326  0FBE  120A  118A  27E7  120A  158A  	fcall	_LCD_WriteData
  3327                           
  3328                           ;lcd.c: 66: Str++;
  3329  0FC3  3001               	movlw	1
  3330  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  3331  0FC5  1303               	bcf	3,6	;RP1=0, select bank1
  3332  0FC6  07A2               	addwf	LCD_WriteString@Str^(0+128),f
  3333  0FC7  1803               	skipnc
  3334  0FC8  0AA3               	incf	(LCD_WriteString@Str+1)^(0+128),f
  3335  0FC9  2F99               	goto	l2049
  3336  0FCA                     __end_of_LCD_WriteString:	
  3337                           
  3338                           	psect	text14
  3339  07E7                     __ptext14:	
  3340 ;; *************** function _LCD_WriteData *****************
  3341 ;; Defined at:
  3342 ;;		line 47 in file "C:\Users\332414\Desktop\FuzzySI\firmware\lcd.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  Byte            1    wreg     unsigned char 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  Byte            1    1[BANK1 ] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;		None               void
  3349 ;; Registers used:
  3350 ;;		wreg
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3356 ;;      Params:         0       0       0       0       0
  3357 ;;      Locals:         0       0       1       0       0
  3358 ;;      Temps:          0       0       1       0       0
  3359 ;;      Totals:         0       0       2       0       0
  3360 ;;Total ram usage:        2 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    3
  3363 ;; This function calls:
  3364 ;;		Nothing
  3365 ;; This function is called by:
  3366 ;;		_LCD_WriteString
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           
  3371                           ;psect for function _LCD_WriteData
  3372  07E7                     _LCD_WriteData:	
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _LCD_WriteData: [wreg]
  3376                           ;LCD_WriteData@Byte stored from wreg
  3377  07E7  1683               	bsf	3,5	;RP0=1, select bank1
  3378  07E8  1303               	bcf	3,6	;RP1=0, select bank1
  3379  07E9  00A1               	movwf	LCD_WriteData@Byte^(0+128)
  3380                           
  3381                           ;lcd.c: 49: PORTEbits.RE0 = 1;
  3382  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  3383  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  3384  07EC  1409               	bsf	9,0	;volatile
  3385                           
  3386                           ;lcd.c: 51: PORTD = Byte;
  3387  07ED  1683               	bsf	3,5	;RP0=1, select bank1
  3388  07EE  1303               	bcf	3,6	;RP1=0, select bank1
  3389  07EF  0821               	movf	LCD_WriteData@Byte^(0+128),w
  3390  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  3391  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  3392  07F2  0088               	movwf	8	;volatile
  3393                           
  3394                           ;lcd.c: 53: PORTEbits.RE1 = 1;
  3395  07F3  1489               	bsf	9,1	;volatile
  3396                           
  3397                           ;lcd.c: 55: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3398  07F4  303D               	movlw	61
  3399  07F5  1683               	bsf	3,5	;RP0=1, select bank1
  3400  07F6  1303               	bcf	3,6	;RP1=0, select bank1
  3401  07F7  00A0               	movwf	??_LCD_WriteData^(0+128)
  3402  07F8                     u2537:	
  3403  07F8  0BA0               	decfsz	??_LCD_WriteData^(0+128),f
  3404  07F9  2FF8               	goto	u2537
  3405                           
  3406                           ;lcd.c: 57: PORTEbits.RE1 = 0;
  3407  07FA  1283               	bcf	3,5	;RP0=0, select bank0
  3408  07FB  1303               	bcf	3,6	;RP1=0, select bank0
  3409  07FC  1089               	bcf	9,1	;volatile
  3410  07FD  0008               	return
  3411  07FE                     __end_of_LCD_WriteData:	
  3412                           
  3413                           	psect	text15
  3414  060D                     __ptext15:	
  3415 ;; *************** function _LCD_Init *****************
  3416 ;; Defined at:
  3417 ;;		line 87 in file "C:\Users\332414\Desktop\FuzzySI\firmware\lcd.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;		None               void
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, pclath, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3431 ;;      Params:         0       0       0       0       0
  3432 ;;      Locals:         0       0       0       0       0
  3433 ;;      Temps:          0       0       2       0       0
  3434 ;;      Totals:         0       0       2       0       0
  3435 ;;Total ram usage:        2 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    4
  3438 ;; This function calls:
  3439 ;;		_LCD_WriteCmd
  3440 ;; This function is called by:
  3441 ;;		_main
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _LCD_Init
  3447  060D                     _LCD_Init:	
  3448                           
  3449                           ;lcd.c: 90: ADCON1bits.PCFG3 = 0;
  3450                           
  3451                           ;incstack = 0
  3452                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  3453  060D  1683               	bsf	3,5	;RP0=1, select bank1
  3454  060E  1303               	bcf	3,6	;RP1=0, select bank1
  3455  060F  119F               	bcf	31,3	;volatile
  3456                           
  3457                           ;lcd.c: 91: ADCON1bits.PCFG2 = 1;
  3458  0610  151F               	bsf	31,2	;volatile
  3459                           
  3460                           ;lcd.c: 92: ADCON1bits.PCFG1 = 0;
  3461  0611  109F               	bcf	31,1	;volatile
  3462                           
  3463                           ;lcd.c: 93: ADCON1bits.PCFG0 = 0;
  3464  0612  101F               	bcf	31,0	;volatile
  3465                           
  3466                           ;lcd.c: 95: _delay((unsigned long)((15)*(18432000/4000.0)));
  3467  0613  305A               	movlw	90
  3468  0614  00A3               	movwf	(??_LCD_Init^(0+128)+1)
  3469  0615  30C3               	movlw	195
  3470  0616  00A2               	movwf	??_LCD_Init^(0+128)
  3471  0617                     u2547:	
  3472  0617  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3473  0618  2E17               	goto	u2547
  3474  0619  0BA3               	decfsz	(??_LCD_Init^(0+128)+1),f
  3475  061A  2E17               	goto	u2547
  3476                           
  3477                           ;lcd.c: 97: LCD_WriteCmd(0x30);
  3478  061B  3030               	movlw	48
  3479  061C  120A  158A  26B3  120A  118A  	fcall	_LCD_WriteCmd
  3480                           
  3481                           ;lcd.c: 98: _delay((unsigned long)((4)*(18432000/4000.0)));
  3482  0621  3018               	movlw	24
  3483  0622  1683               	bsf	3,5	;RP0=1, select bank1
  3484  0623  1303               	bcf	3,6	;RP1=0, select bank1
  3485  0624  00A3               	movwf	(??_LCD_Init^(0+128)+1)
  3486  0625  30EF               	movlw	239
  3487  0626  00A2               	movwf	??_LCD_Init^(0+128)
  3488  0627                     u2557:	
  3489  0627  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3490  0628  2E27               	goto	u2557
  3491  0629  0BA3               	decfsz	(??_LCD_Init^(0+128)+1),f
  3492  062A  2E27               	goto	u2557
  3493                           
  3494                           ;lcd.c: 100: LCD_WriteCmd(0x30);
  3495  062B  3030               	movlw	48
  3496  062C  120A  158A  26B3  120A  118A  	fcall	_LCD_WriteCmd
  3497                           
  3498                           ;lcd.c: 101: _delay((unsigned long)((100)*(18432000/4000000.0)));
  3499  0631  3099               	movlw	153
  3500  0632  1683               	bsf	3,5	;RP0=1, select bank1
  3501  0633  1303               	bcf	3,6	;RP1=0, select bank1
  3502  0634  00A2               	movwf	??_LCD_Init^(0+128)
  3503  0635                     u2567:	
  3504  0635  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3505  0636  2E35               	goto	u2567
  3506                           
  3507                           ;lcd.c: 103: LCD_WriteCmd(0x30);
  3508  0637  3030               	movlw	48
  3509  0638  120A  158A  26B3  120A  118A  	fcall	_LCD_WriteCmd
  3510                           
  3511                           ;lcd.c: 104: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3512  063D  303D               	movlw	61
  3513  063E  1683               	bsf	3,5	;RP0=1, select bank1
  3514  063F  1303               	bcf	3,6	;RP1=0, select bank1
  3515  0640  00A2               	movwf	??_LCD_Init^(0+128)
  3516  0641                     u2577:	
  3517  0641  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3518  0642  2E41               	goto	u2577
  3519                           
  3520                           ;lcd.c: 106: LCD_WriteCmd(0x38);
  3521  0643  3038               	movlw	56
  3522  0644  120A  158A  26B3  120A  118A  	fcall	_LCD_WriteCmd
  3523                           
  3524                           ;lcd.c: 107: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3525  0649  303D               	movlw	61
  3526  064A  1683               	bsf	3,5	;RP0=1, select bank1
  3527  064B  1303               	bcf	3,6	;RP1=0, select bank1
  3528  064C  00A2               	movwf	??_LCD_Init^(0+128)
  3529  064D                     u2587:	
  3530  064D  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3531  064E  2E4D               	goto	u2587
  3532                           
  3533                           ;lcd.c: 109: LCD_WriteCmd(0x01);
  3534  064F  3001               	movlw	1
  3535  0650  120A  158A  26B3  120A  118A  	fcall	_LCD_WriteCmd
  3536                           
  3537                           ;lcd.c: 110: _delay((unsigned long)((2)*(18432000/4000.0)));
  3538  0655  300C               	movlw	12
  3539  0656  1683               	bsf	3,5	;RP0=1, select bank1
  3540  0657  1303               	bcf	3,6	;RP1=0, select bank1
  3541  0658  00A3               	movwf	(??_LCD_Init^(0+128)+1)
  3542  0659  30F7               	movlw	247
  3543  065A  00A2               	movwf	??_LCD_Init^(0+128)
  3544  065B                     u2597:	
  3545  065B  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3546  065C  2E5B               	goto	u2597
  3547  065D  0BA3               	decfsz	(??_LCD_Init^(0+128)+1),f
  3548  065E  2E5B               	goto	u2597
  3549                           
  3550                           ;lcd.c: 112: LCD_WriteCmd(0x0C);
  3551  065F  300C               	movlw	12
  3552  0660  120A  158A  26B3  120A  118A  	fcall	_LCD_WriteCmd
  3553                           
  3554                           ;lcd.c: 113: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3555  0665  303D               	movlw	61
  3556  0666  1683               	bsf	3,5	;RP0=1, select bank1
  3557  0667  1303               	bcf	3,6	;RP1=0, select bank1
  3558  0668  00A2               	movwf	??_LCD_Init^(0+128)
  3559  0669                     u2607:	
  3560  0669  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3561  066A  2E69               	goto	u2607
  3562                           
  3563                           ;lcd.c: 115: LCD_WriteCmd(0x06);
  3564  066B  3006               	movlw	6
  3565  066C  120A  158A  26B3  120A  118A  	fcall	_LCD_WriteCmd
  3566                           
  3567                           ;lcd.c: 116: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3568  0671  303D               	movlw	61
  3569  0672  1683               	bsf	3,5	;RP0=1, select bank1
  3570  0673  1303               	bcf	3,6	;RP1=0, select bank1
  3571  0674  00A2               	movwf	??_LCD_Init^(0+128)
  3572  0675                     u2617:	
  3573  0675  0BA2               	decfsz	??_LCD_Init^(0+128),f
  3574  0676  2E75               	goto	u2617
  3575  0677  0008               	return
  3576  0678                     __end_of_LCD_Init:	
  3577                           
  3578                           	psect	text16
  3579  06E0                     __ptext16:	
  3580 ;; *************** function _LCD_Cursor *****************
  3581 ;; Defined at:
  3582 ;;		line 10 in file "C:\Users\332414\Desktop\FuzzySI\firmware\lcd.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;  Row             1    wreg     unsigned char 
  3585 ;;  Col             1    0[BANK1 ] unsigned char 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  Row             1    2[BANK1 ] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;		None               void
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3597 ;;      Params:         0       0       1       0       0
  3598 ;;      Locals:         0       0       1       0       0
  3599 ;;      Temps:          0       0       1       0       0
  3600 ;;      Totals:         0       0       3       0       0
  3601 ;;Total ram usage:        3 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    3
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_main
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           
  3612                           ;psect for function _LCD_Cursor
  3613  06E0                     _LCD_Cursor:	
  3614                           
  3615                           ;incstack = 0
  3616                           ; Regs used in _LCD_Cursor: [wreg+status,2+status,0]
  3617                           ;LCD_Cursor@Row stored from wreg
  3618  06E0  1683               	bsf	3,5	;RP0=1, select bank1
  3619  06E1  1303               	bcf	3,6	;RP1=0, select bank1
  3620  06E2  00A2               	movwf	LCD_Cursor@Row^(0+128)
  3621                           
  3622                           ;lcd.c: 12: PORTEbits.RE0 = 0;
  3623  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  3624  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  3625  06E5  1009               	bcf	9,0	;volatile
  3626                           
  3627                           ;lcd.c: 14: if (Row == 0)
  3628  06E6  1683               	bsf	3,5	;RP0=1, select bank1
  3629  06E7  1303               	bcf	3,6	;RP1=0, select bank1
  3630  06E8  08A2               	movf	LCD_Cursor@Row^(0+128),f
  3631  06E9  1D03               	skipz
  3632  06EA  2EEE               	goto	l2035
  3633                           
  3634                           ;lcd.c: 15: {
  3635                           ;lcd.c: 16: PORTD = 0x80 + Col;
  3636  06EB  0820               	movf	LCD_Cursor@Col^(0+128),w
  3637  06EC  3E80               	addlw	128
  3638  06ED  2EF2               	goto	L2
  3639  06EE                     l2035:	
  3640                           ;lcd.c: 17: }
  3641                           
  3642                           
  3643                           ;lcd.c: 18: else
  3644                           ;lcd.c: 19: {
  3645                           ;lcd.c: 20: PORTD = 0xC0 + Col;
  3646  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  3647  06EF  1303               	bcf	3,6	;RP1=0, select bank1
  3648  06F0  0820               	movf	LCD_Cursor@Col^(0+128),w
  3649  06F1  3EC0               	addlw	192
  3650  06F2                     L2:	
  3651  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  3652  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  3653  06F4  0088               	movwf	8	;volatile
  3654                           
  3655                           ;lcd.c: 21: }
  3656                           ;lcd.c: 24: PORTEbits.RE1 = 1;
  3657  06F5  1489               	bsf	9,1	;volatile
  3658                           
  3659                           ;lcd.c: 26: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3660  06F6  303D               	movlw	61
  3661  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  3662  06F8  1303               	bcf	3,6	;RP1=0, select bank1
  3663  06F9  00A1               	movwf	??_LCD_Cursor^(0+128)
  3664  06FA                     u2627:	
  3665  06FA  0BA1               	decfsz	??_LCD_Cursor^(0+128),f
  3666  06FB  2EFA               	goto	u2627
  3667                           
  3668                           ;lcd.c: 28: PORTEbits.RE1 = 0;
  3669  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  3670  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  3671  06FE  1089               	bcf	9,1	;volatile
  3672  06FF  0008               	return
  3673  0700                     __end_of_LCD_Cursor:	
  3674                           
  3675                           	psect	text17
  3676  0F70                     __ptext17:	
  3677 ;; *************** function _LCD_Clear *****************
  3678 ;; Defined at:
  3679 ;;		line 71 in file "C:\Users\332414\Desktop\FuzzySI\firmware\lcd.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;		None
  3684 ;; Return value:  Size  Location     Type
  3685 ;;		None               void
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, pclath, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3693 ;;      Params:         0       0       0       0       0
  3694 ;;      Locals:         0       0       0       0       0
  3695 ;;      Temps:          0       0       2       0       0
  3696 ;;      Totals:         0       0       2       0       0
  3697 ;;Total ram usage:        2 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    4
  3700 ;; This function calls:
  3701 ;;		_LCD_WriteCmd
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _LCD_Clear
  3709  0F70                     _LCD_Clear:	
  3710                           
  3711                           ;lcd.c: 73: LCD_WriteCmd(0x01);
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  3715  0F70  3001               	movlw	1
  3716  0F71  120A  158A  26B3  120A  158A  	fcall	_LCD_WriteCmd
  3717                           
  3718                           ;lcd.c: 75: _delay((unsigned long)((2)*(18432000/4000.0)));
  3719  0F76  300C               	movlw	12
  3720  0F77  1683               	bsf	3,5	;RP0=1, select bank1
  3721  0F78  1303               	bcf	3,6	;RP1=0, select bank1
  3722  0F79  00A3               	movwf	(??_LCD_Clear^(0+128)+1)
  3723  0F7A  30F7               	movlw	247
  3724  0F7B  00A2               	movwf	??_LCD_Clear^(0+128)
  3725  0F7C                     u2637:	
  3726  0F7C  0BA2               	decfsz	??_LCD_Clear^(0+128),f
  3727  0F7D  2F7C               	goto	u2637
  3728  0F7E  0BA3               	decfsz	(??_LCD_Clear^(0+128)+1),f
  3729  0F7F  2F7C               	goto	u2637
  3730                           
  3731                           ;lcd.c: 77: LCD_WriteCmd(0x0C);
  3732  0F80  300C               	movlw	12
  3733  0F81  120A  158A  26B3  120A  158A  	fcall	_LCD_WriteCmd
  3734                           
  3735                           ;lcd.c: 79: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3736  0F86  303D               	movlw	61
  3737  0F87  1683               	bsf	3,5	;RP0=1, select bank1
  3738  0F88  1303               	bcf	3,6	;RP1=0, select bank1
  3739  0F89  00A2               	movwf	??_LCD_Clear^(0+128)
  3740  0F8A                     u2647:	
  3741  0F8A  0BA2               	decfsz	??_LCD_Clear^(0+128),f
  3742  0F8B  2F8A               	goto	u2647
  3743                           
  3744                           ;lcd.c: 81: LCD_WriteCmd(0x06);
  3745  0F8C  3006               	movlw	6
  3746  0F8D  120A  158A  26B3  120A  158A  	fcall	_LCD_WriteCmd
  3747                           
  3748                           ;lcd.c: 83: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3749  0F92  303D               	movlw	61
  3750  0F93  1683               	bsf	3,5	;RP0=1, select bank1
  3751  0F94  1303               	bcf	3,6	;RP1=0, select bank1
  3752  0F95  00A2               	movwf	??_LCD_Clear^(0+128)
  3753  0F96                     u2657:	
  3754  0F96  0BA2               	decfsz	??_LCD_Clear^(0+128),f
  3755  0F97  2F96               	goto	u2657
  3756  0F98  0008               	return
  3757  0F99                     __end_of_LCD_Clear:	
  3758                           
  3759                           	psect	text18
  3760  0EB3                     __ptext18:	
  3761 ;; *************** function _LCD_WriteCmd *****************
  3762 ;; Defined at:
  3763 ;;		line 32 in file "C:\Users\332414\Desktop\FuzzySI\firmware\lcd.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  Byte            1    wreg     unsigned char 
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;  Byte            1    1[BANK1 ] unsigned char 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;		None               void
  3770 ;; Registers used:
  3771 ;;		wreg
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3777 ;;      Params:         0       0       0       0       0
  3778 ;;      Locals:         0       0       1       0       0
  3779 ;;      Temps:          0       0       1       0       0
  3780 ;;      Totals:         0       0       2       0       0
  3781 ;;Total ram usage:        2 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    3
  3784 ;; This function calls:
  3785 ;;		Nothing
  3786 ;; This function is called by:
  3787 ;;		_LCD_Clear
  3788 ;;		_LCD_Init
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           
  3793                           ;psect for function _LCD_WriteCmd
  3794  0EB3                     _LCD_WriteCmd:	
  3795                           
  3796                           ;incstack = 0
  3797                           ; Regs used in _LCD_WriteCmd: [wreg]
  3798                           ;LCD_WriteCmd@Byte stored from wreg
  3799  0EB3  1683               	bsf	3,5	;RP0=1, select bank1
  3800  0EB4  1303               	bcf	3,6	;RP1=0, select bank1
  3801  0EB5  00A1               	movwf	LCD_WriteCmd@Byte^(0+128)
  3802                           
  3803                           ;lcd.c: 34: PORTEbits.RE0 = 0;
  3804  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  3805  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  3806  0EB8  1009               	bcf	9,0	;volatile
  3807                           
  3808                           ;lcd.c: 36: PORTD = Byte;
  3809  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  3810  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  3811  0EBB  0821               	movf	LCD_WriteCmd@Byte^(0+128),w
  3812  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0EBE  0088               	movwf	8	;volatile
  3815                           
  3816                           ;lcd.c: 39: PORTEbits.RE1 = 1;
  3817  0EBF  1489               	bsf	9,1	;volatile
  3818                           
  3819                           ;lcd.c: 41: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3820  0EC0  303D               	movlw	61
  3821  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  3822  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  3823  0EC3  00A0               	movwf	??_LCD_WriteCmd^(0+128)
  3824  0EC4                     u2667:	
  3825  0EC4  0BA0               	decfsz	??_LCD_WriteCmd^(0+128),f
  3826  0EC5  2EC4               	goto	u2667
  3827                           
  3828                           ;lcd.c: 43: PORTEbits.RE1 = 0;
  3829  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  3831  0EC8  1089               	bcf	9,1	;volatile
  3832  0EC9  0008               	return
  3833  0ECA                     __end_of_LCD_WriteCmd:	
  3834                           
  3835                           	psect	text19
  3836  0E8D                     __ptext19:	
  3837 ;; *************** function _ADC_Init *****************
  3838 ;; Defined at:
  3839 ;;		line 6 in file "C:\Users\332414\Desktop\FuzzySI\firmware\adc.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;		None
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;		None
  3844 ;; Return value:  Size  Location     Type
  3845 ;;		None               void
  3846 ;; Registers used:
  3847 ;;		None
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3853 ;;      Params:         0       0       0       0       0
  3854 ;;      Locals:         0       0       0       0       0
  3855 ;;      Temps:          0       0       0       0       0
  3856 ;;      Totals:         0       0       0       0       0
  3857 ;;Total ram usage:        0 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    3
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_main
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           
  3868                           ;psect for function _ADC_Init
  3869  0E8D                     _ADC_Init:	
  3870                           
  3871                           ;adc.c: 9: ADCON1bits.ADFM = 1;
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _ADC_Init: []
  3875  0E8D  1683               	bsf	3,5	;RP0=1, select bank1
  3876  0E8E  1303               	bcf	3,6	;RP1=0, select bank1
  3877  0E8F  179F               	bsf	31,7	;volatile
  3878                           
  3879                           ;adc.c: 32: ADCON1bits.PCFG3 = 1;
  3880  0E90  159F               	bsf	31,3	;volatile
  3881                           
  3882                           ;adc.c: 33: ADCON1bits.PCFG2 = 1;
  3883  0E91  151F               	bsf	31,2	;volatile
  3884                           
  3885                           ;adc.c: 34: ADCON1bits.PCFG1 = 1;
  3886  0E92  149F               	bsf	31,1	;volatile
  3887                           
  3888                           ;adc.c: 35: ADCON1bits.PCFG0 = 0;
  3889  0E93  101F               	bcf	31,0	;volatile
  3890                           
  3891                           ;adc.c: 38: ADCON0bits.ADCS1 = 1;
  3892  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  3893  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  3894  0E96  179F               	bsf	31,7	;volatile
  3895                           
  3896                           ;adc.c: 39: ADCON0bits.ADCS0 = 0;
  3897  0E97  131F               	bcf	31,6	;volatile
  3898                           
  3899                           ;adc.c: 42: PIE1bits.ADIE = 0;
  3900  0E98  1683               	bsf	3,5	;RP0=1, select bank1
  3901  0E99  1303               	bcf	3,6	;RP1=0, select bank1
  3902  0E9A  130C               	bcf	12,6	;volatile
  3903                           
  3904                           ;adc.c: 43: PIR1bits.ADIF = 0;
  3905  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  3906  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  3907  0E9D  130C               	bcf	12,6	;volatile
  3908  0E9E  0008               	return
  3909  0E9F                     __end_of_ADC_Init:	
  3910                           
  3911                           	psect	text20
  3912  0458                     __ptext20:	
  3913 ;; *************** function _ISR *****************
  3914 ;; Defined at:
  3915 ;;		line 94 in file "C:\Users\332414\Desktop\FuzzySI\firmware\main.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;		None               void
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0, pclath, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3929 ;;      Params:         0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0
  3931 ;;      Temps:          0       6       0       0       0
  3932 ;;      Totals:         0       6       0       0       0
  3933 ;;Total ram usage:        6 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    2
  3936 ;; This function calls:
  3937 ;;		___ftdiv
  3938 ;;		___ftmul
  3939 ;;		___fttol
  3940 ;;		___lwtoft
  3941 ;;		i1_PWM_DutyCycle2
  3942 ;;		i1_TIMER0_Set
  3943 ;; This function is called by:
  3944 ;;		Interrupt level 1
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           
  3949                           ;psect for function _ISR
  3950  0458                     _ISR:	
  3951                           
  3952                           ;main.c: 97: if (PIR1bits.RCIF)
  3953  0458  1A8C               	btfsc	12,5	;volatile
  3954                           
  3955                           ;main.c: 98: {
  3956                           ;main.c: 101: PIR1bits.RCIF = 0;
  3957  0459  128C               	bcf	12,5	;volatile
  3958                           
  3959                           ;main.c: 102: }
  3960                           ;main.c: 105: if (PIR1bits.ADIF)
  3961  045A  1B0C               	btfsc	12,6	;volatile
  3962                           
  3963                           ;main.c: 106: {
  3964                           ;main.c: 110: PIR1bits.ADIF = 0;
  3965  045B  130C               	bcf	12,6	;volatile
  3966                           
  3967                           ;main.c: 111: }
  3968                           ;main.c: 115: if (INTCONbits.T0IF)
  3969  045C  1D0B               	btfss	11,2	;volatile
  3970  045D  2CE1               	goto	i1l2403
  3971                           
  3972                           ;main.c: 116: {
  3973                           ;main.c: 118: TIMER0_Set(238);
  3974  045E  30EE               	movlw	238
  3975  045F  120A  158A  265C  120A  118A  	fcall	i1_TIMER0_Set
  3976                           
  3977                           ;main.c: 121: if (contagens_tm0 < 499)
  3978  0464  3001               	movlw	1
  3979  0465  1283               	bcf	3,5	;RP0=0, select bank0
  3980  0466  1303               	bcf	3,6	;RP1=0, select bank0
  3981  0467  025C               	subwf	_contagens_tm0+1,w
  3982  0468  30F3               	movlw	243
  3983  0469  1903               	skipnz
  3984  046A  025B               	subwf	_contagens_tm0,w
  3985  046B  1803               	skipnc
  3986  046C  2C75               	goto	i1l2389
  3987                           
  3988                           ;main.c: 122: {
  3989                           ;main.c: 124: contagens_tm0++;
  3990  046D  3001               	movlw	1
  3991  046E  07DB               	addwf	_contagens_tm0,f
  3992  046F  1803               	skipnc
  3993  0470  0ADC               	incf	_contagens_tm0+1,f
  3994  0471  3000               	movlw	0
  3995  0472  07DC               	addwf	_contagens_tm0+1,f
  3996                           
  3997                           ;main.c: 127: PORTBbits.RB6 = 1;
  3998  0473  1706               	bsf	6,6	;volatile
  3999                           
  4000                           ;main.c: 128: }
  4001  0474  2CE0               	goto	i1l2401
  4002  0475                     i1l2389:	
  4003                           
  4004                           ;main.c: 129: else
  4005                           ;main.c: 130: {
  4006                           ;main.c: 132: contagens_tm0 = 0;
  4007  0475  01DB               	clrf	_contagens_tm0
  4008  0476  01DC               	clrf	_contagens_tm0+1
  4009                           
  4010                           ;main.c: 135: pulsos = (TMR1H << 8) + TMR1L;
  4011  0477  080F               	movf	15,w	;volatile
  4012  0478  01E0               	clrf	_pulsos+1
  4013  0479  07E0               	addwf	_pulsos+1,f
  4014  047A  080E               	movf	14,w	;volatile
  4015  047B  01DF               	clrf	_pulsos
  4016  047C  07DF               	addwf	_pulsos,f
  4017                           
  4018                           ;main.c: 136: rpm = ((pulsos / 7.0) * 120);
  4019  047D  0860               	movf	_pulsos+1,w
  4020  047E  01F9               	clrf	___lwtoft@c+1
  4021  047F  07F9               	addwf	___lwtoft@c+1,f
  4022  0480  085F               	movf	_pulsos,w
  4023  0481  01F8               	clrf	___lwtoft@c
  4024  0482  07F8               	addwf	___lwtoft@c,f
  4025  0483  120A  158A  269F  120A  118A  	fcall	___lwtoft
  4026  0488  0878               	movf	?___lwtoft,w
  4027  0489  1283               	bcf	3,5	;RP0=0, select bank0
  4028  048A  1303               	bcf	3,6	;RP1=0, select bank0
  4029  048B  00A3               	movwf	___ftdiv@f1
  4030  048C  0879               	movf	?___lwtoft+1,w
  4031  048D  00A4               	movwf	___ftdiv@f1+1
  4032  048E  087A               	movf	?___lwtoft+2,w
  4033  048F  00A5               	movwf	___ftdiv@f1+2
  4034  0490  3000               	movlw	0
  4035  0491  00A0               	movwf	___ftdiv@f2
  4036  0492  30E0               	movlw	224
  4037  0493  00A1               	movwf	___ftdiv@f2+1
  4038  0494  3040               	movlw	64
  4039  0495  00A2               	movwf	___ftdiv@f2+2
  4040  0496  120A  118A  23A0  120A  118A  	fcall	___ftdiv
  4041  049B  1283               	bcf	3,5	;RP0=0, select bank0
  4042  049C  1303               	bcf	3,6	;RP1=0, select bank0
  4043  049D  0820               	movf	?___ftdiv,w
  4044  049E  00B3               	movwf	___ftmul@f2
  4045  049F  0821               	movf	?___ftdiv+1,w
  4046  04A0  00B4               	movwf	___ftmul@f2+1
  4047  04A1  0822               	movf	?___ftdiv+2,w
  4048  04A2  00B5               	movwf	___ftmul@f2+2
  4049  04A3  3000               	movlw	0
  4050  04A4  00B0               	movwf	___ftmul@f1
  4051  04A5  30F0               	movlw	240
  4052  04A6  00B1               	movwf	___ftmul@f1+1
  4053  04A7  3042               	movlw	66
  4054  04A8  00B2               	movwf	___ftmul@f1+2
  4055  04A9  120A  118A  22CD  120A  118A  	fcall	___ftmul
  4056  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  4057  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  4058  04B0  0830               	movf	?___ftmul,w
  4059  04B1  00C0               	movwf	___fttol@f1
  4060  04B2  0831               	movf	?___ftmul+1,w
  4061  04B3  00C1               	movwf	___fttol@f1+1
  4062  04B4  0832               	movf	?___ftmul+2,w
  4063  04B5  00C2               	movwf	___fttol@f1+2
  4064  04B6  120A  118A  257F  120A  118A  	fcall	___fttol
  4065  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  4066  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  4067  04BD  0841               	movf	?___fttol+1,w
  4068  04BE  01FD               	clrf	_rpm+1
  4069  04BF  07FD               	addwf	_rpm+1,f
  4070  04C0  0840               	movf	?___fttol,w
  4071  04C1  01FC               	clrf	_rpm
  4072  04C2  07FC               	addwf	_rpm,f
  4073                           
  4074                           ;main.c: 139: erro_atual = setpoint - rpm;
  4075  04C3  097C               	comf	_rpm,w
  4076  04C4  00CE               	movwf	??_ISR
  4077  04C5  097D               	comf	_rpm+1,w
  4078  04C6  00CF               	movwf	??_ISR+1
  4079  04C7  0ACE               	incf	??_ISR,f
  4080  04C8  1903               	skipnz
  4081  04C9  0ACF               	incf	??_ISR+1,f
  4082  04CA  0863               	movf	_setpoint,w
  4083  04CB  074E               	addwf	??_ISR,w
  4084  04CC  00DD               	movwf	_erro_atual
  4085  04CD  0864               	movf	_setpoint+1,w
  4086  04CE  1803               	skipnc
  4087  04CF  0A64               	incf	_setpoint+1,w
  4088  04D0  074F               	addwf	??_ISR+1,w
  4089  04D1  00DE               	movwf	_erro_atual+1
  4090                           
  4091                           ;main.c: 142: PWM_DutyCycle2(1024);
  4092  04D2  3000               	movlw	0
  4093  04D3  00F0               	movwf	i1PWM_DutyCycle2@valor
  4094  04D4  3004               	movlw	4
  4095  04D5  00F1               	movwf	i1PWM_DutyCycle2@valor+1
  4096  04D6  120A  158A  26CA  120A  118A  	fcall	i1_PWM_DutyCycle2
  4097                           
  4098                           ;main.c: 145: TMR1L = 0x00;
  4099  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  4100  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  4101  04DD  018E               	clrf	14	;volatile
  4102                           
  4103                           ;main.c: 146: TMR1H = 0x00;
  4104  04DE  018F               	clrf	15	;volatile
  4105                           
  4106                           ;main.c: 149: PORTBbits.RB6 = 0;
  4107  04DF  1306               	bcf	6,6	;volatile
  4108  04E0                     i1l2401:	
  4109                           
  4110                           ;main.c: 150: }
  4111                           ;main.c: 153: INTCONbits.T0IF = 0;
  4112  04E0  110B               	bcf	11,2	;volatile
  4113  04E1                     i1l2403:	
  4114                           
  4115                           ;main.c: 154: }
  4116                           ;main.c: 157: if (PIR1bits.TMR1IF)
  4117  04E1  180C               	btfsc	12,0	;volatile
  4118                           
  4119                           ;main.c: 158: {
  4120                           ;main.c: 162: PIR1bits.TMR1IF = 0;
  4121  04E2  100C               	bcf	12,0	;volatile
  4122                           
  4123                           ;main.c: 163: }
  4124                           ;main.c: 166: if (PIR1bits.SSPIF)
  4125  04E3  198C               	btfsc	12,3	;volatile
  4126                           
  4127                           ;main.c: 167: {
  4128                           ;main.c: 171: PIR1bits.SSPIF = 0;
  4129  04E4  118C               	bcf	12,3	;volatile
  4130  04E5  0853               	movf	??_ISR+5,w
  4131  04E6  00FF               	movwf	127
  4132  04E7  0852               	movf	??_ISR+4,w
  4133  04E8  008A               	movwf	10
  4134  04E9  0851               	movf	??_ISR+3,w
  4135  04EA  0084               	movwf	4
  4136  04EB  0E50               	swapf	(??_ISR+2)^0,w
  4137  04EC  0083               	movwf	3
  4138  04ED  0EFE               	swapf	126,f
  4139  04EE  0E7E               	swapf	126,w
  4140  04EF  0009               	retfie
  4141  04F0                     __end_of_ISR:	
  4142                           
  4143                           	psect	intentry
  4144  0004                     __pintentry:	
  4145                           ;incstack = 0
  4146                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  4147                           
  4148  0004                     interrupt_function:	
  4149  007E                     saved_w	set	btemp
  4150  0004  00FE               	movwf	btemp
  4151  0005  0E03               	swapf	3,w
  4152  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4153  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4154  0008  00D0               	movwf	??_ISR+2
  4155  0009  0804               	movf	4,w
  4156  000A  00D1               	movwf	??_ISR+3
  4157  000B  080A               	movf	10,w
  4158  000C  00D2               	movwf	??_ISR+4
  4159  000D  087F               	movf	btemp+1,w
  4160  000E  00D3               	movwf	??_ISR+5
  4161  000F  120A  118A  2C58   	ljmp	_ISR
  4162                           
  4163                           	psect	text21
  4164  0E5C                     __ptext21:	
  4165 ;; *************** function i1_TIMER0_Set *****************
  4166 ;; Defined at:
  4167 ;;		line 20 in file "C:\Users\332414\Desktop\FuzzySI\firmware\timers.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  contagens       1    wreg     unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  contagens       1    0[COMMON] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;		None               void
  4174 ;; Registers used:
  4175 ;;		wreg
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4181 ;;      Params:         0       0       0       0       0
  4182 ;;      Locals:         1       0       0       0       0
  4183 ;;      Temps:          0       0       0       0       0
  4184 ;;      Totals:         1       0       0       0       0
  4185 ;;Total ram usage:        1 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_ISR
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function i1_TIMER0_Set
  4196  0E5C                     i1_TIMER0_Set:	
  4197                           
  4198                           ;incstack = 0
  4199                           ; Regs used in i1_TIMER0_Set: [wreg]
  4200                           ;i1TIMER0_Set@contagens stored from wreg
  4201  0E5C  00F0               	movwf	i1TIMER0_Set@contagens
  4202                           
  4203                           ;timers.c: 22: TMR0 = contagens;
  4204  0E5D  0870               	movf	i1TIMER0_Set@contagens,w
  4205  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  4207  0E60  0081               	movwf	1	;volatile
  4208  0E61  0008               	return
  4209  0E62                     __end_ofi1_TIMER0_Set:	
  4210                           
  4211                           	psect	text22
  4212  0ECA                     __ptext22:	
  4213 ;; *************** function i1_PWM_DutyCycle2 *****************
  4214 ;; Defined at:
  4215 ;;		line 96 in file "C:\Users\332414\Desktop\FuzzySI\firmware\pwm.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  valor           2    0[COMMON] int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;		None               void
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         2       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0
  4231 ;;      Temps:          2       0       0       0       0
  4232 ;;      Totals:         4       0       0       0       0
  4233 ;;Total ram usage:        4 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_ISR
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function i1_PWM_DutyCycle2
  4244  0ECA                     i1_PWM_DutyCycle2:	
  4245                           
  4246                           ;pwm.c: 98: CCPR2L = valor >> 2;
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in i1_PWM_DutyCycle2: [wreg+status,2+status,0]
  4250  0ECA  0871               	movf	i1PWM_DutyCycle2@valor+1,w
  4251  0ECB  00F3               	movwf	??i1_PWM_DutyCycle2+1
  4252  0ECC  0870               	movf	i1PWM_DutyCycle2@valor,w
  4253  0ECD  00F2               	movwf	??i1_PWM_DutyCycle2
  4254  0ECE  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  4255  0ECF  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  4256  0ED0  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  4257  0ED1  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  4258  0ED2  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  4259  0ED3  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  4260  0ED4  0872               	movf	??i1_PWM_DutyCycle2,w
  4261  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  4262  0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  4263  0ED7  009B               	movwf	27	;volatile
  4264                           
  4265                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  4266  0ED8  0870               	movf	i1PWM_DutyCycle2@valor,w
  4267  0ED9  00F2               	movwf	??i1_PWM_DutyCycle2
  4268  0EDA  3003               	movlw	3
  4269  0EDB                     u230_25:	
  4270  0EDB  1003               	clrc
  4271  0EDC  0DF2               	rlf	??i1_PWM_DutyCycle2,f
  4272  0EDD  3EFF               	addlw	-1
  4273  0EDE  1D03               	skipz
  4274  0EDF  2EDB               	goto	u230_25
  4275  0EE0  1003               	clrc
  4276  0EE1  0D72               	rlf	??i1_PWM_DutyCycle2,w
  4277  0EE2  380C               	iorlw	12
  4278  0EE3  009D               	movwf	29	;volatile
  4279  0EE4  0008               	return
  4280  0EE5                     __end_ofi1_PWM_DutyCycle2:	
  4281                           
  4282                           	psect	text23
  4283  0E9F                     __ptext23:	
  4284 ;; *************** function ___lwtoft *****************
  4285 ;; Defined at:
  4286 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  c               2    8[COMMON] unsigned int 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  3    8[COMMON] float 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, pclath, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4300 ;;      Params:         3       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0
  4302 ;;      Temps:          1       0       0       0       0
  4303 ;;      Totals:         4       0       0       0       0
  4304 ;;Total ram usage:        4 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    1
  4307 ;; This function calls:
  4308 ;;		___ftpack
  4309 ;; This function is called by:
  4310 ;;		_ISR
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function ___lwtoft
  4316  0E9F                     ___lwtoft:	
  4317                           
  4318                           ;incstack = 0
  4319                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4320  0E9F  0878               	movf	___lwtoft@c,w
  4321  0EA0  00F0               	movwf	___ftpack@arg
  4322  0EA1  0879               	movf	___lwtoft@c+1,w
  4323  0EA2  00F1               	movwf	___ftpack@arg+1
  4324  0EA3  01F2               	clrf	___ftpack@arg+2
  4325  0EA4  308E               	movlw	142
  4326  0EA5  00FB               	movwf	??___lwtoft
  4327  0EA6  087B               	movf	??___lwtoft,w
  4328  0EA7  00F3               	movwf	___ftpack@exp
  4329  0EA8  01F4               	clrf	___ftpack@sign
  4330  0EA9  120A  118A  2678   	fcall	___ftpack
  4331  0EAC  0870               	movf	?___ftpack,w
  4332  0EAD  00F8               	movwf	?___lwtoft
  4333  0EAE  0871               	movf	?___ftpack+1,w
  4334  0EAF  00F9               	movwf	?___lwtoft+1
  4335  0EB0  0872               	movf	?___ftpack+2,w
  4336  0EB1  00FA               	movwf	?___lwtoft+2
  4337  0EB2  0008               	return
  4338  0EB3                     __end_of___lwtoft:	
  4339                           
  4340                           	psect	text24
  4341  057F                     __ptext24:	
  4342 ;; *************** function ___fttol *****************
  4343 ;; Defined at:
  4344 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  f1              3   32[BANK0 ] float 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  lval            4   41[BANK0 ] unsigned long 
  4349 ;;  exp1            1   45[BANK0 ] unsigned char 
  4350 ;;  sign1           1   40[BANK0 ] unsigned char 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  4   32[BANK0 ] long 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2, status,0
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4360 ;;      Params:         0       4       0       0       0
  4361 ;;      Locals:         0       6       0       0       0
  4362 ;;      Temps:          0       4       0       0       0
  4363 ;;      Totals:         0      14       0       0       0
  4364 ;;Total ram usage:       14 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_ISR
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function ___fttol
  4375  057F                     ___fttol:	
  4376                           
  4377                           ;incstack = 0
  4378                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4379  057F  1283               	bcf	3,5	;RP0=0, select bank0
  4380  0580  1303               	bcf	3,6	;RP1=0, select bank0
  4381  0581  0840               	movf	___fttol@f1,w
  4382  0582  00C4               	movwf	??___fttol
  4383  0583  0841               	movf	___fttol@f1+1,w
  4384  0584  00C5               	movwf	??___fttol+1
  4385  0585  0842               	movf	___fttol@f1+2,w
  4386  0586  00C6               	movwf	??___fttol+2
  4387  0587  1003               	clrc
  4388  0588  0D45               	rlf	??___fttol+1,w
  4389  0589  0D46               	rlf	??___fttol+2,w
  4390  058A  00C7               	movwf	??___fttol+3
  4391  058B  0847               	movf	??___fttol+3,w
  4392  058C  00CD               	movwf	___fttol@exp1
  4393  058D  08CD               	movf	___fttol@exp1,f
  4394  058E  1D03               	skipz
  4395  058F  2D99               	goto	i1l2273
  4396  0590  3000               	movlw	0
  4397  0591  00C3               	movwf	?___fttol+3
  4398  0592  3000               	movlw	0
  4399  0593  00C2               	movwf	?___fttol+2
  4400  0594  3000               	movlw	0
  4401  0595  00C1               	movwf	?___fttol+1
  4402  0596  3000               	movlw	0
  4403  0597  00C0               	movwf	?___fttol
  4404  0598  0008               	return
  4405  0599                     i1l2273:	
  4406  0599  0840               	movf	___fttol@f1,w
  4407  059A  00C4               	movwf	??___fttol
  4408  059B  0841               	movf	___fttol@f1+1,w
  4409  059C  00C5               	movwf	??___fttol+1
  4410  059D  0842               	movf	___fttol@f1+2,w
  4411  059E  00C6               	movwf	??___fttol+2
  4412  059F  3017               	movlw	23
  4413  05A0                     u221_25:	
  4414  05A0  1003               	clrc
  4415  05A1  0CC6               	rrf	??___fttol+2,f
  4416  05A2  0CC5               	rrf	??___fttol+1,f
  4417  05A3  0CC4               	rrf	??___fttol,f
  4418  05A4  3EFF               	addlw	-1
  4419  05A5  1D03               	skipz
  4420  05A6  2DA0               	goto	u221_25
  4421  05A7  0844               	movf	??___fttol,w
  4422  05A8  00C7               	movwf	??___fttol+3
  4423  05A9  0847               	movf	??___fttol+3,w
  4424  05AA  00C8               	movwf	___fttol@sign1
  4425  05AB  17C1               	bsf	___fttol@f1+1,7
  4426  05AC  30FF               	movlw	255
  4427  05AD  05C0               	andwf	___fttol@f1,f
  4428  05AE  30FF               	movlw	255
  4429  05AF  05C1               	andwf	___fttol@f1+1,f
  4430  05B0  3000               	movlw	0
  4431  05B1  05C2               	andwf	___fttol@f1+2,f
  4432  05B2  0840               	movf	___fttol@f1,w
  4433  05B3  00C9               	movwf	___fttol@lval
  4434  05B4  0841               	movf	___fttol@f1+1,w
  4435  05B5  00CA               	movwf	___fttol@lval+1
  4436  05B6  0842               	movf	___fttol@f1+2,w
  4437  05B7  00CB               	movwf	___fttol@lval+2
  4438  05B8  01CC               	clrf	___fttol@lval+3
  4439  05B9  308E               	movlw	142
  4440  05BA  02CD               	subwf	___fttol@exp1,f
  4441  05BB  1FCD               	btfss	___fttol@exp1,7
  4442  05BC  2DDB               	goto	i1l2293
  4443  05BD  084D               	movf	___fttol@exp1,w
  4444  05BE  3A80               	xorlw	128
  4445  05BF  3E8F               	addlw	143
  4446  05C0  1803               	skipnc
  4447  05C1  2DCB               	goto	i1l2291
  4448  05C2  3000               	movlw	0
  4449  05C3  00C3               	movwf	?___fttol+3
  4450  05C4  3000               	movlw	0
  4451  05C5  00C2               	movwf	?___fttol+2
  4452  05C6  3000               	movlw	0
  4453  05C7  00C1               	movwf	?___fttol+1
  4454  05C8  3000               	movlw	0
  4455  05C9  00C0               	movwf	?___fttol
  4456  05CA  0008               	return
  4457  05CB                     i1l2291:	
  4458  05CB  3001               	movlw	1
  4459  05CC                     u224_25:	
  4460  05CC  1003               	clrc
  4461  05CD  0CCC               	rrf	___fttol@lval+3,f
  4462  05CE  0CCB               	rrf	___fttol@lval+2,f
  4463  05CF  0CCA               	rrf	___fttol@lval+1,f
  4464  05D0  0CC9               	rrf	___fttol@lval,f
  4465  05D1  3EFF               	addlw	-1
  4466  05D2  1D03               	skipz
  4467  05D3  2DCC               	goto	u224_25
  4468  05D4  3001               	movlw	1
  4469  05D5  00C4               	movwf	??___fttol
  4470  05D6  0844               	movf	??___fttol,w
  4471  05D7  07CD               	addwf	___fttol@exp1,f
  4472  05D8  1903               	btfsc	3,2
  4473  05D9  2DF6               	goto	i1l2303
  4474  05DA  2DCB               	goto	i1l2291
  4475  05DB                     i1l2293:	
  4476  05DB  3018               	movlw	24
  4477  05DC  024D               	subwf	___fttol@exp1,w
  4478  05DD  1C03               	skipc
  4479  05DE  2DF3               	goto	i1l2301
  4480  05DF  3000               	movlw	0
  4481  05E0  00C3               	movwf	?___fttol+3
  4482  05E1  3000               	movlw	0
  4483  05E2  00C2               	movwf	?___fttol+2
  4484  05E3  3000               	movlw	0
  4485  05E4  00C1               	movwf	?___fttol+1
  4486  05E5  3000               	movlw	0
  4487  05E6  00C0               	movwf	?___fttol
  4488  05E7  0008               	return
  4489  05E8                     i1l2299:	
  4490  05E8  3001               	movlw	1
  4491  05E9  00C4               	movwf	??___fttol
  4492  05EA                     u227_25:	
  4493  05EA  1003               	clrc
  4494  05EB  0DC9               	rlf	___fttol@lval,f
  4495  05EC  0DCA               	rlf	___fttol@lval+1,f
  4496  05ED  0DCB               	rlf	___fttol@lval+2,f
  4497  05EE  0DCC               	rlf	___fttol@lval+3,f
  4498  05EF  0BC4               	decfsz	??___fttol,f
  4499  05F0  2DEA               	goto	u227_25
  4500  05F1  3001               	movlw	1
  4501  05F2  02CD               	subwf	___fttol@exp1,f
  4502  05F3                     i1l2301:	
  4503  05F3  08CD               	movf	___fttol@exp1,f
  4504  05F4  1D03               	skipz
  4505  05F5  2DE8               	goto	i1l2299
  4506  05F6                     i1l2303:	
  4507  05F6  0848               	movf	___fttol@sign1,w
  4508  05F7  1903               	btfsc	3,2
  4509  05F8  2E04               	goto	i1l2307
  4510  05F9  09C9               	comf	___fttol@lval,f
  4511  05FA  09CA               	comf	___fttol@lval+1,f
  4512  05FB  09CB               	comf	___fttol@lval+2,f
  4513  05FC  09CC               	comf	___fttol@lval+3,f
  4514  05FD  0AC9               	incf	___fttol@lval,f
  4515  05FE  1903               	skipnz
  4516  05FF  0ACA               	incf	___fttol@lval+1,f
  4517  0600  1903               	skipnz
  4518  0601  0ACB               	incf	___fttol@lval+2,f
  4519  0602  1903               	skipnz
  4520  0603  0ACC               	incf	___fttol@lval+3,f
  4521  0604                     i1l2307:	
  4522  0604  084C               	movf	___fttol@lval+3,w
  4523  0605  00C3               	movwf	?___fttol+3
  4524  0606  084B               	movf	___fttol@lval+2,w
  4525  0607  00C2               	movwf	?___fttol+2
  4526  0608  084A               	movf	___fttol@lval+1,w
  4527  0609  00C1               	movwf	?___fttol+1
  4528  060A  0849               	movf	___fttol@lval,w
  4529  060B  00C0               	movwf	?___fttol
  4530  060C  0008               	return
  4531  060D                     __end_of___fttol:	
  4532                           
  4533                           	psect	text25
  4534  02CD                     __ptext25:	
  4535 ;; *************** function ___ftmul *****************
  4536 ;; Defined at:
  4537 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  f1              3   16[BANK0 ] float 
  4540 ;;  f2              3   19[BANK0 ] float 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4543 ;;  sign            1   31[BANK0 ] unsigned char 
  4544 ;;  cntr            1   30[BANK0 ] unsigned char 
  4545 ;;  exp             1   26[BANK0 ] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  3   16[BANK0 ] float 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0, pclath, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4555 ;;      Params:         0       6       0       0       0
  4556 ;;      Locals:         0       6       0       0       0
  4557 ;;      Temps:          0       4       0       0       0
  4558 ;;      Totals:         0      16       0       0       0
  4559 ;;Total ram usage:       16 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    1
  4562 ;; This function calls:
  4563 ;;		___ftpack
  4564 ;; This function is called by:
  4565 ;;		_ISR
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           
  4570                           ;psect for function ___ftmul
  4571  02CD                     ___ftmul:	
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4575  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  4576  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  4577  02CF  0830               	movf	___ftmul@f1,w
  4578  02D0  00B6               	movwf	??___ftmul
  4579  02D1  0831               	movf	___ftmul@f1+1,w
  4580  02D2  00B7               	movwf	??___ftmul+1
  4581  02D3  0832               	movf	___ftmul@f1+2,w
  4582  02D4  00B8               	movwf	??___ftmul+2
  4583  02D5  1003               	clrc
  4584  02D6  0D37               	rlf	??___ftmul+1,w
  4585  02D7  0D38               	rlf	??___ftmul+2,w
  4586  02D8  00B9               	movwf	??___ftmul+3
  4587  02D9  0839               	movf	??___ftmul+3,w
  4588  02DA  00BA               	movwf	___ftmul@exp
  4589  02DB  08BA               	movf	___ftmul@exp,f
  4590  02DC  1D03               	skipz
  4591  02DD  2AE5               	goto	i1l2223
  4592  02DE  3000               	movlw	0
  4593  02DF  00B0               	movwf	?___ftmul
  4594  02E0  3000               	movlw	0
  4595  02E1  00B1               	movwf	?___ftmul+1
  4596  02E2  3000               	movlw	0
  4597  02E3  00B2               	movwf	?___ftmul+2
  4598  02E4  0008               	return
  4599  02E5                     i1l2223:	
  4600  02E5  0833               	movf	___ftmul@f2,w
  4601  02E6  00B6               	movwf	??___ftmul
  4602  02E7  0834               	movf	___ftmul@f2+1,w
  4603  02E8  00B7               	movwf	??___ftmul+1
  4604  02E9  0835               	movf	___ftmul@f2+2,w
  4605  02EA  00B8               	movwf	??___ftmul+2
  4606  02EB  1003               	clrc
  4607  02EC  0D37               	rlf	??___ftmul+1,w
  4608  02ED  0D38               	rlf	??___ftmul+2,w
  4609  02EE  00B9               	movwf	??___ftmul+3
  4610  02EF  0839               	movf	??___ftmul+3,w
  4611  02F0  00BF               	movwf	___ftmul@sign
  4612  02F1  08BF               	movf	___ftmul@sign,f
  4613  02F2  1D03               	skipz
  4614  02F3  2AFB               	goto	i1l2229
  4615  02F4  3000               	movlw	0
  4616  02F5  00B0               	movwf	?___ftmul
  4617  02F6  3000               	movlw	0
  4618  02F7  00B1               	movwf	?___ftmul+1
  4619  02F8  3000               	movlw	0
  4620  02F9  00B2               	movwf	?___ftmul+2
  4621  02FA  0008               	return
  4622  02FB                     i1l2229:	
  4623  02FB  083F               	movf	___ftmul@sign,w
  4624  02FC  3E7B               	addlw	123
  4625  02FD  00B6               	movwf	??___ftmul
  4626  02FE  0836               	movf	??___ftmul,w
  4627  02FF  07BA               	addwf	___ftmul@exp,f
  4628  0300  0830               	movf	___ftmul@f1,w
  4629  0301  00B6               	movwf	??___ftmul
  4630  0302  0831               	movf	___ftmul@f1+1,w
  4631  0303  00B7               	movwf	??___ftmul+1
  4632  0304  0832               	movf	___ftmul@f1+2,w
  4633  0305  00B8               	movwf	??___ftmul+2
  4634  0306  3010               	movlw	16
  4635  0307                     u208_25:	
  4636  0307  1003               	clrc
  4637  0308  0CB8               	rrf	??___ftmul+2,f
  4638  0309  0CB7               	rrf	??___ftmul+1,f
  4639  030A  0CB6               	rrf	??___ftmul,f
  4640  030B  3EFF               	addlw	-1
  4641  030C  1D03               	skipz
  4642  030D  2B07               	goto	u208_25
  4643  030E  0836               	movf	??___ftmul,w
  4644  030F  00B9               	movwf	??___ftmul+3
  4645  0310  0839               	movf	??___ftmul+3,w
  4646  0311  00BF               	movwf	___ftmul@sign
  4647  0312  0833               	movf	___ftmul@f2,w
  4648  0313  00B6               	movwf	??___ftmul
  4649  0314  0834               	movf	___ftmul@f2+1,w
  4650  0315  00B7               	movwf	??___ftmul+1
  4651  0316  0835               	movf	___ftmul@f2+2,w
  4652  0317  00B8               	movwf	??___ftmul+2
  4653  0318  3010               	movlw	16
  4654  0319                     u209_25:	
  4655  0319  1003               	clrc
  4656  031A  0CB8               	rrf	??___ftmul+2,f
  4657  031B  0CB7               	rrf	??___ftmul+1,f
  4658  031C  0CB6               	rrf	??___ftmul,f
  4659  031D  3EFF               	addlw	-1
  4660  031E  1D03               	skipz
  4661  031F  2B19               	goto	u209_25
  4662  0320  0836               	movf	??___ftmul,w
  4663  0321  00B9               	movwf	??___ftmul+3
  4664  0322  0839               	movf	??___ftmul+3,w
  4665  0323  06BF               	xorwf	___ftmul@sign,f
  4666  0324  3080               	movlw	128
  4667  0325  00B6               	movwf	??___ftmul
  4668  0326  0836               	movf	??___ftmul,w
  4669  0327  05BF               	andwf	___ftmul@sign,f
  4670  0328  17B1               	bsf	___ftmul@f1+1,7
  4671  0329  17B4               	bsf	___ftmul@f2+1,7
  4672  032A  30FF               	movlw	255
  4673  032B  05B3               	andwf	___ftmul@f2,f
  4674  032C  30FF               	movlw	255
  4675  032D  05B4               	andwf	___ftmul@f2+1,f
  4676  032E  3000               	movlw	0
  4677  032F  05B5               	andwf	___ftmul@f2+2,f
  4678  0330  3000               	movlw	0
  4679  0331  00BB               	movwf	___ftmul@f3_as_product
  4680  0332  3000               	movlw	0
  4681  0333  00BC               	movwf	___ftmul@f3_as_product+1
  4682  0334  3000               	movlw	0
  4683  0335  00BD               	movwf	___ftmul@f3_as_product+2
  4684  0336  3007               	movlw	7
  4685  0337  00B6               	movwf	??___ftmul
  4686  0338  0836               	movf	??___ftmul,w
  4687  0339  00BE               	movwf	___ftmul@cntr
  4688  033A                     i1l2241:	
  4689  033A  1C30               	btfss	___ftmul@f1,0
  4690  033B  2B4A               	goto	i1l2245
  4691  033C  0833               	movf	___ftmul@f2,w
  4692  033D  07BB               	addwf	___ftmul@f3_as_product,f
  4693  033E  0834               	movf	___ftmul@f2+1,w
  4694  033F  1103               	clrz
  4695  0340  1803               	skipnc
  4696  0341  0A34               	incf	___ftmul@f2+1,w
  4697  0342  1D03               	btfss	3,2
  4698  0343  07BC               	addwf	___ftmul@f3_as_product+1,f
  4699  0344  0835               	movf	___ftmul@f2+2,w
  4700  0345  1103               	clrz
  4701  0346  1803               	skipnc
  4702  0347  0A35               	incf	___ftmul@f2+2,w
  4703  0348  1D03               	btfss	3,2
  4704  0349  07BD               	addwf	___ftmul@f3_as_product+2,f
  4705  034A                     i1l2245:	
  4706  034A  3001               	movlw	1
  4707  034B                     u212_25:	
  4708  034B  1003               	clrc
  4709  034C  0CB2               	rrf	___ftmul@f1+2,f
  4710  034D  0CB1               	rrf	___ftmul@f1+1,f
  4711  034E  0CB0               	rrf	___ftmul@f1,f
  4712  034F  3EFF               	addlw	-1
  4713  0350  1D03               	skipz
  4714  0351  2B4B               	goto	u212_25
  4715  0352  3001               	movlw	1
  4716  0353                     u213_25:	
  4717  0353  1003               	clrc
  4718  0354  0DB3               	rlf	___ftmul@f2,f
  4719  0355  0DB4               	rlf	___ftmul@f2+1,f
  4720  0356  0DB5               	rlf	___ftmul@f2+2,f
  4721  0357  3EFF               	addlw	-1
  4722  0358  1D03               	skipz
  4723  0359  2B53               	goto	u213_25
  4724  035A  3001               	movlw	1
  4725  035B  02BE               	subwf	___ftmul@cntr,f
  4726  035C  1D03               	btfss	3,2
  4727  035D  2B3A               	goto	i1l2241
  4728  035E  3009               	movlw	9
  4729  035F  00B6               	movwf	??___ftmul
  4730  0360  0836               	movf	??___ftmul,w
  4731  0361  00BE               	movwf	___ftmul@cntr
  4732  0362                     i1l2253:	
  4733  0362  1C30               	btfss	___ftmul@f1,0
  4734  0363  2B72               	goto	i1l2257
  4735  0364  0833               	movf	___ftmul@f2,w
  4736  0365  07BB               	addwf	___ftmul@f3_as_product,f
  4737  0366  0834               	movf	___ftmul@f2+1,w
  4738  0367  1103               	clrz
  4739  0368  1803               	skipnc
  4740  0369  0A34               	incf	___ftmul@f2+1,w
  4741  036A  1D03               	btfss	3,2
  4742  036B  07BC               	addwf	___ftmul@f3_as_product+1,f
  4743  036C  0835               	movf	___ftmul@f2+2,w
  4744  036D  1103               	clrz
  4745  036E  1803               	skipnc
  4746  036F  0A35               	incf	___ftmul@f2+2,w
  4747  0370  1D03               	btfss	3,2
  4748  0371  07BD               	addwf	___ftmul@f3_as_product+2,f
  4749  0372                     i1l2257:	
  4750  0372  3001               	movlw	1
  4751  0373                     u217_25:	
  4752  0373  1003               	clrc
  4753  0374  0CB2               	rrf	___ftmul@f1+2,f
  4754  0375  0CB1               	rrf	___ftmul@f1+1,f
  4755  0376  0CB0               	rrf	___ftmul@f1,f
  4756  0377  3EFF               	addlw	-1
  4757  0378  1D03               	skipz
  4758  0379  2B73               	goto	u217_25
  4759  037A  3001               	movlw	1
  4760  037B                     u218_25:	
  4761  037B  1003               	clrc
  4762  037C  0CBD               	rrf	___ftmul@f3_as_product+2,f
  4763  037D  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4764  037E  0CBB               	rrf	___ftmul@f3_as_product,f
  4765  037F  3EFF               	addlw	-1
  4766  0380  1D03               	skipz
  4767  0381  2B7B               	goto	u218_25
  4768  0382  3001               	movlw	1
  4769  0383  02BE               	subwf	___ftmul@cntr,f
  4770  0384  1D03               	btfss	3,2
  4771  0385  2B62               	goto	i1l2253
  4772  0386  083B               	movf	___ftmul@f3_as_product,w
  4773  0387  00F0               	movwf	___ftpack@arg
  4774  0388  083C               	movf	___ftmul@f3_as_product+1,w
  4775  0389  00F1               	movwf	___ftpack@arg+1
  4776  038A  083D               	movf	___ftmul@f3_as_product+2,w
  4777  038B  00F2               	movwf	___ftpack@arg+2
  4778  038C  083A               	movf	___ftmul@exp,w
  4779  038D  00B6               	movwf	??___ftmul
  4780  038E  0836               	movf	??___ftmul,w
  4781  038F  00F3               	movwf	___ftpack@exp
  4782  0390  083F               	movf	___ftmul@sign,w
  4783  0391  00B7               	movwf	??___ftmul+1
  4784  0392  0837               	movf	??___ftmul+1,w
  4785  0393  00F4               	movwf	___ftpack@sign
  4786  0394  120A  118A  2678   	fcall	___ftpack
  4787  0397  0870               	movf	?___ftpack,w
  4788  0398  1283               	bcf	3,5	;RP0=0, select bank0
  4789  0399  1303               	bcf	3,6	;RP1=0, select bank0
  4790  039A  00B0               	movwf	?___ftmul
  4791  039B  0871               	movf	?___ftpack+1,w
  4792  039C  00B1               	movwf	?___ftmul+1
  4793  039D  0872               	movf	?___ftpack+2,w
  4794  039E  00B2               	movwf	?___ftmul+2
  4795  039F  0008               	return
  4796  03A0                     __end_of___ftmul:	
  4797                           
  4798                           	psect	text26
  4799  03A0                     __ptext26:	
  4800 ;; *************** function ___ftdiv *****************
  4801 ;; Defined at:
  4802 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic\ftdiv.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  f2              3    0[BANK0 ] float 
  4805 ;;  f1              3    3[BANK0 ] float 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  f3              3   11[BANK0 ] float 
  4808 ;;  sign            1   15[BANK0 ] unsigned char 
  4809 ;;  exp             1   14[BANK0 ] unsigned char 
  4810 ;;  cntr            1   10[BANK0 ] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  3    0[BANK0 ] float 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0, pclath, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4820 ;;      Params:         0       6       0       0       0
  4821 ;;      Locals:         0       6       0       0       0
  4822 ;;      Temps:          0       4       0       0       0
  4823 ;;      Totals:         0      16       0       0       0
  4824 ;;Total ram usage:       16 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    1
  4827 ;; This function calls:
  4828 ;;		___ftpack
  4829 ;; This function is called by:
  4830 ;;		_ISR
  4831 ;;		_triangular
  4832 ;;		_trapezoidal
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function ___ftdiv
  4838  03A0                     ___ftdiv:	
  4839                           
  4840                           ;incstack = 0
  4841                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4842  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  4843  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  4844  03A2  0823               	movf	___ftdiv@f1,w
  4845  03A3  00A6               	movwf	??___ftdiv
  4846  03A4  0824               	movf	___ftdiv@f1+1,w
  4847  03A5  00A7               	movwf	??___ftdiv+1
  4848  03A6  0825               	movf	___ftdiv@f1+2,w
  4849  03A7  00A8               	movwf	??___ftdiv+2
  4850  03A8  1003               	clrc
  4851  03A9  0D27               	rlf	??___ftdiv+1,w
  4852  03AA  0D28               	rlf	??___ftdiv+2,w
  4853  03AB  00A9               	movwf	??___ftdiv+3
  4854  03AC  0829               	movf	??___ftdiv+3,w
  4855  03AD  00AE               	movwf	___ftdiv@exp
  4856  03AE  08AE               	movf	___ftdiv@exp,f
  4857  03AF  1D03               	skipz
  4858  03B0  2BB8               	goto	i1l2181
  4859  03B1  3000               	movlw	0
  4860  03B2  00A0               	movwf	?___ftdiv
  4861  03B3  3000               	movlw	0
  4862  03B4  00A1               	movwf	?___ftdiv+1
  4863  03B5  3000               	movlw	0
  4864  03B6  00A2               	movwf	?___ftdiv+2
  4865  03B7  0008               	return
  4866  03B8                     i1l2181:	
  4867  03B8  0820               	movf	___ftdiv@f2,w
  4868  03B9  00A6               	movwf	??___ftdiv
  4869  03BA  0821               	movf	___ftdiv@f2+1,w
  4870  03BB  00A7               	movwf	??___ftdiv+1
  4871  03BC  0822               	movf	___ftdiv@f2+2,w
  4872  03BD  00A8               	movwf	??___ftdiv+2
  4873  03BE  1003               	clrc
  4874  03BF  0D27               	rlf	??___ftdiv+1,w
  4875  03C0  0D28               	rlf	??___ftdiv+2,w
  4876  03C1  00A9               	movwf	??___ftdiv+3
  4877  03C2  0829               	movf	??___ftdiv+3,w
  4878  03C3  00AF               	movwf	___ftdiv@sign
  4879  03C4  08AF               	movf	___ftdiv@sign,f
  4880  03C5  1D03               	skipz
  4881  03C6  2BCE               	goto	i1l2187
  4882  03C7  3000               	movlw	0
  4883  03C8  00A0               	movwf	?___ftdiv
  4884  03C9  3000               	movlw	0
  4885  03CA  00A1               	movwf	?___ftdiv+1
  4886  03CB  3000               	movlw	0
  4887  03CC  00A2               	movwf	?___ftdiv+2
  4888  03CD  0008               	return
  4889  03CE                     i1l2187:	
  4890  03CE  3000               	movlw	0
  4891  03CF  00AB               	movwf	___ftdiv@f3
  4892  03D0  3000               	movlw	0
  4893  03D1  00AC               	movwf	___ftdiv@f3+1
  4894  03D2  3000               	movlw	0
  4895  03D3  00AD               	movwf	___ftdiv@f3+2
  4896  03D4  3089               	movlw	137
  4897  03D5  072F               	addwf	___ftdiv@sign,w
  4898  03D6  00A6               	movwf	??___ftdiv
  4899  03D7  0826               	movf	??___ftdiv,w
  4900  03D8  02AE               	subwf	___ftdiv@exp,f
  4901  03D9  0823               	movf	___ftdiv@f1,w
  4902  03DA  00A6               	movwf	??___ftdiv
  4903  03DB  0824               	movf	___ftdiv@f1+1,w
  4904  03DC  00A7               	movwf	??___ftdiv+1
  4905  03DD  0825               	movf	___ftdiv@f1+2,w
  4906  03DE  00A8               	movwf	??___ftdiv+2
  4907  03DF  3010               	movlw	16
  4908  03E0                     u200_25:	
  4909  03E0  1003               	clrc
  4910  03E1  0CA8               	rrf	??___ftdiv+2,f
  4911  03E2  0CA7               	rrf	??___ftdiv+1,f
  4912  03E3  0CA6               	rrf	??___ftdiv,f
  4913  03E4  3EFF               	addlw	-1
  4914  03E5  1D03               	skipz
  4915  03E6  2BE0               	goto	u200_25
  4916  03E7  0826               	movf	??___ftdiv,w
  4917  03E8  00A9               	movwf	??___ftdiv+3
  4918  03E9  0829               	movf	??___ftdiv+3,w
  4919  03EA  00AF               	movwf	___ftdiv@sign
  4920  03EB  0820               	movf	___ftdiv@f2,w
  4921  03EC  00A6               	movwf	??___ftdiv
  4922  03ED  0821               	movf	___ftdiv@f2+1,w
  4923  03EE  00A7               	movwf	??___ftdiv+1
  4924  03EF  0822               	movf	___ftdiv@f2+2,w
  4925  03F0  00A8               	movwf	??___ftdiv+2
  4926  03F1  3010               	movlw	16
  4927  03F2                     u201_25:	
  4928  03F2  1003               	clrc
  4929  03F3  0CA8               	rrf	??___ftdiv+2,f
  4930  03F4  0CA7               	rrf	??___ftdiv+1,f
  4931  03F5  0CA6               	rrf	??___ftdiv,f
  4932  03F6  3EFF               	addlw	-1
  4933  03F7  1D03               	skipz
  4934  03F8  2BF2               	goto	u201_25
  4935  03F9  0826               	movf	??___ftdiv,w
  4936  03FA  00A9               	movwf	??___ftdiv+3
  4937  03FB  0829               	movf	??___ftdiv+3,w
  4938  03FC  06AF               	xorwf	___ftdiv@sign,f
  4939  03FD  3080               	movlw	128
  4940  03FE  00A6               	movwf	??___ftdiv
  4941  03FF  0826               	movf	??___ftdiv,w
  4942  0400  05AF               	andwf	___ftdiv@sign,f
  4943  0401  17A4               	bsf	___ftdiv@f1+1,7
  4944  0402  30FF               	movlw	255
  4945  0403  05A3               	andwf	___ftdiv@f1,f
  4946  0404  30FF               	movlw	255
  4947  0405  05A4               	andwf	___ftdiv@f1+1,f
  4948  0406  3000               	movlw	0
  4949  0407  05A5               	andwf	___ftdiv@f1+2,f
  4950  0408  17A1               	bsf	___ftdiv@f2+1,7
  4951  0409  30FF               	movlw	255
  4952  040A  05A0               	andwf	___ftdiv@f2,f
  4953  040B  30FF               	movlw	255
  4954  040C  05A1               	andwf	___ftdiv@f2+1,f
  4955  040D  3000               	movlw	0
  4956  040E  05A2               	andwf	___ftdiv@f2+2,f
  4957  040F  3018               	movlw	24
  4958  0410  00A6               	movwf	??___ftdiv
  4959  0411  0826               	movf	??___ftdiv,w
  4960  0412  00AA               	movwf	___ftdiv@cntr
  4961  0413                     i1l2201:	
  4962  0413  3001               	movlw	1
  4963  0414                     u202_25:	
  4964  0414  1003               	clrc
  4965  0415  0DAB               	rlf	___ftdiv@f3,f
  4966  0416  0DAC               	rlf	___ftdiv@f3+1,f
  4967  0417  0DAD               	rlf	___ftdiv@f3+2,f
  4968  0418  3EFF               	addlw	-1
  4969  0419  1D03               	skipz
  4970  041A  2C14               	goto	u202_25
  4971  041B  0822               	movf	___ftdiv@f2+2,w
  4972  041C  0225               	subwf	___ftdiv@f1+2,w
  4973  041D  1D03               	skipz
  4974  041E  2C25               	goto	u203_25
  4975  041F  0821               	movf	___ftdiv@f2+1,w
  4976  0420  0224               	subwf	___ftdiv@f1+1,w
  4977  0421  1D03               	skipz
  4978  0422  2C25               	goto	u203_25
  4979  0423  0820               	movf	___ftdiv@f2,w
  4980  0424  0223               	subwf	___ftdiv@f1,w
  4981  0425                     u203_25:	
  4982  0425  1C03               	skipc
  4983  0426  2C32               	goto	i1l2209
  4984  0427  0820               	movf	___ftdiv@f2,w
  4985  0428  02A3               	subwf	___ftdiv@f1,f
  4986  0429  0821               	movf	___ftdiv@f2+1,w
  4987  042A  1C03               	skipc
  4988  042B  0F21               	incfsz	___ftdiv@f2+1,w
  4989  042C  02A4               	subwf	___ftdiv@f1+1,f
  4990  042D  0822               	movf	___ftdiv@f2+2,w
  4991  042E  1C03               	skipc
  4992  042F  0A22               	incf	___ftdiv@f2+2,w
  4993  0430  02A5               	subwf	___ftdiv@f1+2,f
  4994  0431  142B               	bsf	___ftdiv@f3,0
  4995  0432                     i1l2209:	
  4996  0432  3001               	movlw	1
  4997  0433                     u204_25:	
  4998  0433  1003               	clrc
  4999  0434  0DA3               	rlf	___ftdiv@f1,f
  5000  0435  0DA4               	rlf	___ftdiv@f1+1,f
  5001  0436  0DA5               	rlf	___ftdiv@f1+2,f
  5002  0437  3EFF               	addlw	-1
  5003  0438  1D03               	skipz
  5004  0439  2C33               	goto	u204_25
  5005  043A  3001               	movlw	1
  5006  043B  02AA               	subwf	___ftdiv@cntr,f
  5007  043C  1D03               	btfss	3,2
  5008  043D  2C13               	goto	i1l2201
  5009  043E  082B               	movf	___ftdiv@f3,w
  5010  043F  00F0               	movwf	___ftpack@arg
  5011  0440  082C               	movf	___ftdiv@f3+1,w
  5012  0441  00F1               	movwf	___ftpack@arg+1
  5013  0442  082D               	movf	___ftdiv@f3+2,w
  5014  0443  00F2               	movwf	___ftpack@arg+2
  5015  0444  082E               	movf	___ftdiv@exp,w
  5016  0445  00A6               	movwf	??___ftdiv
  5017  0446  0826               	movf	??___ftdiv,w
  5018  0447  00F3               	movwf	___ftpack@exp
  5019  0448  082F               	movf	___ftdiv@sign,w
  5020  0449  00A7               	movwf	??___ftdiv+1
  5021  044A  0827               	movf	??___ftdiv+1,w
  5022  044B  00F4               	movwf	___ftpack@sign
  5023  044C  120A  118A  2678   	fcall	___ftpack
  5024  044F  0870               	movf	?___ftpack,w
  5025  0450  1283               	bcf	3,5	;RP0=0, select bank0
  5026  0451  1303               	bcf	3,6	;RP1=0, select bank0
  5027  0452  00A0               	movwf	?___ftdiv
  5028  0453  0871               	movf	?___ftpack+1,w
  5029  0454  00A1               	movwf	?___ftdiv+1
  5030  0455  0872               	movf	?___ftpack+2,w
  5031  0456  00A2               	movwf	?___ftdiv+2
  5032  0457  0008               	return
  5033  0458                     __end_of___ftdiv:	
  5034                           
  5035                           	psect	text27
  5036  0678                     __ptext27:	
  5037 ;; *************** function ___ftpack *****************
  5038 ;; Defined at:
  5039 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;  arg             3    0[COMMON] unsigned um
  5042 ;;  exp             1    3[COMMON] unsigned char 
  5043 ;;  sign            1    4[COMMON] unsigned char 
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;		None
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  3    0[COMMON] float 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5055 ;;      Params:         5       0       0       0       0
  5056 ;;      Locals:         0       0       0       0       0
  5057 ;;      Temps:          3       0       0       0       0
  5058 ;;      Totals:         8       0       0       0       0
  5059 ;;Total ram usage:        8 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; This function calls:
  5062 ;;		Nothing
  5063 ;; This function is called by:
  5064 ;;		___ftdiv
  5065 ;;		___ftmul
  5066 ;;		___lwtoft
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           
  5071                           ;psect for function ___ftpack
  5072  0678                     ___ftpack:	
  5073                           
  5074                           ;incstack = 0
  5075                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5076  0678  0873               	movf	___ftpack@exp,w
  5077  0679  1903               	btfsc	3,2
  5078  067A  2E80               	goto	i1l1813
  5079  067B  0872               	movf	___ftpack@arg+2,w
  5080  067C  0471               	iorwf	___ftpack@arg+1,w
  5081  067D  0470               	iorwf	___ftpack@arg,w
  5082  067E  1D03               	skipz
  5083  067F  2E93               	goto	i1l1819
  5084  0680                     i1l1813:	
  5085  0680  3000               	movlw	0
  5086  0681  00F0               	movwf	?___ftpack
  5087  0682  3000               	movlw	0
  5088  0683  00F1               	movwf	?___ftpack+1
  5089  0684  3000               	movlw	0
  5090  0685  00F2               	movwf	?___ftpack+2
  5091  0686  0008               	return
  5092  0687                     i1l1817:	
  5093  0687  3001               	movlw	1
  5094  0688  00F5               	movwf	??___ftpack
  5095  0689  0875               	movf	??___ftpack,w
  5096  068A  07F3               	addwf	___ftpack@exp,f
  5097  068B  3001               	movlw	1
  5098  068C                     u142_25:	
  5099  068C  1003               	clrc
  5100  068D  0CF2               	rrf	___ftpack@arg+2,f
  5101  068E  0CF1               	rrf	___ftpack@arg+1,f
  5102  068F  0CF0               	rrf	___ftpack@arg,f
  5103  0690  3EFF               	addlw	-1
  5104  0691  1D03               	skipz
  5105  0692  2E8C               	goto	u142_25
  5106  0693                     i1l1819:	
  5107  0693  30FE               	movlw	254
  5108  0694  0572               	andwf	___ftpack@arg+2,w
  5109  0695  1903               	btfsc	3,2
  5110  0696  2EAE               	goto	i1l680
  5111  0697  2E87               	goto	i1l1817
  5112  0698                     i1l1821:	
  5113  0698  3001               	movlw	1
  5114  0699  00F5               	movwf	??___ftpack
  5115  069A  0875               	movf	??___ftpack,w
  5116  069B  07F3               	addwf	___ftpack@exp,f
  5117  069C  3001               	movlw	1
  5118  069D  07F0               	addwf	___ftpack@arg,f
  5119  069E  3000               	movlw	0
  5120  069F  1803               	skipnc
  5121  06A0  3001               	movlw	1
  5122  06A1  07F1               	addwf	___ftpack@arg+1,f
  5123  06A2  3000               	movlw	0
  5124  06A3  1803               	skipnc
  5125  06A4  3001               	movlw	1
  5126  06A5  07F2               	addwf	___ftpack@arg+2,f
  5127  06A6  3001               	movlw	1
  5128  06A7                     u144_25:	
  5129  06A7  1003               	clrc
  5130  06A8  0CF2               	rrf	___ftpack@arg+2,f
  5131  06A9  0CF1               	rrf	___ftpack@arg+1,f
  5132  06AA  0CF0               	rrf	___ftpack@arg,f
  5133  06AB  3EFF               	addlw	-1
  5134  06AC  1D03               	skipz
  5135  06AD  2EA7               	goto	u144_25
  5136  06AE                     i1l680:	
  5137  06AE  30FF               	movlw	255
  5138  06AF  0572               	andwf	___ftpack@arg+2,w
  5139  06B0  1903               	btfsc	3,2
  5140  06B1  2EBD               	goto	i1l1829
  5141  06B2  2E98               	goto	i1l1821
  5142  06B3                     i1l1827:	
  5143  06B3  3001               	movlw	1
  5144  06B4  02F3               	subwf	___ftpack@exp,f
  5145  06B5  3001               	movlw	1
  5146  06B6                     u146_25:	
  5147  06B6  1003               	clrc
  5148  06B7  0DF0               	rlf	___ftpack@arg,f
  5149  06B8  0DF1               	rlf	___ftpack@arg+1,f
  5150  06B9  0DF2               	rlf	___ftpack@arg+2,f
  5151  06BA  3EFF               	addlw	-1
  5152  06BB  1D03               	skipz
  5153  06BC  2EB6               	goto	u146_25
  5154  06BD                     i1l1829:	
  5155  06BD  1FF1               	btfss	___ftpack@arg+1,7
  5156  06BE  2EB3               	goto	i1l1827
  5157  06BF  1873               	btfsc	___ftpack@exp,0
  5158  06C0  2EC7               	goto	i1l686
  5159  06C1  30FF               	movlw	255
  5160  06C2  05F0               	andwf	___ftpack@arg,f
  5161  06C3  307F               	movlw	127
  5162  06C4  05F1               	andwf	___ftpack@arg+1,f
  5163  06C5  30FF               	movlw	255
  5164  06C6  05F2               	andwf	___ftpack@arg+2,f
  5165  06C7                     i1l686:	
  5166  06C7  1003               	clrc
  5167  06C8  0CF3               	rrf	___ftpack@exp,f
  5168  06C9  0873               	movf	___ftpack@exp,w
  5169  06CA  00F5               	movwf	??___ftpack
  5170  06CB  01F6               	clrf	??___ftpack+1
  5171  06CC  01F7               	clrf	??___ftpack+2
  5172  06CD  3010               	movlw	16
  5173  06CE                     u149_25:	
  5174  06CE  1003               	clrc
  5175  06CF  0DF5               	rlf	??___ftpack,f
  5176  06D0  0DF6               	rlf	??___ftpack+1,f
  5177  06D1  0DF7               	rlf	??___ftpack+2,f
  5178  06D2  3EFF               	addlw	-1
  5179  06D3  1D03               	skipz
  5180  06D4  2ECE               	goto	u149_25
  5181  06D5  0875               	movf	??___ftpack,w
  5182  06D6  04F0               	iorwf	___ftpack@arg,f
  5183  06D7  0876               	movf	??___ftpack+1,w
  5184  06D8  04F1               	iorwf	___ftpack@arg+1,f
  5185  06D9  0877               	movf	??___ftpack+2,w
  5186  06DA  04F2               	iorwf	___ftpack@arg+2,f
  5187  06DB  0874               	movf	___ftpack@sign,w
  5188  06DC  1903               	btfsc	3,2
  5189  06DD  0008               	return
  5190  06DE  17F2               	bsf	___ftpack@arg+2,7
  5191  06DF  0008               	return
  5192  06E0                     __end_of___ftpack:	
  5193  007E                     btemp	set	126	;btemp
  5194  007E                     wtemp	set	126
  5195  007E                     wtemp0	set	126
  5196  0080                     wtemp1	set	128
  5197  0082                     wtemp2	set	130
  5198  0084                     wtemp3	set	132
  5199  0086                     wtemp4	set	134
  5200  0088                     wtemp5	set	136
  5201  007F                     wtemp6	set	127
  5202  007E                     ttemp	set	126
  5203  007E                     ttemp0	set	126
  5204  0081                     ttemp1	set	129
  5205  0084                     ttemp2	set	132
  5206  0087                     ttemp3	set	135
  5207  007F                     ttemp4	set	127
  5208  007E                     ltemp	set	126
  5209  007E                     ltemp0	set	126
  5210  0082                     ltemp1	set	130
  5211  0086                     ltemp2	set	134
  5212  0080                     ltemp3	set	128


Data Sizes:
    Strings     68
    Constant    10
    Data        2
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     52      75
    BANK1            80     34      58
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> display(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S1199$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_WriteString@Str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[6]), display(BANK1[10]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___lwtoft
    ___lwtoft->___ftpack
    ___fttol->___lwtoft
    ___ftmul->___lwtoft
    ___ftdiv->___lwtoft

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->___fttol
    ___fttol->___ftmul
    ___ftmul->___ftdiv

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USART_Init->___aldiv
    _LCD_WriteString->_LCD_WriteData
    _LCD_Init->_LCD_WriteCmd
    _LCD_Clear->_LCD_WriteCmd

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3226
                                             31 BANK1      3     3      0
                           _ADC_Init
                          _LCD_Clear
                         _LCD_Cursor
                           _LCD_Init
                    _LCD_WriteString
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                           _PWM_Init
                        _TIMER0_Init
                         _TIMER0_Set
                         _USART_Init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             17    14      3    1875
                                             14 BANK1     17    14      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     514
                                             15 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     428
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Set                                           1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       4     2      2     146
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       4     2      2     108
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     0      2     259
                                              2 BANK1      2     0      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      22
                                              2 BANK1      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor                                           3     2      1     258
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      22
                                              2 BANK1      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteCmd                                         2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0    7895
                                             46 BANK0      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                   i1_PWM_DutyCycle2
                       i1_TIMER0_Set
 ---------------------------------------------------------------------------------
 (4) i1_TIMER0_Set                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) i1_PWM_DutyCycle2                                     4     2      2      70
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2095
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     316
                                             32 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2463
                                             16 BANK0     16    10      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2929
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2009
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Clear
     _LCD_WriteCmd
   _LCD_Cursor
   _LCD_Init
     _LCD_WriteCmd
   _LCD_WriteString
     _LCD_WriteData
   _PWM_DutyCycle1
   _PWM_DutyCycle2
   _PWM_Init
   _TIMER0_Init
   _TIMER0_Set
   _USART_Init
     ___aldiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   i1_PWM_DutyCycle2
   i1_TIMER0_Set

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     34      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      93      12        0.0%
ABS                  0      0      93       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue May 24 21:31:34 2022

        ?i1_PWM_DutyCycle2 0070                          pc 0002                ?_LCD_Cursor 00A0  
  __size_of_PWM_DutyCycle1 0021    __size_of_PWM_DutyCycle2 0021                __CFG_CP$OFF 0000  
              _SSPSTATbits 0094                         fsr 0004        ___wmul@multiplicand 00A2  
       ??i1_PWM_DutyCycle2 0072              _contagens_tm0 005B                        l123 027C  
                      l400 0063                        l418 0128                        l519 0F57  
                      l574 0502                        _PR2 0092               __CFG_CPD$OFF 0000  
                      _ISR 0458                        _rpm 007C                        fsr0 0004  
                      indf 0000               __CFG_FOSC$HS 0000          ??_LCD_WriteString 00A4  
             __CFG_LVP$OFF 0000                       ?_ISR 0070               ___ftdiv@cntr 002A  
             ___ftdiv@sign 002F                       l2101 00F9                       l2035 06EE  
                     l2117 0147                       l2109 011A         LCD_WriteString@Str 00A2  
                     l2143 018B                       l2127 015C                       l2135 0172  
                     l2119 014B                       l2071 0073                       l2063 005F  
                     l2049 0F99                       l2137 0176                       l2161 01E6  
                     l2075 0085                       l2157 019E                       l2149 019A  
                     l2085 00C3                       l2069 0068                       l2087 00DA  
                     l2159 003D                       l2097 00F3                       l1901 07E0  
                     l1913 0FD2                       l1915 0FE0                       l1923 0FF9  
                     l1871 0568                       l1919 0FEE                       l1857 0523  
                     l1849 0513                       l1793 0E8B                       l1875 0576  
                     l1867 055B                       l1859 0533                       l1891 07BF  
                     l1799 0F4F                       l1897 07D5                       l1889 07B1  
                     STR_1 0742                       STR_2 0759                       STR_3 0753  
                     STR_4 071A                       u1375 0F58                       u1545 0527  
                     u1625 07B4                       u1385 0F5F                       u1715 0FE6  
                     u1565 0535                       u1645 07C0                       u1725 0FEF  
                     u2517 0275                       u2607 0669                       u1575 054A  
                     u1655 07CC                       u2527 02C6                       u2617 0675  
                     u2537 07F8                       u1745 0F1B                       u1585 055C  
                     u1665 07D6                       u2627 06FA                       u2547 0617  
                     u1755 0769                       u2637 0F7C                       u2557 0627  
                     u1845 0110                       u2647 0F8A                       u2567 0635  
                     u1695 0FD5                       u2657 0F96                       u2577 0641  
                     u1785 0EFA                       u2667 0EC4                       u2587 064D  
                     u2597 065B                       u1885 0137                       _OERR 00C1  
                     _TMR0 0001                       _TMR1 000E                       _main 01ED  
             ___ftpack@arg 0070         __size_of_LCD_Clear 0029               ___ftpack@exp 0073  
                     btemp 007E           __end_of_ADC_Init 0E9F                       ltemp 007E  
                     start 0012                       ttemp 007E                       wtemp 007E  
            ?_LCD_WriteCmd 0070              _LCD_WriteData 07E7               ___ftmul@cntr 003E  
             ___ftmul@sign 003F                      ??_ISR 004E               ___fttol@exp1 004D  
             ___fttol@lval 0049                ?_TIMER0_Set 0070           __end_of_LCD_Init 0678  
          __end_of___aldiv 057F                      ?_main 0070                      _EEADR 010D  
            __CFG_WDTE$OFF 0000            __end_of___ftdiv 0458            __end_of___ftmul 03A0  
                    _T1CON 0010            __end_of___fttol 060D            __end_of___lwdiv 07E7  
          __end_of___lwmod 1000                      i1l680 06AE                      i1l686 06C7  
                    _RCREG 001A                      _TMR1H 000F                      _TMR1L 000E  
                    _SPBRG 0099                      _PORTA 0005                      _PORTB 0006  
                    _PORTC 0007                      _PORTD 0008                      _PORTE 0009  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                      _TXREG 0019  
            __CFG_PWRTE$ON 0000            __end_of_dpowers 071A            __end_of_isdigit 0E8D  
            ___ftpack@sign 0074             __CFG_BOREN$OFF 0000        __size_of_LCD_Cursor 0020  
                    pclath 000A           __end_of_PWM_Init 0F4B                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F            __end_of_sprintf 01ED             ??_LCD_WriteCmd 00A0  
           ?_LCD_WriteData 0070                ?_USART_Init 00AF      i1TIMER0_Set@contagens 0070  
          __initialization 0015               __end_of_main 02CD                     ??_main 00BF  
            ___fttol@sign1 0048               ?_TIMER0_Init 0070          __end_of_LCD_Clear 0F99  
                   _ADRESH 001E                     _ADRESL 009E                     _EEDATA 010C  
                   _CCPR1L 0015                     _CCPR2L 001B                     _EECON2 018D  
         __end_of___ftpack 06E0                     i1l2201 0413                     i1l2301 05F3  
                   i1l2223 02E5                     i1l2303 05F6                     i1l2209 0432  
                   i1l2241 033A                     i1l2401 04E0                     i1l2307 0604  
                   i1l2403 04E1                     u200_25 03E0                     i1l2181 03B8  
                   i1l2253 0362                     i1l2245 034A                     i1l2229 02FB  
                   i1l2257 0372                     i1l2273 0599                     i1l2187 03CE  
                   i1l2291 05CB                     i1l1821 0698                     i1l1813 0680  
                   u201_25 03F2                     i1l2293 05DB                     i1l1817 0687  
                   i1l1827 06B3                     i1l1819 0693                     i1l2299 05E8  
                   i1l1829 06BD                     u202_25 0414                     i1l2389 0475  
                   u203_25 0425                     u204_25 0433                     u212_25 034B  
                   u213_25 0353                     u221_25 05A0                     u142_25 068C  
                   u230_25 0EDB                     u144_25 06A7                     u208_25 0307  
                   u224_25 05CC                     u217_25 0373                     u209_25 0319  
                   u146_25 06B6                     u218_25 037B                     u227_25 05EA  
                   u149_25 06CE           __end_of___lwtoft 0EB3        __size_of_TIMER0_Set 0008  
                   _SSPADD 0093                     _SSPBUF 0013           LCD_WriteCmd@Byte 00A1  
                ??___aldiv 00A8                     ___wmul 0F4B             _PWM_DutyCycle1 0EE5  
           _PWM_DutyCycle2 0F06                  ??___ftdiv 0026                  ??___ftmul 0036  
                ??___fttol 0044                  ??___lwdiv 00A4                  ??___lwmod 00AC  
                   _buffer 00C2                     _ligado 0069                     _pulsos 005F  
                   _status 0065      ___ftmul@f3_as_product 003B                  ??_isdigit 00A0  
                ?_ADC_Init 0070                     saved_w 007E        __size_of_USART_Init 0049  
                ??_sprintf 00B1              ?i1_TIMER0_Set 0070    __end_of__initialization 0032  
                ?_LCD_Init 0070            ??_LCD_WriteData 00A0                 ___ftdiv@f1 0023  
               ___ftdiv@f2 0020                 ___ftdiv@f3 002B     __end_of_PWM_DutyCycle1 0F06  
   __end_of_PWM_DutyCycle2 0F27                 ___ftmul@f1 0030                 ___ftmul@f2 0033  
               ___fttol@f1 0040             __pcstackCOMMON 0070               __pidataBANK0 07FE  
            LCD_Cursor@Col 00A0              LCD_Cursor@Row 00A2               ??_LCD_Cursor 00A1  
          _LCD_WriteString 0F99                 ___lwtoft@c 0078                  ?_PWM_Init 0070  
           _OPTION_REGbits 0081                 ??_ADC_Init 00A0       __end_of_LCD_WriteCmd 0ECA  
__size_ofi1_PWM_DutyCycle2 001B             ??i1_TIMER0_Set 0070               sprintf@width 00BB  
               __pbssBANK0 0054                 __pbssBANK1 00C2         __end_of_LCD_Cursor 0700  
               ??_LCD_Init 00A2            ?_PWM_DutyCycle1 00A0            ?_PWM_DutyCycle2 00A0  
               __pmaintext 01ED                    ?___wmul 00A0                 __pintentry 0004  
             ??_TIMER0_Set 00A0                    _CCP1CON 0017                    _CCP2CON 001D  
                ?___ftpack 0070                 ??_PWM_Init 00A0                  ?___lwtoft 0078  
     __size_of_TIMER0_Init 000B                    _SSPCON2 0091                 __stringtab 0700  
       __end_of_TIMER0_Set 0E6A    __end_of_LCD_WriteString 0FCA                  _ADCResult 0057  
             ??_USART_Init 00B3          LCD_WriteData@Byte 00A1                    ___aldiv 04F0  
                  ___ftdiv 03A0            __size_of___wmul 0025                    ___ftmul 02CD  
                  ___fttol 057F                 _erro_atual 005D                    ___lwdiv 07A7  
                  ___lwmod 0FCA                 ??___ftpack 0075                    __ptext1 0036  
                  __ptext2 0E7D                    __ptext3 0F4B                    __ptext4 0FCA  
                  __ptext5 07A7                    __ptext6 075E                    __ptext7 04F0  
                  __ptext8 0E62                    __ptext9 0E72                 ??___lwtoft 007B  
                  _display 00D0               __size_of_ISR 0098                  _T1CONbits 0010  
                  _dpowers 0710                  _T2CONbits 0012                    _isdigit 0E7D  
         ___aldiv@dividend 00A4                  _LCD_Clear 0F70         __end_of_USART_Init 07A7  
                  _sprintf 0036                    clrloop0 0E6B       end_of_initialization 0032  
                _RCSTAbits 0018           ___aldiv@quotient 00AB       __end_ofi1_TIMER0_Set 0E62  
    __size_of_LCD_WriteCmd 0017                  _PORTBbits 0006                  _PORTEbits 0009  
               ?_LCD_Clear 0070           i1_PWM_DutyCycle2 0ECA          __size_of_ADC_Init 0012  
             _contador_rb6 0059        PWM_DutyCycle1@valor 00A0        PWM_DutyCycle2@valor 00A0  
              _CCP1CONbits 0017                ___ftdiv@exp 002E                _CCP2CONbits 001D  
                _TXSTAbits 0098           ?_LCD_WriteString 00A2          __size_of_LCD_Init 006B  
             _LCD_WriteCmd 0EB3                ___ftmul@exp 003A             __end_of___wmul 0F70  
        __size_of_PWM_Init 0024        start_initialization 0015                __end_of_ISR 04F0  
         ??_PWM_DutyCycle1 00A2           ??_PWM_DutyCycle2 00A2      __end_of_LCD_WriteData 07FE  
                 ??___wmul 00A4                __pdataBANK0 0069          __size_of___ftpack 0068  
              __pbssCOMMON 007C                  ___latbits 0002          __size_of___lwtoft 0014  
            __pcstackBANK0 0020              __pcstackBANK1 00A0                ??_LCD_Clear 00A2  
      __end_of__stringdata 075E               _isdigit$1395 00A0                sprintf@_val 00B6  
              sprintf@flag 00BA                sprintf@prec 00B5      __size_ofi1_TIMER0_Set 0006  
         ___lwdiv@dividend 00A2        TIMER0_Set@contagens 00A0                   ?___aldiv 00A0  
                 ?___ftdiv 0020                   ?___ftmul 0030                   ?___fttol 0040  
                 ?___lwdiv 00A0                   ?___lwmod 00A8                  __pstrings 0700  
            ??_TIMER0_Init 00A0         USART_Init@BaudRate 00AF                   ?_isdigit 0070  
                 _ADC_Init 0E8D           ___lwdiv@quotient 00A5                   ?_sprintf 00AE  
             i1_TIMER0_Set 0E5C               _receiveIndex 0061            ___aldiv@divisor 00A0  
        interrupt_function 0004            ___aldiv@counter 00A9                   _LCD_Init 060D  
           ___wmul@product 00A4                  clear_ram0 0E6A                   _PIE1bits 008C  
                 _PIE2bits 008D                   _PIR1bits 000C                   _PIR2bits 000D  
                _temp_lida 0054   __end_ofi1_PWM_DutyCycle2 0EE5                  _tempo_rb6 0067  
               _ADCON0bits 001F                __stringbase 070F                 _ADCON1bits 009F  
              __stringdata 071A                   _PWM_Init 0F27          ___wmul@multiplier 00A0  
      __end_of_TIMER0_Init 0E7D                 _EECON1bits 018C           __size_of___aldiv 008F  
         __size_of___ftdiv 00B8           __size_of___ftmul 00D3           __size_of___fttol 008E  
         __size_of___lwdiv 0040           __size_of___lwmod 0036                   ___ftpack 0678  
       __end_of__stringtab 0710                   ___lwtoft 0E9F           __size_of_isdigit 0010  
          ___lwdiv@divisor 00A0            ___lwdiv@counter 00A7                   __ptext10 0F27  
                 __ptext11 0F06                   __ptext20 0458                   __ptext12 0EE5  
                 __ptext21 0E5C                   __ptext13 0F99                   __ptext22 0ECA  
                 __ptext14 07E7                   __ptext23 0E9F                   __ptext15 060D  
                 __ptext24 057F                   __ptext16 06E0                   __ptext25 02CD  
                 __ptext17 0F70                   __ptext26 03A0                   __ptext18 0EB3  
                 __ptext27 0678                   __ptext19 0E8D           __size_of_sprintf 01B7  
            __size_of_main 00E0             _receivedBuffer 00C9                   _setpoint 0063  
               _LCD_Cursor 06E0   __size_of_LCD_WriteString 0031                _TIMER0_Init 0E72  
               _INTCONbits 000B                   isdigit@c 00A1                   intlevel1 0000  
                sprintf@ap 00B4                  sprintf@sp 00BD           ___lwmod@dividend 00AA  
                stringcode 070A                 _TIMER0_Set 0E62                   sprintf@c 00BE  
                 sprintf@f 00AE            ___lwmod@divisor 00A8            ___lwmod@counter 00AD  
                 stringdir 070A                   stringtab 0700               ___aldiv@sign 00AA  
   __size_of_LCD_WriteData 0017                _SSPCON2bits 0091      i1PWM_DutyCycle2@valor 0070  
               _SSPCONbits 0014                 _USART_Init 075E  
